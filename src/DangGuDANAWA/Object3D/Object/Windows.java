package DangGuDANAWA.Object3D.Object;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;

import DangGuDANAWA.Object3D.Interface.Object3D;

public class Windows implements Object3D{
	private int size[];
	private int objectNumber;

	public Windows() {
		setValue();
		setVertex0();
		setFace0();
		setNormal0();
		setColor0();
		setVertex1();
		setFace1();
		setNormal1();
		setColor1();
		setVertex2();
		setFace2();
		setNormal2();
		setColor2();
		setVertex3();
		setFace3();
		setNormal3();
		setColor3();
		setVertex4();
		setFace4();
		setNormal4();
		setColor4();
		setVertex5();
		setFace5();
		setNormal5();
		setColor5();
		setVertex6();
		setFace6();
		setNormal6();
		setColor6();
		setVertex7();
		setFace7();
		setNormal7();
		setColor7();
		setVertex8();
		setFace8();
		setNormal8();
		setColor8();
		setVertex9();
		setFace9();
		setNormal9();
		setColor9();
		setVertex10();
		setFace10();
		setNormal10();
		setColor10();
	}

	public void draw(GL10 gl) {
		gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
		gl.glEnableClientState(GL10.GL_COLOR_ARRAY);
		gl.glEnableClientState(GL10.GL_NORMAL_ARRAY);
		gl.glFrontFace(GL10.GL_CCW);
		gl.glDisable(GL10.GL_TEXTURE_2D);
		for (int i = 0; i < objectNumber; i++) {
			gl.glVertexPointer(3, GL10.GL_FLOAT, 0, mVertexBuffer[i]);
			gl.glColorPointer(4, GL10.GL_FLOAT, 0, mColorBuffer[i]);
			gl.glNormalPointer(GL10.GL_FLOAT, 0, mNormalBuffer[i]);
			gl.glDrawElements(GL10.GL_TRIANGLES, size[i],
					GL10.GL_UNSIGNED_BYTE, mIndexBuffer[i]);
		}
		gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);
		gl.glDisableClientState(GL10.GL_COLOR_ARRAY);
		gl.glDisableClientState(GL10.GL_NORMAL_ARRAY);
	}

	private FloatBuffer[] mVertexBuffer;
	private FloatBuffer[] mColorBuffer;
	private FloatBuffer[] mNormalBuffer;
	private ByteBuffer[] mIndexBuffer;

	public void setValue() {
		objectNumber = 11;
		size = new int[objectNumber];
		mVertexBuffer = new FloatBuffer[objectNumber];
		mIndexBuffer = new ByteBuffer[objectNumber];
		mNormalBuffer = new FloatBuffer[objectNumber];
		mColorBuffer = new FloatBuffer[objectNumber];
	}

	public void setVertex0() {
		float valueVertex[] = { -1.09976f, -0.799994f, 19.1f, 0.200244f,
				-0.499994f, 19.2f, 0.200244f, -0.799994f, 19.2f, -1.09976f,
				-0.499994f, 19.1f, 8.00024f, -0.799994f, 15.7f, 8.00024f,
				0.200006f, 15.7f, 7.60024f, -0.499994f, 15.6f, 7.60024f,
				-0.799994f, 15.6f, 0.500244f, -0.799994f, 19.2f, 0.500244f,
				-0.499994f, 19.2f, 4.50024f, -0.799994f, 18.2f, 5.70024f,
				-0.499994f, 17.5f, 5.70024f, -0.799994f, 17.5f, 4.50024f,
				-0.499994f, 18.2f, -6.29976f, 0.200006f, 16.8f, -5.19976f,
				-0.799994f, 17.8f, -5.19976f, 0.200006f, 17.8f, -6.29976f,
				-0.799994f, 16.8f, -2.59976f, 0.200006f, 19.1f, -1.09976f,
				-0.799994f, 19.4f, -1.09976f, 0.200006f, 19.4f, -2.59976f,
				-0.799994f, 19.1f, -3.89976f, 0.200006f, 18.5f, -3.89976f,
				-0.799994f, 18.5f, 0.300244f, -0.799994f, 19.5f, 0.300244f,
				0.200006f, 19.5f, 7.50024f, -0.799994f, 15.7f, 7.70024f,
				-0.799994f, 16f, 7.30024f, -0.799994f, 16f, 7.00024f,
				-0.799994f, 16.8f, 6.80024f, -0.799994f, 16.6f, 5.90024f,
				-0.799994f, 17.8f, 4.60024f, -0.799994f, 18.5f, 3.10024f,
				-0.799994f, 18.8f, 3.20024f, -0.799994f, 19.1f, 1.70024f,
				-0.799994f, 19.1f, 1.80024f, -0.799994f, 19.4f, -7.29976f,
				-0.799994f, 15.7f, -6.99976f, -0.799994f, 15.6f, -6.09976f,
				-0.799994f, 16.6f, -6.99976f, -0.799994f, 16f, -4.99976f,
				-0.799994f, 17.5f, -3.79976f, -0.799994f, 18.2f, -2.49976f,
				-0.799994f, 18.8f, 7.00024f, -0.199994f, 16f, 7.00024f,
				-0.299994f, 16f, 5.90024f, 0.200006f, 17.8f, 7.00024f,
				0.200006f, 16.8f, 4.20024f, -0.199994f, 18.1f, 4.20024f,
				-0.299994f, 18.1f, 3.20024f, 0.200006f, 19.1f, 4.60024f,
				0.200006f, 18.5f, 1.80024f, 0.200006f, 19.4f, 7.50024f,
				-0.499994f, 15.7f, 7.30024f, -0.499994f, 16f, 6.80024f,
				-0.499994f, 16.6f, -7.29976f, 0.200006f, 15.7f, -6.99976f,
				0.200006f, 16f, 7.70024f, 0.200006f, 16f, 0.200244f,
				-0.199994f, 19.2f, 0.000244141f, -0.199994f, 16f, -6.69976f,
				-0.199994f, 15.7f, 0.000244141f, -0.199994f, 19f, -1.09976f,
				-0.199994f, 19.1f, -3.29976f, -0.199994f, 18.3f, -3.59976f,
				-0.199994f, 18.1f, -3.79976f, -0.199994f, 18.2f, -2.49976f,
				-0.199994f, 18.8f, -2.39976f, -0.199994f, 18.6f, -1.09976f,
				-0.199994f, 18.9f, -6.99976f, -0.199994f, 15.6f, -6.79976f,
				-0.199994f, 15.5f, -6.09976f, -0.199994f, 16.6f, -6.39976f,
				-0.199994f, 16f, -5.99976f, -0.199994f, 16.5f, -4.89976f,
				-0.199994f, 17.4f, -4.99976f, -0.199994f, 17.5f, -3.69976f,
				-0.199994f, 18.1f, -6.99976f, 0.200006f, 15.6f, -6.09976f,
				0.200006f, 16.6f, -4.99976f, 0.200006f, 17.5f, -3.79976f,
				0.200006f, 18.2f, -2.49976f, 0.200006f, 18.8f, -1.09976f,
				0.200006f, 19.1f, 0.200244f, 0.200006f, 19.2f, 0.500244f,
				0.200006f, 19.2f, 7.60024f, 0.200006f, 15.6f, 7.50024f,
				0.200006f, 15.7f, 7.30024f, 0.200006f, 16f, 6.80024f,
				0.200006f, 16.6f, 5.70024f, 0.200006f, 17.5f, 4.50024f,
				0.200006f, 18.2f, 3.10024f, 0.200006f, 18.8f, 1.70024f,
				0.200006f, 19.1f, -2.49976f, -0.499994f, 18.8f, 0.600244f,
				-0.299994f, 16f, 0.600244f, -0.199994f, 19f, 0.600244f,
				-0.199994f, 16f, 0.600244f, -0.299994f, 19f, 3.10024f,
				-0.199994f, 18.6f, 3.90024f, -0.299994f, 18.3f, 3.90024f,
				-0.199994f, 18.3f, 3.10024f, -0.299994f, 18.6f, 1.70024f,
				-0.299994f, 18.9f, 1.70024f, -0.199994f, 18.9f, 3.10024f,
				-0.499994f, 18.8f, 1.70024f, -0.499994f, 19.1f, -3.29976f,
				-0.299994f, 18.3f, 0.000244141f, -0.299994f, 19f, 0.000244141f,
				-0.299994f, 16f, -2.39976f, -0.299994f, 18.6f, -1.09976f,
				-0.299994f, 18.9f, 4.40024f, -0.199994f, 18.1f, 5.60024f,
				-0.299994f, 17.4f, 5.60024f, -0.199994f, 17.4f, 4.40024f,
				-0.299994f, 18.1f, 6.70024f, -0.299994f, 16.5f, 6.70024f,
				-0.199994f, 16.5f, -6.99976f, -0.499994f, 15.6f, -6.09976f,
				-0.499994f, 16.6f, -4.99976f, -0.499994f, 17.5f, -3.79976f,
				-0.499994f, 18.2f, -3.59976f, -0.299994f, 18.1f, -3.69976f,
				-0.299994f, 18.1f, -4.89976f, -0.299994f, 17.4f, -5.99976f,
				-0.299994f, 16.5f, -6.39976f, -0.299994f, 16f, -6.69976f,
				-0.299994f, 15.7f, 7.30024f, -0.299994f, 15.7f, 7.30024f,
				-0.199994f, 15.7f, 7.50024f, -0.299994f, 15.5f, 7.50024f,
				-0.199994f, 15.5f, -6.79976f, -0.299994f, 15.5f, 7.60024f,
				-0.199994f, 15.6f, 7.50024f, -0.199994f, 15.7f, 7.30024f,
				-0.199994f, 16f, 6.80024f, -0.199994f, 16.6f, 5.70024f,
				-0.199994f, 17.5f, 4.50024f, -0.199994f, 18.2f, 3.10024f,
				-0.199994f, 18.8f, 1.70024f, -0.199994f, 19.1f, 0.500244f,
				-0.199994f, 19.2f, 7.50024f, -0.499994f, 15.5f, 7.30024f,
				-0.499994f, 15.7f, 7.00024f, -0.499994f, 16f, 6.70024f,
				-0.499994f, 16.5f, 5.60024f, -0.499994f, 17.4f, 4.40024f,
				-0.499994f, 18.1f, 4.20024f, -0.499994f, 18.1f, 3.90024f,
				-0.499994f, 18.3f, 3.10024f, -0.499994f, 18.6f, 1.70024f,
				-0.499994f, 18.9f, 0.600244f, -0.499994f, 19f, 0.600244f,
				-0.499994f, 16f, 0.000244141f, -0.499994f, 16f, -6.69976f,
				-0.499994f, 15.7f, 0.000244141f, -0.499994f, 19f, -3.29976f,
				-0.499994f, 18.3f, -3.59976f, -0.499994f, 18.1f, -2.39976f,
				-0.499994f, 18.6f, -1.09976f, -0.499994f, 18.9f, -6.79976f,
				-0.499994f, 15.5f, -6.39976f, -0.499994f, 16f, -5.99976f,
				-0.499994f, 16.5f, -4.89976f, -0.499994f, 17.4f, -3.69976f,
				-0.499994f, 18.1f };
		ByteBuffer vbb = ByteBuffer.allocateDirect(valueVertex.length * 4);
		vbb.order(ByteOrder.nativeOrder());
		mVertexBuffer[0] = vbb.asFloatBuffer();
		mVertexBuffer[0].put(valueVertex);
		mVertexBuffer[0].position(0);
	}

	public void setVertex1() {
		float valueVertex[] = { -3.59976f, -0.299994f, 11.9f, -6.79976f,
				-0.299994f, 8.40001f, -3.59976f, -0.299994f, 8.40001f,
				-6.79976f, -0.299994f, 11.9f, 0.000244141f, -0.299994f,
				8.10001f, -3.29976f, -0.299994f, 4.60001f, 0.000244141f,
				-0.299994f, 4.60001f, -3.29976f, -0.299994f, 8.10001f,
				7.50024f, -0.299994f, 11.9f, 4.20024f, -0.299994f, 8.40001f,
				7.50024f, -0.299994f, 8.40001f, 4.20024f, -0.299994f, 11.9f,
				6.70024f, -0.299994f, 16.5f, 4.20024f, -0.299994f, 16f,
				7.00024f, -0.299994f, 16f, 4.20024f, -0.299994f, 18.1f,
				5.60024f, -0.299994f, 17.4f, 4.40024f, -0.299994f, 18.1f,
				0.000244141f, -0.299994f, 15.7f, -3.29976f, -0.299994f, 12.2f,
				0.000244141f, -0.299994f, 12.2f, -3.29976f, -0.299994f, 15.7f,
				-3.59976f, -0.299994f, 18.1f, -6.39976f, -0.299994f, 16f,
				-3.59976f, -0.299994f, 16f, -5.99976f, -0.299994f, 16.5f,
				-4.89976f, -0.299994f, 17.4f, -3.69976f, -0.299994f, 18.1f,
				3.90024f, -0.299994f, 15.7f, 0.600244f, -0.299994f, 12.2f,
				3.90024f, -0.299994f, 12.2f, 0.600244f, -0.299994f, 15.7f,
				3.90024f, -0.299994f, 8.10001f, 0.600244f, -0.299994f,
				4.60001f, 3.90024f, -0.299994f, 4.60001f, 0.600244f,
				-0.299994f, 8.10001f, 7.50024f, -0.299994f, 4.20001f, 4.20024f,
				-0.299994f, 0.900012f, 7.50024f, -0.299994f, 0.900012f,
				4.20024f, -0.299994f, 4.20001f, -3.59976f, -0.299994f,
				4.20001f, -6.79976f, -0.299994f, 0.900012f, -3.59976f,
				-0.299994f, 0.900012f, -6.79976f, -0.299994f, 4.20001f,
				-3.59976f, -0.299994f, 8.10001f, -6.79976f, -0.299994f,
				4.60001f, -3.59976f, -0.299994f, 4.60001f, -6.79976f,
				-0.299994f, 8.10001f, 3.90024f, -0.299994f, 18.3f, 0.600244f,
				-0.299994f, 16f, 3.90024f, -0.299994f, 16f, 0.600244f,
				-0.299994f, 19f, 3.10024f, -0.299994f, 18.6f, 1.70024f,
				-0.299994f, 18.9f, 0.000244141f, -0.299994f, 11.9f, -3.29976f,
				-0.299994f, 8.40001f, 0.000244141f, -0.299994f, 8.40001f,
				-3.29976f, -0.299994f, 11.9f, 0.000244141f, -0.299994f, 19f,
				-3.29976f, -0.299994f, 16f, 0.000244141f, -0.299994f, 16f,
				-3.29976f, -0.299994f, 18.3f, -2.39976f, -0.299994f, 18.6f,
				-1.09976f, -0.299994f, 18.9f, 3.90024f, -0.299994f, 11.9f,
				0.600244f, -0.299994f, 8.40001f, 3.90024f, -0.299994f,
				8.40001f, 0.600244f, -0.299994f, 11.9f, -3.59976f, -0.299994f,
				15.7f, -6.79976f, -0.299994f, 12.2f, -3.59976f, -0.299994f,
				12.2f, -6.79976f, -0.299994f, 15.5f, -6.69976f, -0.299994f,
				15.7f, 7.50024f, -0.299994f, 15.5f, 4.20024f, -0.299994f,
				12.2f, 7.50024f, -0.299994f, 12.2f, 4.20024f, -0.299994f,
				15.7f, 7.30024f, -0.299994f, 15.7f, 7.50024f, -0.299994f,
				8.10001f, 4.20024f, -0.299994f, 4.60001f, 7.50024f, -0.299994f,
				4.60001f, 4.20024f, -0.299994f, 8.10001f, 3.90024f, -0.299994f,
				4.20001f, 0.600244f, -0.299994f, 0.900012f, 3.90024f,
				-0.299994f, 0.900012f, 0.600244f, -0.299994f, 4.20001f,
				0.000244141f, -0.299994f, 4.20001f, -3.29976f, -0.299994f,
				0.900012f, 0.000244141f, -0.299994f, 0.900012f, -3.29976f,
				-0.299994f, 4.20001f };
		ByteBuffer vbb = ByteBuffer.allocateDirect(valueVertex.length * 4);
		vbb.order(ByteOrder.nativeOrder());
		mVertexBuffer[1] = vbb.asFloatBuffer();
		mVertexBuffer[1].put(valueVertex);
		mVertexBuffer[1].position(0);
	}

	public void setVertex2() {
		float valueVertex[] = { -6.79976f, -0.299994f, 8.40001f, -3.59976f,
				-0.199994f, 8.40001f, -3.59976f, -0.299994f, 8.40001f,
				-6.79976f, -0.199994f, 8.40001f, 0.000244141f, -0.199994f,
				4.20001f, 0.000244141f, -0.199994f, 4.60001f, -3.29976f,
				-0.199994f, 4.20001f, -3.59976f, -0.199994f, 4.20001f,
				-6.79976f, -0.199994f, 4.20001f, 0.000244141f, -0.199994f,
				8.10001f, 0.000244141f, -0.199994f, 8.40001f, -3.29976f,
				-0.199994f, 8.10001f, -3.59976f, -0.199994f, 8.10001f,
				-6.79976f, -0.199994f, 8.10001f, 0.000244141f, -0.199994f,
				11.9f, 0.000244141f, -0.199994f, 12.2f, -3.29976f, -0.199994f,
				11.9f, -3.59976f, -0.199994f, 11.9f, -6.79976f, -0.199994f,
				11.9f, 0.000244141f, -0.199994f, 15.7f, 0.000244141f,
				-0.199994f, 16f, -3.29976f, -0.199994f, 15.7f, -3.59976f,
				-0.199994f, 15.7f, -6.69976f, -0.199994f, 15.7f, -3.29976f,
				-0.199994f, 18.3f, -3.59976f, -0.199994f, 16f, -3.29976f,
				-0.199994f, 16f, -3.59976f, -0.199994f, 18.1f, -3.29976f,
				-0.199994f, 0.900012f, -3.59976f, -0.199994f, 0.900012f,
				-6.79976f, -0.199994f, 4.60001f, -3.29976f, -0.199994f,
				4.60001f, -3.59976f, -0.199994f, 4.60001f, -3.29976f,
				-0.199994f, 8.40001f, -6.79976f, -0.199994f, 12.2f, -3.29976f,
				-0.199994f, 12.2f, -3.59976f, -0.199994f, 12.2f, -6.39976f,
				-0.199994f, 16f, -3.59976f, -0.299994f, 4.20001f, -6.79976f,
				-0.299994f, 4.20001f, -3.59976f, -0.299994f, 0.900012f,
				-3.29976f, -0.299994f, 4.60001f, -3.29976f, -0.299994f,
				8.10001f, 0.000244141f, -0.299994f, 4.60001f, -6.79976f,
				-0.299994f, 4.60001f, -6.79976f, -0.299994f, 8.10001f,
				-3.59976f, -0.299994f, 4.60001f, 0.000244141f, -0.299994f,
				8.10001f, -6.79976f, -0.499994f, 8.10001f, -3.59976f,
				-0.299994f, 8.10001f, -3.59976f, -0.499994f, 8.10001f,
				-6.79976f, -0.499994f, 4.60001f, 0.000244141f, -0.299994f,
				11.9f, -3.29976f, -0.299994f, 11.9f, -3.59976f, -0.499994f,
				4.60001f, -3.29976f, -0.299994f, 16f, -3.29976f, -0.299994f,
				18.3f, 0.000244141f, -0.299994f, 16f, -3.59976f, -0.299994f,
				11.9f, -6.79976f, -0.299994f, 11.9f, 0.000244141f, -0.299994f,
				4.20001f, -3.29976f, -0.299994f, 4.20001f, 0.000244141f,
				-0.299994f, 15.7f, -3.29976f, -0.299994f, 15.7f, -3.59976f,
				-0.299994f, 18.1f, -3.59976f, -0.299994f, 16f, -6.39976f,
				-0.299994f, 16f, -6.79976f, -0.299994f, 12.2f, -3.59976f,
				-0.299994f, 12.2f, -3.59976f, -0.299994f, 15.7f, -6.69976f,
				-0.299994f, 15.7f, -3.29976f, -0.299994f, 12.2f, 0.000244141f,
				-0.299994f, 12.2f, -3.29976f, -0.299994f, 8.40001f,
				0.000244141f, -0.299994f, 8.40001f, -3.29976f, -0.299994f,
				0.900012f, 0.000244141f, -0.499994f, 4.20001f, 0.000244141f,
				-0.499994f, 4.60001f, -3.29976f, -0.499994f, 4.20001f,
				-3.59976f, -0.499994f, 4.20001f, -6.79976f, -0.499994f,
				4.20001f, 0.000244141f, -0.499994f, 8.10001f, 0.000244141f,
				-0.499994f, 8.40001f, -3.29976f, -0.499994f, 8.10001f,
				0.000244141f, -0.499994f, 11.9f, 0.000244141f, -0.499994f,
				12.2f, -3.29976f, -0.499994f, 11.9f, -3.59976f, -0.499994f,
				11.9f, -6.79976f, -0.499994f, 11.9f, 0.000244141f, -0.499994f,
				15.7f, 0.000244141f, -0.499994f, 16f, -3.29976f, -0.499994f,
				15.7f, -3.59976f, -0.499994f, 15.7f, -6.69976f, -0.499994f,
				15.7f, -3.29976f, -0.499994f, 18.3f, -3.59976f, -0.499994f,
				16f, -3.29976f, -0.499994f, 16f, -3.59976f, -0.499994f, 18.1f,
				-3.29976f, -0.499994f, 0.900012f, -3.59976f, -0.499994f,
				0.900012f, -3.29976f, -0.499994f, 4.60001f, -6.79976f,
				-0.499994f, 8.40001f, -3.29976f, -0.499994f, 8.40001f,
				-3.59976f, -0.499994f, 8.40001f, -6.79976f, -0.499994f, 12.2f,
				-3.29976f, -0.499994f, 12.2f, -3.59976f, -0.499994f, 12.2f,
				-6.39976f, -0.499994f, 16f };
		ByteBuffer vbb = ByteBuffer.allocateDirect(valueVertex.length * 4);
		vbb.order(ByteOrder.nativeOrder());
		mVertexBuffer[2] = vbb.asFloatBuffer();
		mVertexBuffer[2].put(valueVertex);
		mVertexBuffer[2].position(0);
	}

	public void setVertex3() {
		float valueVertex[] = { 0.600244f, -0.299994f, 4.60001f, 0.600244f,
				-0.199994f, 8.10001f, 0.600244f, -0.199994f, 4.60001f,
				0.600244f, -0.299994f, 8.10001f, 4.20024f, -0.299994f, 16f,
				7.00024f, -0.199994f, 16f, 7.00024f, -0.299994f, 16f, 4.20024f,
				-0.199994f, 16f, 4.20024f, -0.299994f, 4.60001f, 4.20024f,
				-0.199994f, 8.10001f, 4.20024f, -0.199994f, 4.60001f, 4.20024f,
				-0.299994f, 8.10001f, 4.20024f, -0.199994f, 18.1f, 4.20024f,
				-0.299994f, 18.1f, 7.30024f, -0.499994f, 16f, 3.90024f,
				-0.299994f, 8.10001f, 3.90024f, -0.199994f, 4.60001f, 3.90024f,
				-0.199994f, 8.10001f, 3.90024f, -0.299994f, 4.60001f, 4.20024f,
				-0.299994f, 0.900012f, 4.20024f, -0.199994f, 0.900012f,
				0.600244f, -0.299994f, 16f, 0.600244f, -0.199994f, 16f,
				3.90024f, -0.299994f, 18.3f, 3.90024f, -0.199994f, 18.3f,
				3.90024f, -0.199994f, 16f, 3.90024f, -0.299994f, 16f,
				0.600244f, -0.499994f, 8.10001f, 3.90024f, -0.499994f,
				8.10001f, 7.50024f, -0.199994f, 4.60001f, 7.50024f, -0.299994f,
				4.60001f, 7.50024f, -0.299994f, 8.10001f, 7.50024f, -0.199994f,
				8.10001f, 3.90024f, -0.199994f, 0.900012f, 3.90024f,
				-0.299994f, 0.900012f, 0.600244f, -0.299994f, 8.40001f,
				3.90024f, -0.199994f, 8.40001f, 3.90024f, -0.299994f, 8.40001f,
				0.600244f, -0.199994f, 8.40001f, 4.20024f, -0.199994f, 15.7f,
				7.30024f, -0.299994f, 15.7f, 7.30024f, -0.199994f, 15.7f,
				4.20024f, -0.299994f, 15.7f, 4.20024f, -0.299994f, 12.2f,
				4.20024f, -0.199994f, 12.2f, 7.50024f, -0.199994f, 12.2f,
				7.50024f, -0.299994f, 12.2f, 4.20024f, -0.199994f, 11.9f,
				7.50024f, -0.299994f, 11.9f, 7.50024f, -0.199994f, 11.9f,
				4.20024f, -0.299994f, 11.9f, 4.20024f, -0.299994f, 8.40001f,
				4.20024f, -0.199994f, 8.40001f, 7.50024f, -0.199994f, 8.40001f,
				7.50024f, -0.299994f, 8.40001f, 0.600244f, -0.299994f, 12.2f,
				3.90024f, -0.199994f, 12.2f, 3.90024f, -0.299994f, 12.2f,
				0.600244f, -0.199994f, 12.2f, 3.90024f, -0.299994f, 15.7f,
				3.90024f, -0.199994f, 15.7f, 0.600244f, -0.199994f, 15.7f,
				0.600244f, -0.299994f, 15.7f, 3.90024f, -0.299994f, 11.9f,
				3.90024f, -0.199994f, 11.9f, 0.600244f, -0.199994f, 11.9f,
				0.600244f, -0.299994f, 11.9f, 4.20024f, -0.199994f, 4.20001f,
				7.50024f, -0.299994f, 4.20001f, 7.50024f, -0.199994f, 4.20001f,
				4.20024f, -0.299994f, 4.20001f, 3.90024f, -0.299994f, 4.20001f,
				3.90024f, -0.199994f, 4.20001f, 0.600244f, -0.199994f,
				4.20001f, 0.600244f, -0.299994f, 4.20001f, 7.30024f,
				-0.199994f, 16f, 7.50024f, -0.499994f, 4.20001f, 7.50024f,
				-0.499994f, 4.60001f, 4.20024f, -0.499994f, 4.20001f, 3.90024f,
				-0.499994f, 4.20001f, 0.600244f, -0.499994f, 4.20001f,
				7.50024f, -0.499994f, 8.10001f, 7.50024f, -0.499994f, 8.40001f,
				4.20024f, -0.499994f, 8.10001f, 7.50024f, -0.499994f, 11.9f,
				7.50024f, -0.499994f, 12.2f, 4.20024f, -0.499994f, 11.9f,
				3.90024f, -0.499994f, 11.9f, 0.600244f, -0.499994f, 11.9f,
				7.30024f, -0.499994f, 15.7f, 4.20024f, -0.499994f, 15.7f,
				3.90024f, -0.499994f, 15.7f, 0.600244f, -0.499994f, 15.7f,
				7.00024f, -0.499994f, 16f, 4.20024f, -0.499994f, 18.1f,
				3.90024f, -0.499994f, 16f, 4.20024f, -0.499994f, 16f, 3.90024f,
				-0.499994f, 18.3f, 4.20024f, -0.499994f, 0.900012f, 3.90024f,
				-0.499994f, 0.900012f, 0.600244f, -0.499994f, 4.60001f,
				4.20024f, -0.499994f, 4.60001f, 3.90024f, -0.499994f, 4.60001f,
				0.600244f, -0.499994f, 8.40001f, 4.20024f, -0.499994f,
				8.40001f, 3.90024f, -0.499994f, 8.40001f, 0.600244f,
				-0.499994f, 12.2f, 4.20024f, -0.499994f, 12.2f, 3.90024f,
				-0.499994f, 12.2f, 0.600244f, -0.499994f, 16f };
		ByteBuffer vbb = ByteBuffer.allocateDirect(valueVertex.length * 4);
		vbb.order(ByteOrder.nativeOrder());
		mVertexBuffer[3] = vbb.asFloatBuffer();
		mVertexBuffer[3].put(valueVertex);
		mVertexBuffer[3].position(0);
	}

	public void setVertex4() {
		float valueVertex[] = { 7.60024f, -0.499994f, 15.6f, 7.60024f,
				-0.499994f, 0.700012f, 0.500244f, -0.499994f, 0.700012f,
				0.500244f, -0.499994f, 19.2f, 5.70024f, -0.499994f, 17.5f,
				4.50024f, -0.499994f, 18.2f, 7.50024f, -0.499994f, 15.7f,
				7.30024f, -0.499994f, 16f, 6.80024f, -0.499994f, 16.6f,
				0.600244f, -0.499994f, 8.10001f, 3.90024f, -0.499994f,
				8.10001f, 3.10024f, -0.499994f, 18.8f, 1.70024f, -0.499994f,
				19.1f, 7.50024f, -0.499994f, 0.900012f, 7.50024f, -0.499994f,
				4.20001f, 7.50024f, -0.499994f, 4.60001f, 4.20024f, -0.499994f,
				4.20001f, 3.90024f, -0.499994f, 4.20001f, 0.600244f,
				-0.499994f, 4.20001f, 7.50024f, -0.499994f, 8.10001f, 7.50024f,
				-0.499994f, 8.40001f, 4.20024f, -0.499994f, 8.10001f, 7.50024f,
				-0.499994f, 11.9f, 7.50024f, -0.499994f, 12.2f, 4.20024f,
				-0.499994f, 11.9f, 3.90024f, -0.499994f, 11.9f, 0.600244f,
				-0.499994f, 11.9f, 7.50024f, -0.499994f, 15.5f, 7.30024f,
				-0.499994f, 15.7f, 4.20024f, -0.499994f, 15.7f, 3.90024f,
				-0.499994f, 15.7f, 0.600244f, -0.499994f, 15.7f, 7.00024f,
				-0.499994f, 16f, 6.70024f, -0.499994f, 16.5f, 5.60024f,
				-0.499994f, 17.4f, 4.40024f, -0.499994f, 18.1f, 4.20024f,
				-0.499994f, 18.1f, 3.90024f, -0.499994f, 16f, 4.20024f,
				-0.499994f, 16f, 3.90024f, -0.499994f, 18.3f, 3.10024f,
				-0.499994f, 18.6f, 1.70024f, -0.499994f, 18.9f, 0.600244f,
				-0.499994f, 19f, 0.600244f, -0.499994f, 0.900012f, 4.20024f,
				-0.499994f, 0.900012f, 3.90024f, -0.499994f, 0.900012f,
				0.600244f, -0.499994f, 4.60001f, 4.20024f, -0.499994f,
				4.60001f, 3.90024f, -0.499994f, 4.60001f, 0.600244f,
				-0.499994f, 8.40001f, 4.20024f, -0.499994f, 8.40001f, 3.90024f,
				-0.499994f, 8.40001f, 0.600244f, -0.499994f, 12.2f, 4.20024f,
				-0.499994f, 12.2f, 3.90024f, -0.499994f, 12.2f, 0.600244f,
				-0.499994f, 16f };
		ByteBuffer vbb = ByteBuffer.allocateDirect(valueVertex.length * 4);
		vbb.order(ByteOrder.nativeOrder());
		mVertexBuffer[4] = vbb.asFloatBuffer();
		mVertexBuffer[4].put(valueVertex);
		mVertexBuffer[4].position(0);
	}

	public void setVertex5() {
		float valueVertex[] = { 0.600244f, -0.199994f, 8.10001f, 0.600244f,
				-0.199994f, 4.60001f, 7.00024f, -0.199994f, 16f, 4.20024f,
				-0.199994f, 16f, 4.20024f, -0.199994f, 8.10001f, 4.20024f,
				-0.199994f, 4.60001f, 4.20024f, -0.199994f, 18.1f, 3.90024f,
				-0.199994f, 4.60001f, 3.90024f, -0.199994f, 8.10001f, 7.50024f,
				-0.199994f, 0.900012f, 4.20024f, -0.199994f, 0.900012f,
				0.600244f, -0.199994f, 19f, 0.600244f, -0.199994f, 16f,
				3.10024f, -0.199994f, 18.6f, 3.90024f, -0.199994f, 18.3f,
				1.70024f, -0.199994f, 18.9f, 3.90024f, -0.199994f, 16f,
				7.50024f, -0.199994f, 4.60001f, 7.50024f, -0.199994f, 8.10001f,
				3.90024f, -0.199994f, 0.900012f, 0.600244f, -0.199994f,
				0.900012f, 4.40024f, -0.199994f, 18.1f, 5.60024f, -0.199994f,
				17.4f, 6.70024f, -0.199994f, 16.5f, 3.90024f, -0.199994f,
				8.40001f, 0.600244f, -0.199994f, 8.40001f, 4.20024f,
				-0.199994f, 15.7f, 7.30024f, -0.199994f, 15.7f, 4.20024f,
				-0.199994f, 12.2f, 7.50024f, -0.199994f, 12.2f, 7.50024f,
				-0.199994f, 15.5f, 4.20024f, -0.199994f, 11.9f, 7.50024f,
				-0.199994f, 11.9f, 4.20024f, -0.199994f, 8.40001f, 7.50024f,
				-0.199994f, 8.40001f, 3.90024f, -0.199994f, 12.2f, 0.600244f,
				-0.199994f, 12.2f, 3.90024f, -0.199994f, 15.7f, 0.600244f,
				-0.199994f, 15.7f, 3.90024f, -0.199994f, 11.9f, 0.600244f,
				-0.199994f, 11.9f, 4.20024f, -0.199994f, 4.20001f, 7.50024f,
				-0.199994f, 4.20001f, 3.90024f, -0.199994f, 4.20001f,
				0.600244f, -0.199994f, 4.20001f, 7.60024f, -0.199994f,
				0.700012f, 0.500244f, -0.199994f, 0.700012f, 7.60024f,
				-0.199994f, 15.6f, 7.50024f, -0.199994f, 15.7f, 7.30024f,
				-0.199994f, 16f, 6.80024f, -0.199994f, 16.6f, 5.70024f,
				-0.199994f, 17.5f, 4.50024f, -0.199994f, 18.2f, 3.10024f,
				-0.199994f, 18.8f, 1.70024f, -0.199994f, 19.1f, 0.500244f,
				-0.199994f, 19.2f };
		ByteBuffer vbb = ByteBuffer.allocateDirect(valueVertex.length * 4);
		vbb.order(ByteOrder.nativeOrder());
		mVertexBuffer[5] = vbb.asFloatBuffer();
		mVertexBuffer[5].put(valueVertex);
		mVertexBuffer[5].position(0);
	}

	public void setVertex6() {
		float valueVertex[] = { -3.59976f, -0.199994f, 8.40001f, -6.79976f,
				-0.199994f, 8.40001f, 0.200244f, -0.199994f, 0.700012f,
				0.000244141f, -0.199994f, 0.900012f, -6.99976f, -0.199994f,
				0.700012f, 0.200244f, -0.199994f, 19.2f, 0.000244141f,
				-0.199994f, 4.20001f, 0.000244141f, -0.199994f, 4.60001f,
				-3.29976f, -0.199994f, 4.20001f, -3.59976f, -0.199994f,
				4.20001f, -6.79976f, -0.199994f, 4.20001f, 0.000244141f,
				-0.199994f, 8.10001f, 0.000244141f, -0.199994f, 8.40001f,
				-3.29976f, -0.199994f, 8.10001f, -3.59976f, -0.199994f,
				8.10001f, -6.79976f, -0.199994f, 8.10001f, 0.000244141f,
				-0.199994f, 11.9f, 0.000244141f, -0.199994f, 12.2f, -3.29976f,
				-0.199994f, 11.9f, -3.59976f, -0.199994f, 11.9f, -6.79976f,
				-0.199994f, 11.9f, 0.000244141f, -0.199994f, 15.7f,
				0.000244141f, -0.199994f, 16f, -3.29976f, -0.199994f, 15.7f,
				-3.59976f, -0.199994f, 15.7f, -6.69976f, -0.199994f, 15.7f,
				0.000244141f, -0.199994f, 19f, -1.09976f, -0.199994f, 19.1f,
				-3.29976f, -0.199994f, 18.3f, -3.59976f, -0.199994f, 16f,
				-3.29976f, -0.199994f, 16f, -3.59976f, -0.199994f, 18.1f,
				-3.79976f, -0.199994f, 18.2f, -2.49976f, -0.199994f, 18.8f,
				-2.39976f, -0.199994f, 18.6f, -1.09976f, -0.199994f, 18.9f,
				-6.79976f, -0.199994f, 0.900012f, -6.99976f, -0.199994f, 15.6f,
				-3.29976f, -0.199994f, 0.900012f, -3.59976f, -0.199994f,
				0.900012f, -6.79976f, -0.199994f, 4.60001f, -3.29976f,
				-0.199994f, 4.60001f, -3.59976f, -0.199994f, 4.60001f,
				-3.29976f, -0.199994f, 8.40001f, -6.79976f, -0.199994f, 12.2f,
				-3.29976f, -0.199994f, 12.2f, -3.59976f, -0.199994f, 12.2f,
				-6.79976f, -0.199994f, 15.5f, -6.09976f, -0.199994f, 16.6f,
				-6.39976f, -0.199994f, 16f, -5.99976f, -0.199994f, 16.5f,
				-4.89976f, -0.199994f, 17.4f, -4.99976f, -0.199994f, 17.5f,
				-3.69976f, -0.199994f, 18.1f };
		ByteBuffer vbb = ByteBuffer.allocateDirect(valueVertex.length * 4);
		vbb.order(ByteOrder.nativeOrder());
		mVertexBuffer[6] = vbb.asFloatBuffer();
		mVertexBuffer[6].put(valueVertex);
		mVertexBuffer[6].position(0);
	}

	public void setVertex7() {
		float valueVertex[] = { 0.200244f, -0.499994f, 19.2f, -1.09976f,
				-0.499994f, 19.1f, -6.79976f, -0.499994f, 8.10001f, -3.59976f,
				-0.499994f, 8.10001f, -6.79976f, -0.499994f, 4.60001f,
				-2.49976f, -0.499994f, 18.8f, -3.59976f, -0.499994f, 4.60001f,
				0.200244f, -0.499994f, 0.700012f, -6.99976f, -0.499994f,
				0.700012f, -6.99976f, -0.499994f, 15.6f, -6.09976f, -0.499994f,
				16.6f, -4.99976f, -0.499994f, 17.5f, -3.79976f, -0.499994f,
				18.2f, 0.000244141f, -0.499994f, 0.900012f, 0.000244141f,
				-0.499994f, 4.20001f, 0.000244141f, -0.499994f, 4.60001f,
				-3.29976f, -0.499994f, 4.20001f, -3.59976f, -0.499994f,
				4.20001f, -6.79976f, -0.499994f, 4.20001f, 0.000244141f,
				-0.499994f, 8.10001f, 0.000244141f, -0.499994f, 8.40001f,
				-3.29976f, -0.499994f, 8.10001f, 0.000244141f, -0.499994f,
				11.9f, 0.000244141f, -0.499994f, 12.2f, -3.29976f, -0.499994f,
				11.9f, -3.59976f, -0.499994f, 11.9f, -6.79976f, -0.499994f,
				11.9f, 0.000244141f, -0.499994f, 15.7f, 0.000244141f,
				-0.499994f, 16f, -3.29976f, -0.499994f, 15.7f, -3.59976f,
				-0.499994f, 15.7f, -6.69976f, -0.499994f, 15.7f, 0.000244141f,
				-0.499994f, 19f, -3.29976f, -0.499994f, 18.3f, -3.59976f,
				-0.499994f, 16f, -3.29976f, -0.499994f, 16f, -3.59976f,
				-0.499994f, 18.1f, -2.39976f, -0.499994f, 18.6f, -1.09976f,
				-0.499994f, 18.9f, -6.79976f, -0.499994f, 0.900012f, -3.29976f,
				-0.499994f, 0.900012f, -3.59976f, -0.499994f, 0.900012f,
				-3.29976f, -0.499994f, 4.60001f, -6.79976f, -0.499994f,
				8.40001f, -3.29976f, -0.499994f, 8.40001f, -3.59976f,
				-0.499994f, 8.40001f, -6.79976f, -0.499994f, 12.2f, -3.29976f,
				-0.499994f, 12.2f, -3.59976f, -0.499994f, 12.2f, -6.79976f,
				-0.499994f, 15.5f, -6.39976f, -0.499994f, 16f, -5.99976f,
				-0.499994f, 16.5f, -4.89976f, -0.499994f, 17.4f, -3.69976f,
				-0.499994f, 18.1f };
		ByteBuffer vbb = ByteBuffer.allocateDirect(valueVertex.length * 4);
		vbb.order(ByteOrder.nativeOrder());
		mVertexBuffer[7] = vbb.asFloatBuffer();
		mVertexBuffer[7].put(valueVertex);
		mVertexBuffer[7].position(0);
	}

	public void setVertex8() {
		float valueVertex[] = { -1.09976f, -0.799994f, 19.1f, 0.200244f,
				-0.799994f, 19.2f, 8.00024f, -0.799994f, 15.7f, 8.00024f,
				-0.799994f, 0.400012f, 7.60024f, -0.799994f, 0.700012f,
				7.60024f, -0.799994f, 15.6f, 0.500244f, -0.799994f, 19.2f,
				0.500244f, -0.799994f, 0.700012f, 4.50024f, -0.799994f, 18.2f,
				5.70024f, -0.799994f, 17.5f, -5.19976f, -0.799994f, 17.8f,
				-6.29976f, -0.799994f, 16.8f, -1.09976f, -0.799994f, 19.4f,
				-2.59976f, -0.799994f, 19.1f, -3.89976f, -0.799994f, 18.5f,
				0.300244f, -0.799994f, 19.5f, -7.29976f, -0.799994f, 0.400012f,
				7.50024f, -0.799994f, 15.7f, 7.70024f, -0.799994f, 16f,
				7.30024f, -0.799994f, 16f, 7.00024f, -0.799994f, 16.8f,
				6.80024f, -0.799994f, 16.6f, 5.90024f, -0.799994f, 17.8f,
				4.60024f, -0.799994f, 18.5f, 3.10024f, -0.799994f, 18.8f,
				3.20024f, -0.799994f, 19.1f, 1.70024f, -0.799994f, 19.1f,
				1.80024f, -0.799994f, 19.4f, -6.99976f, -0.799994f, 0.700012f,
				-7.29976f, -0.799994f, 15.7f, 0.200244f, -0.799994f, 0.700012f,
				-6.99976f, -0.799994f, 15.6f, -6.09976f, -0.799994f, 16.6f,
				-6.99976f, -0.799994f, 16f, -4.99976f, -0.799994f, 17.5f,
				-3.79976f, -0.799994f, 18.2f, -2.49976f, -0.799994f, 18.8f };
		ByteBuffer vbb = ByteBuffer.allocateDirect(valueVertex.length * 4);
		vbb.order(ByteOrder.nativeOrder());
		mVertexBuffer[8] = vbb.asFloatBuffer();
		mVertexBuffer[8].put(valueVertex);
		mVertexBuffer[8].position(0);
	}

	public void setVertex9() {
		float valueVertex[] = { 8.00024f, 0.200006f, 0.400012f, 8.00024f,
				0.200006f, 15.7f, -6.29976f, 0.200006f, 16.8f, -5.19976f,
				0.200006f, 17.8f, -2.59976f, 0.200006f, 19.1f, -1.09976f,
				0.200006f, 19.4f, -3.89976f, 0.200006f, 18.5f, 0.300244f,
				0.200006f, 19.5f, 5.90024f, 0.200006f, 17.8f, 7.00024f,
				0.200006f, 16.8f, 3.20024f, 0.200006f, 19.1f, 4.60024f,
				0.200006f, 18.5f, 1.80024f, 0.200006f, 19.4f, -7.29976f,
				0.200006f, 15.7f, -7.29976f, 0.200006f, 0.400012f, -6.99976f,
				0.200006f, 16f, 7.70024f, 0.200006f, 16f, -6.99976f, 0.200006f,
				0.700012f, -6.99976f, 0.200006f, 15.6f, 0.200244f, 0.200006f,
				0.700012f, -6.09976f, 0.200006f, 16.6f, -4.99976f, 0.200006f,
				17.5f, -3.79976f, 0.200006f, 18.2f, -2.49976f, 0.200006f,
				18.8f, -1.09976f, 0.200006f, 19.1f, 0.200244f, 0.200006f,
				19.2f, 0.500244f, 0.200006f, 19.2f, 7.60024f, 0.200006f,
				0.700012f, 0.500244f, 0.200006f, 0.700012f, 7.60024f,
				0.200006f, 15.6f, 7.50024f, 0.200006f, 15.7f, 7.30024f,
				0.200006f, 16f, 6.80024f, 0.200006f, 16.6f, 5.70024f,
				0.200006f, 17.5f, 4.50024f, 0.200006f, 18.2f, 3.10024f,
				0.200006f, 18.8f, 1.70024f, 0.200006f, 19.1f };
		ByteBuffer vbb = ByteBuffer.allocateDirect(valueVertex.length * 4);
		vbb.order(ByteOrder.nativeOrder());
		mVertexBuffer[9] = vbb.asFloatBuffer();
		mVertexBuffer[9].put(valueVertex);
		mVertexBuffer[9].position(0);
	}

	public void setVertex10() {
		float valueVertex[] = { 0.200244f, -0.499994f, 19.2f, 0.200244f,
				-0.799994f, 19.2f, 8.00024f, -0.799994f, 15.7f, 8.00024f,
				0.200006f, 0.400012f, 8.00024f, 0.200006f, 15.7f, 8.00024f,
				-0.799994f, 0.400012f, 7.60024f, -0.799994f, 0.700012f,
				7.60024f, -0.499994f, 15.6f, 7.60024f, -0.499994f, 0.700012f,
				7.60024f, -0.799994f, 15.6f, 0.500244f, -0.799994f, 19.2f,
				0.500244f, -0.499994f, 0.700012f, 0.500244f, -0.499994f, 19.2f,
				0.500244f, -0.799994f, 0.700012f, 0.600244f, -0.299994f,
				4.60001f, 0.600244f, -0.199994f, 8.10001f, 0.600244f,
				-0.199994f, 4.60001f, 0.600244f, -0.299994f, 8.10001f,
				-7.29976f, -0.799994f, 0.400012f, -6.99976f, -0.799994f,
				0.700012f, -7.29976f, -0.799994f, 15.7f, 0.200244f, -0.799994f,
				0.700012f, -6.99976f, -0.799994f, 15.6f, -6.79976f, -0.299994f,
				8.40001f, -6.79976f, -0.199994f, 8.40001f, -7.29976f,
				0.200006f, 15.7f, -7.29976f, 0.200006f, 0.400012f, 0.200244f,
				-0.199994f, 0.700012f, 0.000244141f, -0.199994f, 0.900012f,
				-6.99976f, -0.199994f, 0.700012f, 0.200244f, -0.199994f, 19.2f,
				0.000244141f, -0.199994f, 4.20001f, 0.000244141f, -0.199994f,
				4.60001f, -6.79976f, -0.199994f, 4.20001f, 0.000244141f,
				-0.199994f, 8.10001f, 0.000244141f, -0.199994f, 8.40001f,
				-6.79976f, -0.199994f, 8.10001f, 0.000244141f, -0.199994f,
				11.9f, 0.000244141f, -0.199994f, 12.2f, -6.79976f, -0.199994f,
				11.9f, 0.000244141f, -0.199994f, 15.7f, -6.79976f, -0.199994f,
				0.900012f, -6.99976f, -0.199994f, 15.6f, -3.29976f, -0.199994f,
				0.900012f, -3.59976f, -0.199994f, 0.900012f, -6.79976f,
				-0.199994f, 4.60001f, -6.79976f, -0.199994f, 12.2f, -6.79976f,
				-0.199994f, 15.5f, -6.79976f, -0.299994f, 4.20001f, -3.59976f,
				-0.299994f, 0.900012f, 0.000244141f, -0.299994f, 4.60001f,
				-6.79976f, -0.299994f, 4.60001f, -6.79976f, -0.299994f,
				8.10001f, 4.20024f, -0.299994f, 0.900012f, 7.50024f,
				-0.199994f, 0.900012f, 7.50024f, -0.299994f, 0.900012f,
				4.20024f, -0.199994f, 0.900012f, 0.000244141f, -0.299994f,
				8.10001f, -6.99976f, 0.200006f, 0.700012f, -6.99976f,
				0.200006f, 15.6f, 0.200244f, 0.200006f, 0.700012f, -6.79976f,
				-0.499994f, 8.10001f, 0.200244f, 0.200006f, 19.2f, 0.500244f,
				0.200006f, 19.2f, 7.60024f, 0.200006f, 0.700012f, 0.500244f,
				0.200006f, 0.700012f, 7.60024f, 0.200006f, 15.6f, -6.79976f,
				-0.499994f, 4.60001f, 0.000244141f, -0.299994f, 11.9f,
				0.600244f, -0.499994f, 8.10001f, 7.50024f, -0.199994f,
				4.60001f, 7.50024f, -0.299994f, 4.60001f, 7.50024f, -0.299994f,
				8.10001f, 7.50024f, -0.199994f, 8.10001f, 0.600244f,
				-0.299994f, 0.900012f, 3.90024f, -0.199994f, 0.900012f,
				3.90024f, -0.299994f, 0.900012f, 0.600244f, -0.199994f,
				0.900012f, -6.79976f, -0.299994f, 11.9f, 0.200244f, -0.499994f,
				0.700012f, 0.000244141f, -0.299994f, 4.20001f, -6.79976f,
				-0.299994f, 0.900012f, -6.99976f, -0.499994f, 0.700012f,
				-6.99976f, -0.499994f, 15.6f, 0.600244f, -0.299994f, 8.40001f,
				0.600244f, -0.199994f, 8.40001f, 0.000244141f, -0.299994f,
				15.7f, -6.79976f, -0.299994f, 12.2f, 7.50024f, -0.199994f,
				12.2f, 7.50024f, -0.299994f, 12.2f, 7.50024f, -0.299994f,
				15.5f, 7.50024f, -0.199994f, 15.5f, 7.50024f, -0.299994f,
				11.9f, 7.50024f, -0.199994f, 11.9f, 7.50024f, -0.199994f,
				8.40001f, 7.50024f, -0.299994f, 8.40001f, 0.600244f,
				-0.299994f, 12.2f, 0.600244f, -0.199994f, 12.2f, 0.600244f,
				-0.199994f, 15.7f, 0.600244f, -0.299994f, 15.7f, 0.000244141f,
				-0.299994f, 12.2f, -6.79976f, -0.299994f, 15.5f, 0.600244f,
				-0.199994f, 11.9f, 0.600244f, -0.299994f, 11.9f, 0.000244141f,
				-0.299994f, 8.40001f, 7.50024f, -0.299994f, 4.20001f, 7.50024f,
				-0.199994f, 4.20001f, 0.600244f, -0.199994f, 4.20001f,
				0.600244f, -0.299994f, 4.20001f, -3.29976f, -0.299994f,
				0.900012f, 0.000244141f, -0.299994f, 0.900012f, -3.59976f,
				0.200006f, 0.900012f, -3.29976f, 0.200006f, 0.900012f,
				7.60024f, -0.199994f, 0.700012f, 0.500244f, -0.199994f,
				0.700012f, 7.60024f, -0.199994f, 15.6f, 0.500244f, -0.199994f,
				19.2f, 3.90024f, 0.200006f, 0.900012f, 4.20024f, 0.200006f,
				0.900012f, 7.50024f, -0.499994f, 0.900012f, 7.50024f,
				-0.499994f, 4.20001f, 7.50024f, -0.499994f, 4.60001f,
				0.600244f, -0.499994f, 4.20001f, 7.50024f, -0.499994f,
				8.10001f, 7.50024f, -0.499994f, 8.40001f, 7.50024f, -0.499994f,
				11.9f, 7.50024f, -0.499994f, 12.2f, 0.600244f, -0.499994f,
				11.9f, 7.50024f, -0.499994f, 15.5f, 0.600244f, -0.499994f,
				15.7f, 0.600244f, -0.499994f, 0.900012f, 4.20024f, -0.499994f,
				0.900012f, 3.90024f, -0.499994f, 0.900012f, 0.600244f,
				-0.499994f, 4.60001f, 0.600244f, -0.499994f, 8.40001f,
				0.600244f, -0.499994f, 12.2f, 0.000244141f, -0.499994f,
				0.900012f, 0.000244141f, -0.499994f, 4.20001f, 0.000244141f,
				-0.499994f, 4.60001f, -6.79976f, -0.499994f, 4.20001f,
				0.000244141f, -0.499994f, 8.10001f, 0.000244141f, -0.499994f,
				8.40001f, 0.000244141f, -0.499994f, 11.9f, 0.000244141f,
				-0.499994f, 12.2f, -6.79976f, -0.499994f, 11.9f, 0.000244141f,
				-0.499994f, 15.7f, -6.79976f, -0.499994f, 0.900012f, -3.29976f,
				-0.499994f, 0.900012f, -3.59976f, -0.499994f, 0.900012f,
				-6.79976f, -0.499994f, 8.40001f, -6.79976f, -0.499994f, 12.2f,
				-6.79976f, -0.499994f, 15.5f };
		ByteBuffer vbb = ByteBuffer.allocateDirect(valueVertex.length * 4);
		vbb.order(ByteOrder.nativeOrder());
		mVertexBuffer[10] = vbb.asFloatBuffer();
		mVertexBuffer[10].put(valueVertex);
		mVertexBuffer[10].position(0);
	}

	public void setFace0() {
		byte valueFace[] = { (byte) 0, (byte) 1, (byte) 2, (byte) 1, (byte) 0,
				(byte) 3, (byte) 10, (byte) 11, (byte) 12, (byte) 11,
				(byte) 10, (byte) 13, (byte) 14, (byte) 15, (byte) 16,
				(byte) 15, (byte) 14, (byte) 17, (byte) 18, (byte) 19,
				(byte) 20, (byte) 19, (byte) 18, (byte) 21, (byte) 22,
				(byte) 21, (byte) 18, (byte) 21, (byte) 22, (byte) 23,
				(byte) 20, (byte) 24, (byte) 25, (byte) 24, (byte) 20,
				(byte) 19, (byte) 46, (byte) 29, (byte) 47, (byte) 29,
				(byte) 46, (byte) 31, (byte) 50, (byte) 32, (byte) 51,
				(byte) 32, (byte) 50, (byte) 34, (byte) 51, (byte) 31,
				(byte) 46, (byte) 31, (byte) 51, (byte) 32, (byte) 25,
				(byte) 36, (byte) 52, (byte) 36, (byte) 25, (byte) 24,
				(byte) 53, (byte) 28, (byte) 54, (byte) 28, (byte) 53,
				(byte) 26, (byte) 28, (byte) 55, (byte) 54, (byte) 55,
				(byte) 28, (byte) 30, (byte) 12, (byte) 55, (byte) 30,
				(byte) 55, (byte) 12, (byte) 11, (byte) 7, (byte) 53, (byte) 6,
				(byte) 53, (byte) 7, (byte) 26, (byte) 37, (byte) 57,
				(byte) 56, (byte) 57, (byte) 37, (byte) 40, (byte) 52,
				(byte) 34, (byte) 50, (byte) 34, (byte) 52, (byte) 36,
				(byte) 29, (byte) 58, (byte) 47, (byte) 58, (byte) 29,
				(byte) 27, (byte) 43, (byte) 3, (byte) 0, (byte) 3, (byte) 43,
				(byte) 94, (byte) 95, (byte) 96, (byte) 97, (byte) 96,
				(byte) 95, (byte) 98, (byte) 99, (byte) 100, (byte) 101,
				(byte) 100, (byte) 99, (byte) 102, (byte) 96, (byte) 103,
				(byte) 104, (byte) 103, (byte) 96, (byte) 98, (byte) 104,
				(byte) 102, (byte) 99, (byte) 102, (byte) 104, (byte) 103,
				(byte) 27, (byte) 5, (byte) 58, (byte) 5, (byte) 27, (byte) 4,
				(byte) 33, (byte) 13, (byte) 10, (byte) 13, (byte) 33,
				(byte) 105, (byte) 35, (byte) 105, (byte) 33, (byte) 105,
				(byte) 35, (byte) 106, (byte) 8, (byte) 106, (byte) 35,
				(byte) 106, (byte) 8, (byte) 9, (byte) 108, (byte) 60,
				(byte) 62, (byte) 60, (byte) 108, (byte) 109, (byte) 64,
				(byte) 110, (byte) 68, (byte) 110, (byte) 64, (byte) 107,
				(byte) 68, (byte) 111, (byte) 69, (byte) 111, (byte) 68,
				(byte) 110, (byte) 69, (byte) 108, (byte) 62, (byte) 108,
				(byte) 69, (byte) 111, (byte) 40, (byte) 14, (byte) 57,
				(byte) 14, (byte) 40, (byte) 17, (byte) 16, (byte) 23,
				(byte) 22, (byte) 23, (byte) 16, (byte) 15, (byte) 112,
				(byte) 113, (byte) 114, (byte) 113, (byte) 112, (byte) 115,
				(byte) 114, (byte) 116, (byte) 117, (byte) 116, (byte) 114,
				(byte) 113, (byte) 48, (byte) 115, (byte) 112, (byte) 115,
				(byte) 48, (byte) 49, (byte) 116, (byte) 44, (byte) 117,
				(byte) 44, (byte) 116, (byte) 45, (byte) 119, (byte) 38,
				(byte) 118, (byte) 38, (byte) 119, (byte) 39, (byte) 39,
				(byte) 120, (byte) 41, (byte) 120, (byte) 39, (byte) 119,
				(byte) 41, (byte) 121, (byte) 42, (byte) 121, (byte) 41,
				(byte) 120, (byte) 42, (byte) 94, (byte) 43, (byte) 94,
				(byte) 42, (byte) 121, (byte) 77, (byte) 122, (byte) 65,
				(byte) 122, (byte) 77, (byte) 123, (byte) 75, (byte) 123,
				(byte) 77, (byte) 123, (byte) 75, (byte) 124, (byte) 74,
				(byte) 124, (byte) 75, (byte) 124, (byte) 74, (byte) 125,
				(byte) 126, (byte) 74, (byte) 73, (byte) 74, (byte) 126,
				(byte) 125, (byte) 128, (byte) 131, (byte) 129, (byte) 131,
				(byte) 128, (byte) 130, (byte) 132, (byte) 61, (byte) 71,
				(byte) 61, (byte) 132, (byte) 127, (byte) 63, (byte) 84,
				(byte) 59, (byte) 84, (byte) 63, (byte) 83, (byte) 67,
				(byte) 83, (byte) 63, (byte) 83, (byte) 67, (byte) 82,
				(byte) 66, (byte) 82, (byte) 67, (byte) 82, (byte) 66,
				(byte) 81, (byte) 76, (byte) 81, (byte) 66, (byte) 81,
				(byte) 76, (byte) 80, (byte) 72, (byte) 80, (byte) 76,
				(byte) 80, (byte) 72, (byte) 79, (byte) 72, (byte) 78,
				(byte) 79, (byte) 78, (byte) 72, (byte) 70, (byte) 133,
				(byte) 87, (byte) 86, (byte) 87, (byte) 133, (byte) 134,
				(byte) 134, (byte) 88, (byte) 87, (byte) 88, (byte) 134,
				(byte) 135, (byte) 135, (byte) 89, (byte) 88, (byte) 89,
				(byte) 135, (byte) 136, (byte) 137, (byte) 89, (byte) 136,
				(byte) 89, (byte) 137, (byte) 90, (byte) 138, (byte) 90,
				(byte) 137, (byte) 90, (byte) 138, (byte) 91, (byte) 139,
				(byte) 91, (byte) 138, (byte) 91, (byte) 139, (byte) 92,
				(byte) 140, (byte) 92, (byte) 139, (byte) 92, (byte) 140,
				(byte) 93, (byte) 141, (byte) 93, (byte) 140, (byte) 93,
				(byte) 141, (byte) 85, (byte) 6, (byte) 134, (byte) 133,
				(byte) 134, (byte) 6, (byte) 53, (byte) 53, (byte) 135,
				(byte) 134, (byte) 135, (byte) 53, (byte) 54, (byte) 54,
				(byte) 136, (byte) 135, (byte) 136, (byte) 54, (byte) 55,
				(byte) 13, (byte) 137, (byte) 11, (byte) 137, (byte) 13,
				(byte) 138, (byte) 11, (byte) 136, (byte) 55, (byte) 136,
				(byte) 11, (byte) 137, (byte) 9, (byte) 140, (byte) 106,
				(byte) 140, (byte) 9, (byte) 141, (byte) 106, (byte) 139,
				(byte) 105, (byte) 139, (byte) 106, (byte) 140, (byte) 105,
				(byte) 138, (byte) 13, (byte) 138, (byte) 105, (byte) 139,
				(byte) 142, (byte) 128, (byte) 130, (byte) 128, (byte) 142,
				(byte) 143, (byte) 148, (byte) 115, (byte) 147, (byte) 115,
				(byte) 148, (byte) 49, (byte) 147, (byte) 113, (byte) 146,
				(byte) 113, (byte) 147, (byte) 115, (byte) 146, (byte) 116,
				(byte) 145, (byte) 116, (byte) 146, (byte) 113, (byte) 144,
				(byte) 116, (byte) 45, (byte) 116, (byte) 144, (byte) 145,
				(byte) 152, (byte) 95, (byte) 98, (byte) 95, (byte) 152,
				(byte) 153, (byte) 152, (byte) 103, (byte) 151, (byte) 103,
				(byte) 152, (byte) 98, (byte) 151, (byte) 102, (byte) 150,
				(byte) 102, (byte) 151, (byte) 103, (byte) 150, (byte) 100,
				(byte) 149, (byte) 100, (byte) 150, (byte) 102, (byte) 3,
				(byte) 59, (byte) 1, (byte) 59, (byte) 3, (byte) 63, (byte) 94,
				(byte) 63, (byte) 3, (byte) 63, (byte) 94, (byte) 67,
				(byte) 121, (byte) 67, (byte) 94, (byte) 67, (byte) 121,
				(byte) 66, (byte) 120, (byte) 66, (byte) 121, (byte) 66,
				(byte) 120, (byte) 76, (byte) 119, (byte) 76, (byte) 120,
				(byte) 76, (byte) 119, (byte) 72, (byte) 119, (byte) 70,
				(byte) 72, (byte) 70, (byte) 119, (byte) 118, (byte) 157,
				(byte) 110, (byte) 159, (byte) 110, (byte) 157, (byte) 107,
				(byte) 159, (byte) 111, (byte) 160, (byte) 111, (byte) 159,
				(byte) 110, (byte) 160, (byte) 108, (byte) 156, (byte) 108,
				(byte) 160, (byte) 111, (byte) 154, (byte) 108, (byte) 109,
				(byte) 108, (byte) 154, (byte) 156, (byte) 163, (byte) 126,
				(byte) 125, (byte) 126, (byte) 163, (byte) 162, (byte) 163,
				(byte) 124, (byte) 164, (byte) 124, (byte) 163, (byte) 125,
				(byte) 164, (byte) 123, (byte) 165, (byte) 123, (byte) 164,
				(byte) 124, (byte) 165, (byte) 122, (byte) 158, (byte) 122,
				(byte) 165, (byte) 123, (byte) 127, (byte) 161, (byte) 132,
				(byte) 161, (byte) 127, (byte) 155 };
		size[0] = valueFace.length;

		mIndexBuffer[0] = ByteBuffer.allocateDirect(valueFace.length);
		mIndexBuffer[0].put(valueFace);
		mIndexBuffer[0].position(0);
	}

	public void setFace1() {
		byte valueFace[] = { (byte) 0, (byte) 1, (byte) 2, (byte) 1, (byte) 0,
				(byte) 3, (byte) 4, (byte) 5, (byte) 6, (byte) 5, (byte) 4,
				(byte) 7, (byte) 8, (byte) 9, (byte) 10, (byte) 9, (byte) 8,
				(byte) 11, (byte) 12, (byte) 13, (byte) 14, (byte) 13,
				(byte) 12, (byte) 15, (byte) 15, (byte) 12, (byte) 16,
				(byte) 15, (byte) 16, (byte) 17, (byte) 18, (byte) 19,
				(byte) 20, (byte) 19, (byte) 18, (byte) 21, (byte) 22,
				(byte) 23, (byte) 24, (byte) 23, (byte) 22, (byte) 25,
				(byte) 25, (byte) 22, (byte) 26, (byte) 26, (byte) 22,
				(byte) 27, (byte) 28, (byte) 29, (byte) 30, (byte) 29,
				(byte) 28, (byte) 31, (byte) 32, (byte) 33, (byte) 34,
				(byte) 33, (byte) 32, (byte) 35, (byte) 36, (byte) 37,
				(byte) 38, (byte) 37, (byte) 36, (byte) 39, (byte) 40,
				(byte) 41, (byte) 42, (byte) 41, (byte) 40, (byte) 43,
				(byte) 44, (byte) 45, (byte) 46, (byte) 45, (byte) 44,
				(byte) 47, (byte) 48, (byte) 49, (byte) 50, (byte) 49,
				(byte) 48, (byte) 51, (byte) 51, (byte) 48, (byte) 52,
				(byte) 51, (byte) 52, (byte) 53, (byte) 54, (byte) 55,
				(byte) 56, (byte) 55, (byte) 54, (byte) 57, (byte) 58,
				(byte) 59, (byte) 60, (byte) 59, (byte) 58, (byte) 61,
				(byte) 61, (byte) 58, (byte) 62, (byte) 62, (byte) 58,
				(byte) 63, (byte) 64, (byte) 65, (byte) 66, (byte) 65,
				(byte) 64, (byte) 67, (byte) 68, (byte) 69, (byte) 70,
				(byte) 69, (byte) 68, (byte) 71, (byte) 71, (byte) 68,
				(byte) 72, (byte) 73, (byte) 74, (byte) 75, (byte) 74,
				(byte) 73, (byte) 76, (byte) 76, (byte) 73, (byte) 77,
				(byte) 78, (byte) 79, (byte) 80, (byte) 79, (byte) 78,
				(byte) 81, (byte) 82, (byte) 83, (byte) 84, (byte) 83,
				(byte) 82, (byte) 85, (byte) 86, (byte) 87, (byte) 88,
				(byte) 87, (byte) 86, (byte) 89 };
		size[1] = valueFace.length;

		mIndexBuffer[1] = ByteBuffer.allocateDirect(valueFace.length);
		mIndexBuffer[1].put(valueFace);
		mIndexBuffer[1].position(0);
	}

	public void setFace2() {
		byte valueFace[] = { (byte) 0, (byte) 1, (byte) 2, (byte) 1, (byte) 0,
				(byte) 3, (byte) 30, (byte) 5, (byte) 31, (byte) 30, (byte) 31,
				(byte) 32, (byte) 3, (byte) 10, (byte) 33, (byte) 3, (byte) 33,
				(byte) 1, (byte) 34, (byte) 15, (byte) 35, (byte) 34,
				(byte) 35, (byte) 36, (byte) 37, (byte) 20, (byte) 26,
				(byte) 37, (byte) 26, (byte) 25, (byte) 8, (byte) 38, (byte) 7,
				(byte) 38, (byte) 8, (byte) 39, (byte) 38, (byte) 29, (byte) 7,
				(byte) 29, (byte) 38, (byte) 40, (byte) 41, (byte) 11,
				(byte) 31, (byte) 11, (byte) 41, (byte) 42, (byte) 41,
				(byte) 5, (byte) 43, (byte) 5, (byte) 41, (byte) 31, (byte) 44,
				(byte) 32, (byte) 46, (byte) 32, (byte) 44, (byte) 30,
				(byte) 11, (byte) 47, (byte) 9, (byte) 47, (byte) 11,
				(byte) 42, (byte) 48, (byte) 49, (byte) 50, (byte) 49,
				(byte) 48, (byte) 45, (byte) 16, (byte) 52, (byte) 14,
				(byte) 52, (byte) 16, (byte) 53, (byte) 44, (byte) 54,
				(byte) 46, (byte) 54, (byte) 44, (byte) 51, (byte) 55,
				(byte) 24, (byte) 26, (byte) 24, (byte) 55, (byte) 56,
				(byte) 55, (byte) 20, (byte) 57, (byte) 20, (byte) 55,
				(byte) 26, (byte) 18, (byte) 58, (byte) 17, (byte) 58,
				(byte) 18, (byte) 59, (byte) 58, (byte) 1, (byte) 17, (byte) 1,
				(byte) 58, (byte) 2, (byte) 13, (byte) 49, (byte) 12,
				(byte) 49, (byte) 13, (byte) 45, (byte) 6, (byte) 60, (byte) 4,
				(byte) 60, (byte) 6, (byte) 61, (byte) 21, (byte) 62,
				(byte) 19, (byte) 62, (byte) 21, (byte) 63, (byte) 64,
				(byte) 25, (byte) 27, (byte) 25, (byte) 64, (byte) 65,
				(byte) 66, (byte) 25, (byte) 65, (byte) 25, (byte) 66,
				(byte) 37, (byte) 67, (byte) 36, (byte) 68, (byte) 36,
				(byte) 67, (byte) 34, (byte) 69, (byte) 36, (byte) 22,
				(byte) 36, (byte) 69, (byte) 68, (byte) 23, (byte) 69,
				(byte) 22, (byte) 69, (byte) 23, (byte) 70, (byte) 71,
				(byte) 21, (byte) 35, (byte) 21, (byte) 71, (byte) 63,
				(byte) 71, (byte) 15, (byte) 72, (byte) 15, (byte) 71,
				(byte) 35, (byte) 73, (byte) 16, (byte) 33, (byte) 16,
				(byte) 73, (byte) 53, (byte) 73, (byte) 10, (byte) 74,
				(byte) 10, (byte) 73, (byte) 33, (byte) 49, (byte) 32,
				(byte) 12, (byte) 32, (byte) 49, (byte) 46, (byte) 75,
				(byte) 6, (byte) 28, (byte) 6, (byte) 75, (byte) 61, (byte) 51,
				(byte) 77, (byte) 100, (byte) 51, (byte) 100, (byte) 54,
				(byte) 101, (byte) 82, (byte) 102, (byte) 101, (byte) 102,
				(byte) 103, (byte) 104, (byte) 85, (byte) 105, (byte) 104,
				(byte) 105, (byte) 106, (byte) 107, (byte) 90, (byte) 96,
				(byte) 107, (byte) 96, (byte) 95, (byte) 41, (byte) 77,
				(byte) 43, (byte) 77, (byte) 41, (byte) 100, (byte) 83,
				(byte) 41, (byte) 42, (byte) 41, (byte) 83, (byte) 100,
				(byte) 83, (byte) 47, (byte) 81, (byte) 47, (byte) 83,
				(byte) 42, (byte) 55, (byte) 90, (byte) 57, (byte) 90,
				(byte) 55, (byte) 96, (byte) 94, (byte) 55, (byte) 56,
				(byte) 55, (byte) 94, (byte) 96, (byte) 95, (byte) 64,
				(byte) 65, (byte) 64, (byte) 95, (byte) 97, (byte) 66,
				(byte) 95, (byte) 65, (byte) 95, (byte) 66, (byte) 107,
				(byte) 106, (byte) 69, (byte) 68, (byte) 69, (byte) 106,
				(byte) 92, (byte) 67, (byte) 106, (byte) 68, (byte) 106,
				(byte) 67, (byte) 104, (byte) 93, (byte) 69, (byte) 92,
				(byte) 69, (byte) 93, (byte) 70, (byte) 71, (byte) 85,
				(byte) 72, (byte) 85, (byte) 71, (byte) 105, (byte) 91,
				(byte) 71, (byte) 63, (byte) 71, (byte) 91, (byte) 105,
				(byte) 91, (byte) 62, (byte) 89, (byte) 62, (byte) 91,
				(byte) 63, (byte) 73, (byte) 82, (byte) 74, (byte) 82,
				(byte) 73, (byte) 102, (byte) 86, (byte) 73, (byte) 53,
				(byte) 73, (byte) 86, (byte) 102, (byte) 86, (byte) 52,
				(byte) 84, (byte) 52, (byte) 86, (byte) 53, (byte) 103,
				(byte) 58, (byte) 2, (byte) 58, (byte) 103, (byte) 87,
				(byte) 0, (byte) 103, (byte) 2, (byte) 103, (byte) 0,
				(byte) 101, (byte) 88, (byte) 58, (byte) 87, (byte) 58,
				(byte) 88, (byte) 59, (byte) 80, (byte) 38, (byte) 79,
				(byte) 38, (byte) 80, (byte) 39, (byte) 99, (byte) 38,
				(byte) 40, (byte) 38, (byte) 99, (byte) 79, (byte) 78,
				(byte) 75, (byte) 61, (byte) 75, (byte) 78, (byte) 98,
				(byte) 78, (byte) 60, (byte) 76, (byte) 60, (byte) 78,
				(byte) 61, (byte) 54, (byte) 49, (byte) 46, (byte) 49,
				(byte) 54, (byte) 50 };
		size[2] = valueFace.length;

		mIndexBuffer[2] = ByteBuffer.allocateDirect(valueFace.length);
		mIndexBuffer[2].put(valueFace);
		mIndexBuffer[2].position(0);
	}

	public void setFace3() {
		byte valueFace[] = { (byte) 4, (byte) 5, (byte) 6, (byte) 5, (byte) 4,
				(byte) 7, (byte) 8, (byte) 9, (byte) 10, (byte) 9, (byte) 8,
				(byte) 11, (byte) 4, (byte) 12, (byte) 7, (byte) 12, (byte) 4,
				(byte) 13, (byte) 15, (byte) 16, (byte) 17, (byte) 16,
				(byte) 15, (byte) 18, (byte) 1, (byte) 15, (byte) 17,
				(byte) 15, (byte) 1, (byte) 3, (byte) 21, (byte) 25, (byte) 26,
				(byte) 25, (byte) 21, (byte) 22, (byte) 23, (byte) 25,
				(byte) 24, (byte) 25, (byte) 23, (byte) 26, (byte) 27,
				(byte) 15, (byte) 28, (byte) 15, (byte) 27, (byte) 3, (byte) 8,
				(byte) 29, (byte) 30, (byte) 29, (byte) 8, (byte) 10, (byte) 9,
				(byte) 31, (byte) 32, (byte) 31, (byte) 9, (byte) 11, (byte) 0,
				(byte) 16, (byte) 18, (byte) 16, (byte) 0, (byte) 2, (byte) 35,
				(byte) 36, (byte) 37, (byte) 36, (byte) 35, (byte) 38,
				(byte) 39, (byte) 40, (byte) 41, (byte) 40, (byte) 39,
				(byte) 42, (byte) 43, (byte) 39, (byte) 44, (byte) 39,
				(byte) 43, (byte) 42, (byte) 43, (byte) 45, (byte) 46,
				(byte) 45, (byte) 43, (byte) 44, (byte) 47, (byte) 48,
				(byte) 49, (byte) 48, (byte) 47, (byte) 50, (byte) 51,
				(byte) 47, (byte) 52, (byte) 47, (byte) 51, (byte) 50,
				(byte) 51, (byte) 53, (byte) 54, (byte) 53, (byte) 51,
				(byte) 52, (byte) 55, (byte) 56, (byte) 57, (byte) 56,
				(byte) 55, (byte) 58, (byte) 59, (byte) 56, (byte) 60,
				(byte) 56, (byte) 59, (byte) 57, (byte) 61, (byte) 59,
				(byte) 60, (byte) 59, (byte) 61, (byte) 62, (byte) 63,
				(byte) 36, (byte) 64, (byte) 36, (byte) 63, (byte) 37,
				(byte) 65, (byte) 63, (byte) 64, (byte) 63, (byte) 65,
				(byte) 66, (byte) 67, (byte) 68, (byte) 69, (byte) 68,
				(byte) 67, (byte) 70, (byte) 19, (byte) 67, (byte) 20,
				(byte) 67, (byte) 19, (byte) 70, (byte) 71, (byte) 33,
				(byte) 72, (byte) 33, (byte) 71, (byte) 34, (byte) 73,
				(byte) 71, (byte) 72, (byte) 71, (byte) 73, (byte) 74,
				(byte) 2, (byte) 29, (byte) 10, (byte) 2, (byte) 10, (byte) 16,
				(byte) 38, (byte) 53, (byte) 52, (byte) 38, (byte) 52,
				(byte) 36, (byte) 58, (byte) 45, (byte) 44, (byte) 58,
				(byte) 44, (byte) 56, (byte) 22, (byte) 75, (byte) 5,
				(byte) 22, (byte) 5, (byte) 7, (byte) 22, (byte) 7, (byte) 25,
				(byte) 100, (byte) 77, (byte) 101, (byte) 100, (byte) 101,
				(byte) 102, (byte) 103, (byte) 82, (byte) 104, (byte) 103,
				(byte) 104, (byte) 105, (byte) 106, (byte) 85, (byte) 107,
				(byte) 106, (byte) 107, (byte) 108, (byte) 109, (byte) 14,
				(byte) 93, (byte) 109, (byte) 93, (byte) 96, (byte) 109,
				(byte) 96, (byte) 95, (byte) 80, (byte) 71, (byte) 79,
				(byte) 71, (byte) 80, (byte) 74, (byte) 99, (byte) 71,
				(byte) 34, (byte) 71, (byte) 99, (byte) 79, (byte) 78,
				(byte) 19, (byte) 70, (byte) 19, (byte) 78, (byte) 98,
				(byte) 78, (byte) 68, (byte) 76, (byte) 68, (byte) 78,
				(byte) 70, (byte) 92, (byte) 59, (byte) 91, (byte) 59,
				(byte) 92, (byte) 62, (byte) 108, (byte) 59, (byte) 57,
				(byte) 59, (byte) 108, (byte) 91, (byte) 55, (byte) 108,
				(byte) 57, (byte) 108, (byte) 55, (byte) 106, (byte) 90,
				(byte) 43, (byte) 42, (byte) 43, (byte) 90, (byte) 107,
				(byte) 90, (byte) 40, (byte) 89, (byte) 40, (byte) 90,
				(byte) 42, (byte) 43, (byte) 85, (byte) 46, (byte) 85,
				(byte) 43, (byte) 107, (byte) 4, (byte) 93, (byte) 6,
				(byte) 93, (byte) 4, (byte) 96, (byte) 94, (byte) 4, (byte) 13,
				(byte) 4, (byte) 94, (byte) 96, (byte) 95, (byte) 23,
				(byte) 26, (byte) 23, (byte) 95, (byte) 97, (byte) 21,
				(byte) 95, (byte) 26, (byte) 95, (byte) 21, (byte) 109,
				(byte) 51, (byte) 82, (byte) 54, (byte) 82, (byte) 51,
				(byte) 104, (byte) 86, (byte) 51, (byte) 50, (byte) 51,
				(byte) 86, (byte) 104, (byte) 86, (byte) 48, (byte) 84,
				(byte) 48, (byte) 86, (byte) 50, (byte) 105, (byte) 63,
				(byte) 37, (byte) 63, (byte) 105, (byte) 87, (byte) 35,
				(byte) 105, (byte) 37, (byte) 105, (byte) 35, (byte) 103,
				(byte) 88, (byte) 63, (byte) 87, (byte) 63, (byte) 88,
				(byte) 66, (byte) 8, (byte) 77, (byte) 30, (byte) 77, (byte) 8,
				(byte) 101, (byte) 83, (byte) 8, (byte) 11, (byte) 8,
				(byte) 83, (byte) 101, (byte) 83, (byte) 31, (byte) 81,
				(byte) 31, (byte) 83, (byte) 11, (byte) 102, (byte) 15,
				(byte) 18, (byte) 15, (byte) 102, (byte) 28, (byte) 0,
				(byte) 102, (byte) 18, (byte) 102, (byte) 0, (byte) 100 };
		size[3] = valueFace.length;

		mIndexBuffer[3] = ByteBuffer.allocateDirect(valueFace.length);
		mIndexBuffer[3].put(valueFace);
		mIndexBuffer[3].position(0);
	}

	public void setFace4() {
		byte valueFace[] = { (byte) 1, (byte) 13, (byte) 2, (byte) 13,
				(byte) 1, (byte) 0, (byte) 13, (byte) 0, (byte) 14, (byte) 14,
				(byte) 0, (byte) 15, (byte) 14, (byte) 15, (byte) 16,
				(byte) 16, (byte) 15, (byte) 17, (byte) 17, (byte) 15,
				(byte) 18, (byte) 15, (byte) 0, (byte) 19, (byte) 19, (byte) 0,
				(byte) 20, (byte) 19, (byte) 20, (byte) 21, (byte) 21,
				(byte) 20, (byte) 10, (byte) 10, (byte) 20, (byte) 9,
				(byte) 20, (byte) 0, (byte) 22, (byte) 22, (byte) 0, (byte) 23,
				(byte) 22, (byte) 23, (byte) 24, (byte) 24, (byte) 23,
				(byte) 25, (byte) 25, (byte) 23, (byte) 26, (byte) 23,
				(byte) 0, (byte) 27, (byte) 27, (byte) 0, (byte) 28, (byte) 28,
				(byte) 0, (byte) 6, (byte) 28, (byte) 6, (byte) 7, (byte) 28,
				(byte) 7, (byte) 29, (byte) 29, (byte) 7, (byte) 30, (byte) 30,
				(byte) 7, (byte) 31, (byte) 8, (byte) 32, (byte) 7, (byte) 32,
				(byte) 8, (byte) 33, (byte) 33, (byte) 8, (byte) 34, (byte) 34,
				(byte) 8, (byte) 4, (byte) 34, (byte) 4, (byte) 35, (byte) 35,
				(byte) 4, (byte) 5, (byte) 35, (byte) 5, (byte) 36, (byte) 36,
				(byte) 37, (byte) 38, (byte) 37, (byte) 36, (byte) 39,
				(byte) 39, (byte) 36, (byte) 5, (byte) 39, (byte) 5, (byte) 11,
				(byte) 39, (byte) 11, (byte) 40, (byte) 40, (byte) 11,
				(byte) 41, (byte) 41, (byte) 11, (byte) 12, (byte) 41,
				(byte) 12, (byte) 42, (byte) 2, (byte) 43, (byte) 3, (byte) 43,
				(byte) 2, (byte) 13, (byte) 3, (byte) 43, (byte) 18, (byte) 3,
				(byte) 18, (byte) 46, (byte) 46, (byte) 18, (byte) 15,
				(byte) 3, (byte) 46, (byte) 9, (byte) 3, (byte) 9, (byte) 49,
				(byte) 49, (byte) 9, (byte) 20, (byte) 3, (byte) 49, (byte) 26,
				(byte) 3, (byte) 26, (byte) 52, (byte) 52, (byte) 26,
				(byte) 23, (byte) 3, (byte) 52, (byte) 31, (byte) 3, (byte) 31,
				(byte) 55, (byte) 55, (byte) 31, (byte) 7, (byte) 3, (byte) 55,
				(byte) 42, (byte) 3, (byte) 42, (byte) 12, (byte) 29,
				(byte) 54, (byte) 53, (byte) 54, (byte) 29, (byte) 30,
				(byte) 24, (byte) 51, (byte) 50, (byte) 51, (byte) 24,
				(byte) 25, (byte) 21, (byte) 48, (byte) 47, (byte) 48,
				(byte) 21, (byte) 10, (byte) 16, (byte) 45, (byte) 44,
				(byte) 45, (byte) 16, (byte) 17 };
		size[4] = valueFace.length;

		mIndexBuffer[4] = ByteBuffer.allocateDirect(valueFace.length);
		mIndexBuffer[4].put(valueFace);
		mIndexBuffer[4].position(0);
	}

	public void setFace5() {
		byte valueFace[] = { (byte) 45, (byte) 9, (byte) 46, (byte) 9,
				(byte) 45, (byte) 47, (byte) 9, (byte) 47, (byte) 42,
				(byte) 42, (byte) 47, (byte) 17, (byte) 42, (byte) 17,
				(byte) 41, (byte) 41, (byte) 17, (byte) 43, (byte) 43,
				(byte) 17, (byte) 44, (byte) 17, (byte) 47, (byte) 18,
				(byte) 18, (byte) 47, (byte) 34, (byte) 18, (byte) 34,
				(byte) 4, (byte) 4, (byte) 34, (byte) 8, (byte) 8, (byte) 34,
				(byte) 0, (byte) 34, (byte) 47, (byte) 32, (byte) 32,
				(byte) 47, (byte) 29, (byte) 32, (byte) 29, (byte) 31,
				(byte) 31, (byte) 29, (byte) 39, (byte) 39, (byte) 29,
				(byte) 40, (byte) 29, (byte) 47, (byte) 30, (byte) 30,
				(byte) 47, (byte) 27, (byte) 27, (byte) 47, (byte) 48,
				(byte) 27, (byte) 48, (byte) 49, (byte) 27, (byte) 49,
				(byte) 26, (byte) 26, (byte) 49, (byte) 37, (byte) 37,
				(byte) 49, (byte) 38, (byte) 50, (byte) 2, (byte) 49, (byte) 2,
				(byte) 50, (byte) 23, (byte) 23, (byte) 50, (byte) 22,
				(byte) 22, (byte) 50, (byte) 51, (byte) 22, (byte) 51,
				(byte) 21, (byte) 21, (byte) 51, (byte) 52, (byte) 21,
				(byte) 52, (byte) 6, (byte) 6, (byte) 16, (byte) 3, (byte) 16,
				(byte) 6, (byte) 14, (byte) 14, (byte) 6, (byte) 52, (byte) 14,
				(byte) 52, (byte) 53, (byte) 14, (byte) 53, (byte) 13,
				(byte) 13, (byte) 53, (byte) 15, (byte) 15, (byte) 53,
				(byte) 54, (byte) 15, (byte) 54, (byte) 11, (byte) 46,
				(byte) 20, (byte) 55, (byte) 20, (byte) 46, (byte) 9,
				(byte) 55, (byte) 20, (byte) 44, (byte) 55, (byte) 44,
				(byte) 1, (byte) 1, (byte) 44, (byte) 17, (byte) 55, (byte) 1,
				(byte) 0, (byte) 55, (byte) 0, (byte) 25, (byte) 25, (byte) 0,
				(byte) 34, (byte) 55, (byte) 25, (byte) 40, (byte) 55,
				(byte) 40, (byte) 36, (byte) 36, (byte) 40, (byte) 29,
				(byte) 55, (byte) 36, (byte) 38, (byte) 55, (byte) 38,
				(byte) 12, (byte) 12, (byte) 38, (byte) 49, (byte) 55,
				(byte) 12, (byte) 11, (byte) 55, (byte) 11, (byte) 54,
				(byte) 26, (byte) 35, (byte) 28, (byte) 35, (byte) 26,
				(byte) 37, (byte) 31, (byte) 24, (byte) 33, (byte) 24,
				(byte) 31, (byte) 39, (byte) 4, (byte) 7, (byte) 5, (byte) 7,
				(byte) 4, (byte) 8, (byte) 41, (byte) 19, (byte) 10, (byte) 19,
				(byte) 41, (byte) 43 };
		size[5] = valueFace.length;

		mIndexBuffer[5] = ByteBuffer.allocateDirect(valueFace.length);
		mIndexBuffer[5].put(valueFace);
		mIndexBuffer[5].position(0);
	}

	public void setFace6() {
		byte valueFace[] = { (byte) 2, (byte) 3, (byte) 4, (byte) 3, (byte) 2,
				(byte) 5, (byte) 3, (byte) 5, (byte) 6, (byte) 6, (byte) 5,
				(byte) 7, (byte) 6, (byte) 7, (byte) 8, (byte) 8, (byte) 7,
				(byte) 9, (byte) 9, (byte) 7, (byte) 10, (byte) 7, (byte) 5,
				(byte) 11, (byte) 11, (byte) 5, (byte) 12, (byte) 11,
				(byte) 12, (byte) 13, (byte) 13, (byte) 12, (byte) 14,
				(byte) 14, (byte) 12, (byte) 15, (byte) 12, (byte) 5,
				(byte) 16, (byte) 16, (byte) 5, (byte) 17, (byte) 16,
				(byte) 17, (byte) 18, (byte) 18, (byte) 17, (byte) 19,
				(byte) 19, (byte) 17, (byte) 20, (byte) 17, (byte) 5,
				(byte) 21, (byte) 21, (byte) 5, (byte) 22, (byte) 21,
				(byte) 22, (byte) 23, (byte) 23, (byte) 22, (byte) 24,
				(byte) 24, (byte) 22, (byte) 25, (byte) 22, (byte) 5,
				(byte) 26, (byte) 26, (byte) 5, (byte) 27, (byte) 28,
				(byte) 29, (byte) 30, (byte) 29, (byte) 28, (byte) 31,
				(byte) 31, (byte) 28, (byte) 32, (byte) 32, (byte) 28,
				(byte) 33, (byte) 33, (byte) 28, (byte) 34, (byte) 33,
				(byte) 34, (byte) 35, (byte) 33, (byte) 35, (byte) 27,
				(byte) 27, (byte) 35, (byte) 26, (byte) 4, (byte) 36,
				(byte) 37, (byte) 36, (byte) 4, (byte) 3, (byte) 37, (byte) 36,
				(byte) 10, (byte) 37, (byte) 10, (byte) 40, (byte) 40,
				(byte) 10, (byte) 7, (byte) 37, (byte) 40, (byte) 15,
				(byte) 37, (byte) 15, (byte) 1, (byte) 1, (byte) 15, (byte) 12,
				(byte) 37, (byte) 1, (byte) 20, (byte) 37, (byte) 20,
				(byte) 44, (byte) 44, (byte) 20, (byte) 17, (byte) 37,
				(byte) 44, (byte) 47, (byte) 37, (byte) 47, (byte) 25,
				(byte) 37, (byte) 25, (byte) 48, (byte) 48, (byte) 25,
				(byte) 49, (byte) 49, (byte) 25, (byte) 22, (byte) 48,
				(byte) 49, (byte) 50, (byte) 48, (byte) 50, (byte) 51,
				(byte) 48, (byte) 51, (byte) 52, (byte) 52, (byte) 51,
				(byte) 53, (byte) 52, (byte) 53, (byte) 32, (byte) 32,
				(byte) 53, (byte) 31, (byte) 23, (byte) 46, (byte) 45,
				(byte) 46, (byte) 23, (byte) 24, (byte) 18, (byte) 0,
				(byte) 43, (byte) 0, (byte) 18, (byte) 19, (byte) 13,
				(byte) 42, (byte) 41, (byte) 42, (byte) 13, (byte) 14,
				(byte) 8, (byte) 39, (byte) 38, (byte) 39, (byte) 8, (byte) 9 };
		size[6] = valueFace.length;

		mIndexBuffer[6] = ByteBuffer.allocateDirect(valueFace.length);
		mIndexBuffer[6].put(valueFace);
		mIndexBuffer[6].position(0);
	}

	public void setFace7() {
		byte valueFace[] = { (byte) 7, (byte) 13, (byte) 8, (byte) 13,
				(byte) 7, (byte) 0, (byte) 13, (byte) 0, (byte) 14, (byte) 14,
				(byte) 0, (byte) 15, (byte) 14, (byte) 15, (byte) 16,
				(byte) 16, (byte) 15, (byte) 17, (byte) 17, (byte) 15,
				(byte) 18, (byte) 15, (byte) 0, (byte) 19, (byte) 19, (byte) 0,
				(byte) 20, (byte) 19, (byte) 20, (byte) 21, (byte) 21,
				(byte) 20, (byte) 3, (byte) 3, (byte) 20, (byte) 2, (byte) 20,
				(byte) 0, (byte) 22, (byte) 22, (byte) 0, (byte) 23, (byte) 22,
				(byte) 23, (byte) 24, (byte) 24, (byte) 23, (byte) 25,
				(byte) 25, (byte) 23, (byte) 26, (byte) 23, (byte) 0,
				(byte) 27, (byte) 27, (byte) 0, (byte) 28, (byte) 27,
				(byte) 28, (byte) 29, (byte) 29, (byte) 28, (byte) 30,
				(byte) 30, (byte) 28, (byte) 31, (byte) 28, (byte) 0,
				(byte) 32, (byte) 32, (byte) 0, (byte) 1, (byte) 33, (byte) 34,
				(byte) 35, (byte) 34, (byte) 33, (byte) 36, (byte) 36,
				(byte) 33, (byte) 12, (byte) 12, (byte) 33, (byte) 5, (byte) 5,
				(byte) 33, (byte) 37, (byte) 5, (byte) 37, (byte) 38, (byte) 5,
				(byte) 38, (byte) 1, (byte) 1, (byte) 38, (byte) 32, (byte) 8,
				(byte) 39, (byte) 9, (byte) 39, (byte) 8, (byte) 13, (byte) 9,
				(byte) 39, (byte) 18, (byte) 9, (byte) 18, (byte) 4, (byte) 4,
				(byte) 18, (byte) 15, (byte) 9, (byte) 4, (byte) 2, (byte) 9,
				(byte) 2, (byte) 43, (byte) 43, (byte) 2, (byte) 20, (byte) 9,
				(byte) 43, (byte) 26, (byte) 9, (byte) 26, (byte) 46,
				(byte) 46, (byte) 26, (byte) 23, (byte) 9, (byte) 46,
				(byte) 49, (byte) 9, (byte) 49, (byte) 31, (byte) 9, (byte) 31,
				(byte) 10, (byte) 10, (byte) 31, (byte) 50, (byte) 50,
				(byte) 31, (byte) 28, (byte) 10, (byte) 50, (byte) 51,
				(byte) 10, (byte) 51, (byte) 52, (byte) 10, (byte) 52,
				(byte) 11, (byte) 11, (byte) 52, (byte) 53, (byte) 11,
				(byte) 53, (byte) 12, (byte) 12, (byte) 53, (byte) 36,
				(byte) 29, (byte) 48, (byte) 47, (byte) 48, (byte) 29,
				(byte) 30, (byte) 24, (byte) 45, (byte) 44, (byte) 45,
				(byte) 24, (byte) 25, (byte) 21, (byte) 6, (byte) 42, (byte) 6,
				(byte) 21, (byte) 3, (byte) 16, (byte) 41, (byte) 40,
				(byte) 41, (byte) 16, (byte) 17 };
		size[7] = valueFace.length;

		mIndexBuffer[7] = ByteBuffer.allocateDirect(valueFace.length);
		mIndexBuffer[7].put(valueFace);
		mIndexBuffer[7].position(0);
	}

	public void setFace8() {
		byte valueFace[] = { (byte) 3, (byte) 4, (byte) 16, (byte) 4, (byte) 3,
				(byte) 2, (byte) 4, (byte) 2, (byte) 5, (byte) 5, (byte) 2,
				(byte) 17, (byte) 17, (byte) 2, (byte) 18, (byte) 17,
				(byte) 18, (byte) 19, (byte) 19, (byte) 18, (byte) 20,
				(byte) 19, (byte) 20, (byte) 21, (byte) 21, (byte) 20,
				(byte) 9, (byte) 9, (byte) 20, (byte) 22, (byte) 9, (byte) 22,
				(byte) 8, (byte) 8, (byte) 22, (byte) 23, (byte) 8, (byte) 23,
				(byte) 24, (byte) 24, (byte) 23, (byte) 25, (byte) 24,
				(byte) 25, (byte) 26, (byte) 26, (byte) 25, (byte) 27,
				(byte) 26, (byte) 27, (byte) 6, (byte) 6, (byte) 27, (byte) 1,
				(byte) 16, (byte) 28, (byte) 29, (byte) 28, (byte) 16,
				(byte) 4, (byte) 29, (byte) 28, (byte) 31, (byte) 29,
				(byte) 31, (byte) 32, (byte) 29, (byte) 32, (byte) 33,
				(byte) 33, (byte) 32, (byte) 11, (byte) 11, (byte) 32,
				(byte) 34, (byte) 11, (byte) 34, (byte) 10, (byte) 10,
				(byte) 34, (byte) 35, (byte) 10, (byte) 35, (byte) 14,
				(byte) 14, (byte) 35, (byte) 36, (byte) 14, (byte) 36,
				(byte) 13, (byte) 13, (byte) 36, (byte) 0, (byte) 13, (byte) 0,
				(byte) 12, (byte) 12, (byte) 0, (byte) 1, (byte) 12, (byte) 1,
				(byte) 27, (byte) 12, (byte) 27, (byte) 15, (byte) 6,
				(byte) 30, (byte) 7, (byte) 30, (byte) 6, (byte) 1 };
		size[8] = valueFace.length;

		mIndexBuffer[8] = ByteBuffer.allocateDirect(valueFace.length);
		mIndexBuffer[8].put(valueFace);
		mIndexBuffer[8].position(0);
	}

	public void setFace9() {
		byte valueFace[] = { (byte) 14, (byte) 17, (byte) 0, (byte) 17,
				(byte) 14, (byte) 13, (byte) 17, (byte) 13, (byte) 18,
				(byte) 18, (byte) 13, (byte) 20, (byte) 20, (byte) 13,
				(byte) 15, (byte) 20, (byte) 15, (byte) 2, (byte) 20, (byte) 2,
				(byte) 21, (byte) 21, (byte) 2, (byte) 3, (byte) 21, (byte) 3,
				(byte) 22, (byte) 22, (byte) 3, (byte) 6, (byte) 22, (byte) 6,
				(byte) 23, (byte) 23, (byte) 6, (byte) 4, (byte) 23, (byte) 4,
				(byte) 24, (byte) 24, (byte) 4, (byte) 5, (byte) 24, (byte) 5,
				(byte) 25, (byte) 25, (byte) 5, (byte) 26, (byte) 0, (byte) 27,
				(byte) 1, (byte) 27, (byte) 0, (byte) 17, (byte) 1, (byte) 27,
				(byte) 29, (byte) 1, (byte) 29, (byte) 30, (byte) 1, (byte) 30,
				(byte) 31, (byte) 1, (byte) 31, (byte) 16, (byte) 16,
				(byte) 31, (byte) 32, (byte) 16, (byte) 32, (byte) 9, (byte) 9,
				(byte) 32, (byte) 33, (byte) 9, (byte) 33, (byte) 8, (byte) 8,
				(byte) 33, (byte) 34, (byte) 8, (byte) 34, (byte) 11,
				(byte) 11, (byte) 34, (byte) 35, (byte) 11, (byte) 35,
				(byte) 10, (byte) 10, (byte) 35, (byte) 36, (byte) 10,
				(byte) 36, (byte) 12, (byte) 12, (byte) 36, (byte) 26,
				(byte) 12, (byte) 26, (byte) 5, (byte) 12, (byte) 5, (byte) 7,
				(byte) 25, (byte) 28, (byte) 19, (byte) 28, (byte) 25,
				(byte) 26 };
		size[9] = valueFace.length;

		mIndexBuffer[9] = ByteBuffer.allocateDirect(valueFace.length);
		mIndexBuffer[9].put(valueFace);
		mIndexBuffer[9].position(0);
	}

	public void setFace10() {
		byte valueFace[] = { (byte) 2, (byte) 3, (byte) 4, (byte) 3, (byte) 2,
				(byte) 5, (byte) 6, (byte) 7, (byte) 8, (byte) 7, (byte) 6,
				(byte) 9, (byte) 10, (byte) 11, (byte) 12, (byte) 11,
				(byte) 10, (byte) 13, (byte) 11, (byte) 6, (byte) 8, (byte) 6,
				(byte) 11, (byte) 13, (byte) 14, (byte) 15, (byte) 16,
				(byte) 15, (byte) 14, (byte) 17, (byte) 19, (byte) 6,
				(byte) 13, (byte) 19, (byte) 13, (byte) 21, (byte) 18,
				(byte) 25, (byte) 26, (byte) 25, (byte) 18, (byte) 20,
				(byte) 41, (byte) 28, (byte) 43, (byte) 41, (byte) 43,
				(byte) 44, (byte) 51, (byte) 36, (byte) 45, (byte) 36,
				(byte) 51, (byte) 52, (byte) 53, (byte) 54, (byte) 55,
				(byte) 54, (byte) 53, (byte) 56, (byte) 42, (byte) 58,
				(byte) 59, (byte) 58, (byte) 42, (byte) 29, (byte) 58,
				(byte) 27, (byte) 60, (byte) 27, (byte) 58, (byte) 29,
				(byte) 64, (byte) 58, (byte) 60, (byte) 64, (byte) 60,
				(byte) 65, (byte) 61, (byte) 51, (byte) 52, (byte) 51,
				(byte) 61, (byte) 67, (byte) 18, (byte) 3, (byte) 5, (byte) 3,
				(byte) 18, (byte) 26, (byte) 74, (byte) 75, (byte) 76,
				(byte) 75, (byte) 74, (byte) 77, (byte) 79, (byte) 30,
				(byte) 27, (byte) 30, (byte) 79, (byte) 0, (byte) 81,
				(byte) 44, (byte) 49, (byte) 44, (byte) 81, (byte) 41,
				(byte) 82, (byte) 21, (byte) 79, (byte) 21, (byte) 82,
				(byte) 19, (byte) 22, (byte) 82, (byte) 83, (byte) 82,
				(byte) 22, (byte) 19, (byte) 72, (byte) 70, (byte) 73,
				(byte) 70, (byte) 72, (byte) 71, (byte) 90, (byte) 88,
				(byte) 91, (byte) 88, (byte) 90, (byte) 89, (byte) 96,
				(byte) 98, (byte) 97, (byte) 98, (byte) 96, (byte) 99,
				(byte) 86, (byte) 38, (byte) 40, (byte) 38, (byte) 86,
				(byte) 100, (byte) 57, (byte) 32, (byte) 34, (byte) 32,
				(byte) 57, (byte) 50, (byte) 87, (byte) 47, (byte) 46,
				(byte) 47, (byte) 87, (byte) 101, (byte) 92, (byte) 94,
				(byte) 93, (byte) 94, (byte) 92, (byte) 95, (byte) 84,
				(byte) 102, (byte) 85, (byte) 102, (byte) 84, (byte) 103,
				(byte) 68, (byte) 35, (byte) 37, (byte) 35, (byte) 68,
				(byte) 104, (byte) 23, (byte) 39, (byte) 24, (byte) 39,
				(byte) 23, (byte) 78, (byte) 27, (byte) 62, (byte) 60,
				(byte) 62, (byte) 27, (byte) 30, (byte) 105, (byte) 54,
				(byte) 106, (byte) 54, (byte) 105, (byte) 55, (byte) 74,
				(byte) 107, (byte) 77, (byte) 107, (byte) 74, (byte) 108,
				(byte) 109, (byte) 28, (byte) 110, (byte) 28, (byte) 109,
				(byte) 43, (byte) 80, (byte) 28, (byte) 31, (byte) 28,
				(byte) 80, (byte) 110, (byte) 81, (byte) 33, (byte) 41,
				(byte) 33, (byte) 81, (byte) 48, (byte) 111, (byte) 43,
				(byte) 112, (byte) 43, (byte) 111, (byte) 44, (byte) 77,
				(byte) 54, (byte) 56, (byte) 77, (byte) 56, (byte) 75,
				(byte) 116, (byte) 65, (byte) 63, (byte) 65, (byte) 116,
				(byte) 114, (byte) 65, (byte) 113, (byte) 64, (byte) 113,
				(byte) 65, (byte) 114, (byte) 113, (byte) 66, (byte) 64,
				(byte) 66, (byte) 113, (byte) 115, (byte) 117, (byte) 56,
				(byte) 118, (byte) 56, (byte) 117, (byte) 75, (byte) 8,
				(byte) 115, (byte) 113, (byte) 115, (byte) 8, (byte) 7,
				(byte) 114, (byte) 8, (byte) 113, (byte) 8, (byte) 114,
				(byte) 11, (byte) 12, (byte) 114, (byte) 116, (byte) 114,
				(byte) 12, (byte) 11, (byte) 130, (byte) 119, (byte) 131,
				(byte) 130, (byte) 131, (byte) 132, (byte) 119, (byte) 105,
				(byte) 55, (byte) 105, (byte) 119, (byte) 120, (byte) 53,
				(byte) 119, (byte) 55, (byte) 119, (byte) 53, (byte) 131,
				(byte) 76, (byte) 131, (byte) 53, (byte) 131, (byte) 76,
				(byte) 132, (byte) 74, (byte) 132, (byte) 76, (byte) 132,
				(byte) 74, (byte) 130, (byte) 122, (byte) 74, (byte) 108,
				(byte) 74, (byte) 122, (byte) 130, (byte) 129, (byte) 96,
				(byte) 99, (byte) 96, (byte) 129, (byte) 135, (byte) 126,
				(byte) 90, (byte) 89, (byte) 90, (byte) 126, (byte) 128,
				(byte) 124, (byte) 92, (byte) 95, (byte) 92, (byte) 124,
				(byte) 125, (byte) 127, (byte) 84, (byte) 103, (byte) 84,
				(byte) 127, (byte) 134, (byte) 121, (byte) 72, (byte) 71,
				(byte) 72, (byte) 121, (byte) 123, (byte) 69, (byte) 14,
				(byte) 17, (byte) 14, (byte) 69, (byte) 133, (byte) 83,
				(byte) 29, (byte) 42, (byte) 29, (byte) 83, (byte) 82,
				(byte) 29, (byte) 79, (byte) 27, (byte) 79, (byte) 29,
				(byte) 82, (byte) 21, (byte) 0, (byte) 79, (byte) 0, (byte) 21,
				(byte) 1, (byte) 146, (byte) 136, (byte) 147, (byte) 146,
				(byte) 147, (byte) 148, (byte) 138, (byte) 57, (byte) 50,
				(byte) 57, (byte) 138, (byte) 140, (byte) 151, (byte) 87,
				(byte) 101, (byte) 87, (byte) 151, (byte) 150, (byte) 143,
				(byte) 86, (byte) 100, (byte) 86, (byte) 143, (byte) 145,
				(byte) 141, (byte) 68, (byte) 104, (byte) 68, (byte) 141,
				(byte) 142, (byte) 144, (byte) 23, (byte) 78, (byte) 23,
				(byte) 144, (byte) 149, (byte) 136, (byte) 80, (byte) 110,
				(byte) 80, (byte) 136, (byte) 137, (byte) 109, (byte) 136,
				(byte) 110, (byte) 136, (byte) 109, (byte) 147, (byte) 49,
				(byte) 147, (byte) 109, (byte) 147, (byte) 49, (byte) 148,
				(byte) 81, (byte) 148, (byte) 49, (byte) 148, (byte) 81,
				(byte) 146, (byte) 139, (byte) 81, (byte) 48, (byte) 81,
				(byte) 139, (byte) 146 };
		size[10] = valueFace.length;

		mIndexBuffer[10] = ByteBuffer.allocateDirect(valueFace.length);
		mIndexBuffer[10].put(valueFace);
		mIndexBuffer[10].position(0);
	}

	public void setNormal0() {
		float valueNormal[] = { 0.362923f, 0f, -2.97191f, 0.23009f, 0f,
				-2.99116f, 0.076696f, 0f, -0.997054f, 0.858679f, 0f, -5.92457f,
				0.707106f, 0f, 0.707106f, 1.41421f, 0f, 1.41421f, -2.12132f,
				0f, -2.12133f, -1.41421f, 0f, -1.41422f, -0.166091f, 0f,
				-1.99309f, -0.249137f, 0f, -2.98964f, -1.40166f, 0f, -2.6467f,
				-3.41133f, 0f, -4.91321f, -1.77035f, 0f, -2.41169f, -2.69337f,
				0f, -5.34877f, -2.8505f, 0f, 2.79689f, -1.81945f, 0f, 2.36035f,
				-1.62087f, 0f, 2.50088f, -1.42525f, 0f, 1.39845f, -0.811289f,
				0f, 2.86912f, -0.463478f, 0f, 2.95862f, -0.33861f, 0f, 2.9755f,
				-1.03423f, 0f, 2.7965f, -1.31222f, 0f, 2.69639f, -1.36726f, 0f,
				2.6689f, -0.075975f, 0f, 2.9927f, 0.061791f, 0f, 2.99303f,
				-1.53916f, 0f, -1.26181f, 2.16679f, 0f, 2.07272f, -3.20054f,
				0f, -2.38977f, 2.8505f, 0f, 2.79689f, -1.40146f, 0f, -1.41414f,
				1.62087f, 0f, 2.50088f, 1.26194f, 0f, 2.71876f, -0.997366f, 0f,
				-2.81609f, 0.812976f, 0f, 2.87475f, -0.502105f, 0f, -2.95215f,
				0.342567f, 0f, 2.97337f, -1.41421f, 0f, 1.41421f, 1.48659f, 0f,
				-1.33793f, 2.00977f, 0f, -2.21688f, -2.21226f, 0f, 2.02412f,
				1.64098f, 0f, -2.50151f, 1.34198f, 0f, -2.6797f, 0.838117f, 0f,
				-2.86356f, 1.71499f, 0f, 1.02899f, 0f, 0f, 0f, 1.81945f, 0f,
				2.36035f, 1.42525f, 0f, 1.39844f, 0f, 0f, 2f, 0f, 0f, 0f,
				0.997367f, 0f, 2.81609f, 1.34212f, 0f, 2.68009f, 0.485576f, 0f,
				2.95339f, -5.44952f, 0f, -4.34012f, -3.96877f, 0f, -3.02995f,
				-4.20438f, 0f, -4.24242f, -0.707106f, 0f, 0.707106f, -2.16679f,
				0f, 2.07272f, 2.21226f, 0f, 2.02412f, 0.23009f, 0f, -2.99116f,
				2f, 0f, 0f, -1.78885f, 0f, 0.89443f, 0.909463f, 0f, 0.995893f,
				0.858679f, 0f, -5.92457f, -0.632457f, 0f, 1.89736f, 0f, 0f, 1f,
				2.76879f, 0f, -5.31522f, 1.88576f, 0f, -5.65729f, -0.765946f,
				0f, 2.89746f, -0.405931f, 0f, 2.96618f, 2.22988f, 0f,
				-2.00689f, -0.894426f, 0f, 0.447215f, 4.12959f, 0f, -4.32877f,
				-0.780868f, 0f, 0.624695f, -2.82821f, 0f, 2.79731f, -1.64098f,
				0f, 2.50151f, 3.41133f, 0f, -4.91321f, -0.503871f, 0f,
				2.86378f, 1.48659f, 0f, -1.33793f, 1.37653f, 0f, -1.44292f,
				1.77035f, 0f, -2.41169f, 1.4268f, 0f, -2.63552f, 1.04764f, 0f,
				-2.79372f, 0.495756f, 0f, -2.95266f, 0.153393f, 0f, -1.99411f,
				-0.083045f, 0f, -0.996545f, -0.707105f, 0f, -0.707108f,
				-2.24626f, 0f, -1.96892f, -2.43232f, 0f, -1.74958f, -2.80292f,
				0f, -2.82828f, -1.64098f, 0f, -2.50151f, -1.29171f, 0f,
				-2.70207f, -0.812978f, 0f, -2.87475f, -0.375621f, 0f,
				-2.97089f, 1.88576f, 0f, -5.65729f, 0f, 0f, 0f, -1.81893f, 0f,
				1.99179f, -1f, 0f, 0f, 0f, 0f, 0f, 0.911777f, 0f, 2.85046f, 0f,
				0f, 0f, 0.351124f, 0f, 0.936328f, 0f, 0f, 0f, 0f, 0f, 0f,
				0.509593f, 0f, 2.9515f, -1.81034f, 0f, -5.69084f, -0.877726f,
				0f, -5.92304f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f,
				0f, 0f, 0f, 1.00774f, 0f, 2.72756f, 0f, 0f, 0f, 1.77035f, 0f,
				2.41169f, 0f, 0f, 0f, 0f, 0f, 0f, 1.49073f, 0f, 1.28845f,
				1.48659f, 0f, -1.33793f, 4.87289f, 0f, -4.99773f, 3.41133f, 0f,
				-4.91321f, 2.76879f, 0f, -5.31522f, 0f, 0f, 0f, 0f, 0f, 0f, 0f,
				0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0.894426f, 0f, -0.447215f, 0f,
				0f, 0f, 0.707106f, 0f, 0.707106f, 0f, 0f, 0f, 1.41421f, 0f,
				1.41421f, -0.894426f, 0f, 0.447215f, -2.12132f, 0f, -2.12133f,
				-4.61747f, 0f, -3.78542f, -4.80082f, 0f, -3.58465f, -4.20438f,
				0f, -4.24242f, -3.41133f, 0f, -4.91321f, -2.69337f, 0f,
				-5.34877f, -1.81034f, 0f, -5.69084f, -0.877726f, 0f, -5.92304f,
				-0.249137f, 0f, -2.98964f, -1.41421f, 0f, -1.41421f,
				-0.707106f, 0f, -0.707106f, -1.71499f, 0f, -1.02899f,
				-1.49073f, 0f, -1.28845f, -1.77035f, 0f, -2.41169f, -1.00774f,
				0f, -2.72756f, 0f, 0f, -2f, -0.351124f, 0f, -0.936328f,
				-0.911777f, 0f, -2.85046f, -0.509593f, 0f, -2.9515f, 1.81893f,
				0f, -1.99179f, 1f, 0f, 0f, -2f, 0f, 0f, 0.894426f, 0f,
				-0.447215f, -0.909463f, 0f, -0.995893f, 0.632457f, 0f,
				-1.89736f, 0f, 0f, -1f, 0.765946f, 0f, -2.89746f, 0.405931f,
				0f, -2.96618f, 1.78885f, 0f, -0.89443f, 0.780868f, 0f,
				-0.624695f, 2.82821f, 0f, -2.79731f, 1.64098f, 0f, -2.50151f,
				0.503871f, 0f, -2.86378f };

		ByteBuffer nbb = ByteBuffer.allocateDirect(valueNormal.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		mNormalBuffer[0] = nbb.asFloatBuffer();
		mNormalBuffer[0].put(valueNormal);
		mNormalBuffer[0].position(0);
	}

	public void setNormal1() {
		float valueNormal[] = { 0f, -2f, 0f, 0f, -2f, 0f, 0f, -1f, 0f, 0f, -1f,
				0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -0.999999f, 0f, 0f,
				-0.999999f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -0.999999f, 0f,
				0f, -0.999999f, 0f, 0f, -3f, 0f, 0f, -2f, 0f, 0f, -1f, 0f, 0f,
				-3f, 0f, 0f, -2f, 0f, 0f, -1f, 0f, 0f, -2f, 0f, 0f, -2f, 0f,
				0f, -1f, 0f, 0f, -1f, 0f, 0f, -4f, 0f, 0f, -2f, 0f, 0f, -1f,
				0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -1f, 0f, 0f, -2f, 0f, 0f,
				-2f, 0f, 0f, -0.999999f, 0f, 0f, -0.999999f, 0f, 0f, -2f, 0f,
				0f, -2f, 0f, 0f, -0.999999f, 0f, 0f, -0.999999f, 0f, 0f, -2f,
				0f, 0f, -2f, 0f, 0f, -1f, 0f, 0f, -1f, 0f, 0f, -2f, 0f, 0f,
				-2f, 0f, 0f, -1f, 0f, 0f, -1f, 0f, 0f, -2f, 0f, 0f, -2f, 0f,
				0f, -1f, 0f, 0f, -1f, 0f, 0f, -3f, 0f, 0f, -2f, 0f, 0f, -1f,
				0f, 0f, -3f, 0f, 0f, -2f, 0f, 0f, -1f, 0f, 0f, -2f, 0f, 0f,
				-2f, 0f, 0f, -1f, 0f, 0f, -1f, 0f, 0f, -4f, 0f, 0f, -2f, 0f,
				0f, -1f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -1f, 0f, 0f, -2f,
				0f, 0f, -2f, 0f, 0f, -0.999999f, 0f, 0f, -0.999999f, 0f, 0f,
				-3f, 0f, 0f, -2f, 0f, 0f, -1f, 0f, 0f, -2f, 0f, 0f, -1f, 0f,
				0f, -3f, 0f, 0f, -2f, 0f, 0f, -1f, 0f, 0f, -2f, 0f, 0f, -1f,
				0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -0.999999f, 0f, 0f,
				-0.999999f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -1f, 0f, 0f, -1f,
				0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -1f, 0f, 0f, -1f, 0f };

		ByteBuffer nbb = ByteBuffer.allocateDirect(valueNormal.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		mNormalBuffer[1] = nbb.asFloatBuffer();
		mNormalBuffer[1].put(valueNormal);
		mNormalBuffer[1].position(0);
	}

	public void setNormal2() {
		float valueNormal[] = { 0f, 0f, 0f, -2147.48f, -2147.48f, -2147.48f,
				0f, 0f, 0f, -2147.48f, -2147.48f, -2147.48f, 0f, 0f, 1f,
				-2147.48f, -2147.48f, -2147.48f, -2f, 0f, 2f, 1f, 0f, 1f, 0f,
				0f, 2f, 0f, 0f, 1f, -2147.48f, -2147.48f, -2147.48f, -2f, 0f,
				2f, 1f, 0f, 1f, 0f, 0f, 2f, 0f, 0f, 1f, -2147.48f, -2147.48f,
				-2147.48f, -2f, 0f, 2f, 1f, 0f, 1f, 0f, 0f, 2f, 0f, 0f, 1f,
				-2147.48f, -2147.48f, -2147.48f, -2f, 0f, 2f, 1f, 0f,
				0.999999f, 0f, 0f, 2f, -2f, 0f, 0f, -2147.48f, -2147.48f,
				-2147.48f, -2147.48f, -2147.48f, -2147.48f, 1f, 0f, 0f, -1f,
				0f, 0f, 2f, 0f, 0f, -2147.48f, -2147.48f, -2147.48f, -2147.48f,
				-2147.48f, -2147.48f, -2147.48f, -2147.48f, -2147.48f,
				-2147.48f, -2147.48f, -2147.48f, -2147.48f, -2147.48f,
				-2147.48f, -2147.48f, -2147.48f, -2147.48f, -2147.48f,
				-2147.48f, -2147.48f, -2147.48f, -2147.48f, -2147.48f, 0f, 0f,
				0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f,
				0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, -2f,
				0f, 0f, 0f, -1f, 0f, -1f, -2147.48f, -2147.48f, -2147.48f, 0f,
				0f, 0f, 0f, 0f, 0f, -2147.48f, -2147.48f, -2147.48f, 0f, 0f,
				0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f,
				0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f,
				0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f,
				0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f,
				-1f, -2147.48f, -2147.48f, -2147.48f, 2f, 0f, -2f, -1f, 0f,
				-1f, 0f, 0f, -2f, 0f, 0f, -1f, -2147.48f, -2147.48f, -2147.48f,
				2f, 0f, -2f, 0f, 0f, -1f, -2147.48f, -2147.48f, -2147.48f, 2f,
				0f, -2f, -1f, 0f, -1f, 0f, 0f, -2f, 0f, 0f, -1f, -2147.48f,
				-2147.48f, -2147.48f, 2f, 0f, -2f, -1f, 0f, -1f, 0f, 0f, -2f,
				2f, 0f, 0f, -2147.48f, -2147.48f, -2147.48f, -2147.48f,
				-2147.48f, -2147.48f, -1f, 0f, 0f, 1f, 0f, 0f, -2f, 0f, 0f,
				-2147.48f, -2147.48f, -2147.48f, -2147.48f, -2147.48f,
				-2147.48f, -2147.48f, -2147.48f, -2147.48f, -2147.48f,
				-2147.48f, -2147.48f, -2147.48f, -2147.48f, -2147.48f,
				-2147.48f, -2147.48f, -2147.48f, -2147.48f, -2147.48f,
				-2147.48f, -2147.48f, -2147.48f, -2147.48f };

		ByteBuffer nbb = ByteBuffer.allocateDirect(valueNormal.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		mNormalBuffer[2] = nbb.asFloatBuffer();
		mNormalBuffer[2].put(valueNormal);
		mNormalBuffer[2].position(0);
	}

	public void setNormal3() {
		float valueNormal[] = { 0f, 0f, 0f, 0f, 0f, 2f, -2147.48f, -2147.48f,
				-2147.48f, 0f, 0f, 0f, 0f, 0f, 0f, -2147.48f, -2147.48f,
				-2147.48f, 0f, 0f, 0f, -2147.48f, -2147.48f, -2147.48f, 0f, 0f,
				0f, -2f, 0f, 2f, -2147.48f, -2147.48f, -2147.48f, 0f, 0f, 0f,
				-2f, 0f, 0f, 0f, 0f, 0f, -2147.48f, -2147.48f, -2147.48f, 0f,
				0f, 0f, -2147.48f, -2147.48f, -2147.48f, 1f, 0f, 0.999999f, 0f,
				0f, 0f, 0f, 0f, 0f, -1f, 0f, 0f, 0f, 0f, 0f, -2147.48f,
				-2147.48f, -2147.48f, 0f, 0f, 0f, 0.999999f, 0f, 0f, -2147.48f,
				-2147.48f, -2147.48f, 0f, 0f, 0f, 0f, 0f, -2f, -1f, 0f, -1f,
				-2147.48f, -2147.48f, -2147.48f, 0f, 0f, 0f, 0f, 0f, 0f, 0f,
				0f, 0.999999f, 2f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, -2147.48f,
				-2147.48f, -2147.48f, 0f, 0f, 0f, -2147.48f, -2147.48f,
				-2147.48f, -2f, 0f, 2f, 0f, 0f, 0f, 0f, 0f, 1f, 0f, 0f, 0f, 0f,
				0f, 0f, -2147.48f, -2147.48f, -2147.48f, -2147.48f, -2147.48f,
				-2147.48f, 0f, 0f, 0f, -2f, 0f, 2f, 0f, 0f, 0f, 0f, 0f,
				0.999999f, 0f, 0f, 0f, 0f, 0f, 0f, -2147.48f, -2147.48f,
				-2147.48f, -2147.48f, -2147.48f, -2147.48f, 0f, 0f, 0f, 0f, 0f,
				0f, -2147.48f, -2147.48f, -2147.48f, 0f, 0f, 0f, -2147.48f,
				-2147.48f, -2147.48f, 0f, 0f, 0f, 1f, 0f, 0.999999f, 0f, 0f,
				2f, 0f, 0f, 0f, 0f, 0f, 0f, 1f, 0f, 0.999999f, 0f, 0f, 2f, 0f,
				0f, 0f, -2f, 0f, 2f, 0f, 0f, 0f, 0f, 0f, 0.999999f, 0f, 0f, 0f,
				0f, 0f, 0f, 1f, 0f, 0.999999f, 0f, 0f, 2f, 0f, 0f, 0f,
				-2147.48f, -2147.48f, -2147.48f, 0f, 0f, -1f, -2147.48f,
				-2147.48f, -2147.48f, 2f, 0f, -2f, -1f, 0f, -1f, 0f, 0f, -2f,
				0f, 0f, -1f, -2147.48f, -2147.48f, -2147.48f, 2f, 0f, -2f, 0f,
				0f, -1f, -2147.48f, -2147.48f, -2147.48f, 2f, 0f, -2f, -1f, 0f,
				-1f, 0f, 0f, -2f, 0f, 0f, -0.999999f, 2f, 0f, -2f, -1f, 0f,
				-1f, 0f, 0f, -2f, -2147.48f, -2147.48f, -2147.48f, 2f, 0f, 0f,
				-2147.48f, -2147.48f, -2147.48f, -2147.48f, -2147.48f,
				-2147.48f, -1f, 0f, 0f, 1f, 0f, 0f, -2f, 0f, 0f, -2147.48f,
				-2147.48f, -2147.48f, -2147.48f, -2147.48f, -2147.48f,
				-2147.48f, -2147.48f, -2147.48f, -2147.48f, -2147.48f,
				-2147.48f, -2147.48f, -2147.48f, -2147.48f, -2147.48f,
				-2147.48f, -2147.48f, -2147.48f, -2147.48f, -2147.48f,
				-2147.48f, -2147.48f, -2147.48f, -2147.48f, -2147.48f,
				-2147.48f, -2147.48f, -2147.48f, -2147.48f };

		ByteBuffer nbb = ByteBuffer.allocateDirect(valueNormal.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		mNormalBuffer[3] = nbb.asFloatBuffer();
		mNormalBuffer[3].put(valueNormal);
		mNormalBuffer[3].position(0);
	}

	public void setNormal4() {
		float valueNormal[] = { 0f, -10f, 0f, 0f, -2f, 0f, 0f, -3f, 0f, 0f,
				-11f, 0f, 0f, -3f, 0f, 0f, -4f, 0f, 0f, -2f, 0f, 0f, -6f, 0f,
				0f, -4f, 0f, 0f, -4f, 0f, 0f, -3f, 0f, 0f, -4f, 0f, 0f, -3f,
				0f, 0f, -4f, 0f, 0f, -3f, 0f, 0f, -6f, 0f, 0f, -4f, 0f, 0f,
				-3f, 0f, 0f, -4f, 0f, 0f, -3f, 0f, 0f, -6f, 0f, 0f, -4f, 0f,
				0f, -3f, 0f, 0f, -6f, 0f, 0f, -4f, 0f, 0f, -3f, 0f, 0f, -4f,
				0f, 0f, -2f, 0f, 0f, -4f, 0f, 0f, -4f, 0f, 0f, -3f, 0f, 0f,
				-4f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -3f, 0f, 0f, -3f, 0f,
				0f, -4f, 0f, 0f, -2f, 0f, 0f, -1f, 0f, 0f, -4f, 0f, 0f, -2f,
				0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -1f, 0f, 0f,
				-2f, 0f, 0f, -3f, 0f, 0f, -1f, 0f, 0f, -2f, 0f, 0f, -3f, 0f,
				0f, -1f, 0f, 0f, -2f, 0f, 0f, -3f, 0f, 0f, -1f, 0f, 0f, -2f,
				0f, 0f, -3f, 0f };

		ByteBuffer nbb = ByteBuffer.allocateDirect(valueNormal.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		mNormalBuffer[4] = nbb.asFloatBuffer();
		mNormalBuffer[4].put(valueNormal);
		mNormalBuffer[4].position(0);
	}

	public void setNormal5() {
		float valueNormal[] = { 0f, -4f, 0f, 0f, -3f, 0f, 0f, -2f, 0f, 0f, -1f,
				0f, 0f, -4f, 0f, 0f, -1f, 0f, 0f, -4f, 0f, 0f, -2f, 0f, 0f,
				-3f, 0f, 0f, -4f, 0f, 0f, -1f, 0f, 0f, -3f, 0f, 0f, -3f, 0f,
				0f, -2f, 0f, 0f, -4f, 0f, 0f, -3f, 0f, 0f, -2f, 0f, 0f, -6f,
				0f, 0f, -3f, 0f, 0f, -2f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f,
				-3f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -3f, 0f, 0f, -4f, 0f,
				0f, -4f, 0f, 0f, -1f, 0f, 0f, -6f, 0f, 0f, -2f, 0f, 0f, -4f,
				0f, 0f, -3f, 0f, 0f, -1f, 0f, 0f, -6f, 0f, 0f, -2f, 0f, 0f,
				-3f, 0f, 0f, -3f, 0f, 0f, -4f, 0f, 0f, -3f, 0f, 0f, -4f, 0f,
				0f, -4f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -4f, 0f, 0f, -2f,
				0f, 0f, -3f, 0f, 0f, -10f, 0f, 0f, -2f, 0f, 0f, -6f, 0f, 0f,
				-4f, 0f, 0f, -3f, 0f, 0f, -4f, 0f, 0f, -4f, 0f, 0f, -3f, 0f,
				0f, -11f, 0f };

		ByteBuffer nbb = ByteBuffer.allocateDirect(valueNormal.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		mNormalBuffer[5] = nbb.asFloatBuffer();
		mNormalBuffer[5].put(valueNormal);
		mNormalBuffer[5].position(0);
	}

	public void setNormal6() {
		float valueNormal[] = { 0f, -2f, 0f, 0f, -3f, 0f, 0f, -2f, 0f, 0f, -4f,
				0f, 0f, -3f, 0f, 0f, -11f, 0f, 0f, -3f, 0f, 0f, -6f, 0f, 0f,
				-4f, 0f, 0f, -3f, 0f, 0f, -4f, 0f, 0f, -3f, 0f, 0f, -6f, 0f,
				0f, -4f, 0f, 0f, -3f, 0f, 0f, -4f, 0f, 0f, -3f, 0f, 0f, -6f,
				0f, 0f, -4f, 0f, 0f, -3f, 0f, 0f, -4f, 0f, 0f, -3f, 0f, 0f,
				-6f, 0f, 0f, -4f, 0f, 0f, -3f, 0f, 0f, -5f, 0f, 0f, -3f, 0f,
				0f, -3f, 0f, 0f, -5f, 0f, 0f, -2f, 0f, 0f, -1f, 0f, 0f, -3f,
				0f, 0f, -4f, 0f, 0f, -4f, 0f, 0f, -2f, 0f, 0f, -3f, 0f, 0f,
				-3f, 0f, 0f, -10f, 0f, 0f, -0.999999f, 0f, 0f, -2f, 0f, 0f,
				-3f, 0f, 0f, -1f, 0f, 0f, -2f, 0f, 0f, -0.999999f, 0f, 0f, -3f,
				0f, 0f, -0.999999f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -5f, 0f,
				0f, -3f, 0f, 0f, -2f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f };

		ByteBuffer nbb = ByteBuffer.allocateDirect(valueNormal.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		mNormalBuffer[6] = nbb.asFloatBuffer();
		mNormalBuffer[6].put(valueNormal);
		mNormalBuffer[6].position(0);
	}

	public void setNormal7() {
		float valueNormal[] = { 0f, -11f, 0f, 0f, -3f, 0f, 0f, -4f, 0f, 0f,
				-3f, 0f, 0f, -3f, 0f, 0f, -4f, 0f, 0f, -2f, 0f, 0f, -2f, 0f,
				0f, -3f, 0f, 0f, -10f, 0f, 0f, -5f, 0f, 0f, -3f, 0f, 0f, -4f,
				0f, 0f, -4f, 0f, 0f, -3f, 0f, 0f, -6f, 0f, 0f, -4f, 0f, 0f,
				-3f, 0f, 0f, -4f, 0f, 0f, -3f, 0f, 0f, -6f, 0f, 0f, -4f, 0f,
				0f, -3f, 0f, 0f, -6f, 0f, 0f, -4f, 0f, 0f, -3f, 0f, 0f, -4f,
				0f, 0f, -3f, 0f, 0f, -6f, 0f, 0f, -4f, 0f, 0f, -3f, 0f, 0f,
				-5f, 0f, 0f, -3f, 0f, 0f, -5f, 0f, 0f, -2f, 0f, 0f, -1f, 0f,
				0f, -3f, 0f, 0f, -2f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f,
				-0.999999f, 0f, 0f, -2f, 0f, 0f, -1f, 0f, 0f, -3f, 0f, 0f,
				-0.999999f, 0f, 0f, -2f, 0f, 0f, -3f, 0f, 0f, -0.999999f, 0f,
				0f, -2f, 0f, 0f, -2f, 0f, 0f, -3f, 0f, 0f, -2f, 0f, 0f, -3f,
				0f, 0f, -3f, 0f };

		ByteBuffer nbb = ByteBuffer.allocateDirect(valueNormal.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		mNormalBuffer[7] = nbb.asFloatBuffer();
		mNormalBuffer[7].put(valueNormal);
		mNormalBuffer[7].position(0);
	}

	public void setNormal8() {
		float valueNormal[] = { 0f, -3f, 0f, 0f, -4f, 0f, 0f, -4f, 0f, 0f, -2f,
				0f, 0f, -4f, 0f, 0f, -2f, 0f, 0f, -4f, 0f, 0f, -1f, 0f, 0f,
				-3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -4f, 0f,
				0f, -3f, 0f, 0f, -3f, 0f, 0f, -1f, 0f, 0f, -3f, 0f, 0f, -3f,
				0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -4f, 0f, 0f, -2f, 0f, 0f,
				-3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f,
				0f, -5f, 0f, 0f, -3f, 0f, 0f, -4f, 0f, 0f, -2f, 0f, 0f, -2f,
				0f, 0f, -4f, 0f, 0f, -2f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f,
				-3f, 0f };

		ByteBuffer nbb = ByteBuffer.allocateDirect(valueNormal.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		mNormalBuffer[8] = nbb.asFloatBuffer();
		mNormalBuffer[8].put(valueNormal);
		mNormalBuffer[8].position(0);
	}

	public void setNormal9() {
		float valueNormal[] = { 0f, 3f, 0f, 0f, 5f, 0f, 0f, 3f, 0f, 0f, 3f, 0f,
				0f, 3f, 0f, 0f, 5f, 0f, 0f, 3f, 0f, 0f, 1f, 0f, 0f, 3f, 0f, 0f,
				3f, 0f, 0f, 3f, 0f, 0f, 3f, 0f, 0f, 4f, 0f, 0f, 4f, 0f, 0f, 2f,
				0f, 0f, 2f, 0f, 0f, 3f, 0f, 0f, 4f, 0f, 0f, 2f, 0f, 0f, 1f, 0f,
				0f, 4f, 0f, 0f, 3f, 0f, 0f, 3f, 0f, 0f, 3f, 0f, 0f, 3f, 0f, 0f,
				4f, 0f, 0f, 4f, 0f, 0f, 3f, 0f, 0f, 2f, 0f, 0f, 2f, 0f, 0f, 2f,
				0f, 0f, 3f, 0f, 0f, 3f, 0f, 0f, 3f, 0f, 0f, 3f, 0f, 0f, 3f, 0f,
				0f, 3f, 0f };

		ByteBuffer nbb = ByteBuffer.allocateDirect(valueNormal.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		mNormalBuffer[9] = nbb.asFloatBuffer();
		mNormalBuffer[9].put(valueNormal);
		mNormalBuffer[9].position(0);
	}

	public void setNormal10() {
		float valueNormal[] = { -3f, 0f, 0f, -1f, 0f, 0f, 2f, 0f, 0f, 2f, 0f,
				-2f, 0.999999f, 0f, 0f, 0.999999f, 0f, -0.999999f, -2147.48f,
				-2147.48f, -2147.48f, -3f, 0f, 0f, -3f, 0f, 3f, -1f, 0f, 0f,
				2f, 0f, 0f, 3f, 0f, 3f, 3f, 0f, 0f, -2147.48f, -2147.48f,
				-2147.48f, 0f, 0f, 0f, -2f, 0f, 0f, -1f, 0f, 0f, 0f, 0f, 0f,
				-2f, 0f, -2f, -2147.48f, -2147.48f, -2147.48f, -0.999999f, 0f,
				0f, -2147.48f, -2147.48f, -2147.48f, 2f, 0f, 0f, 0f, 0f, 0f,
				-1f, 0f, 0f, -2f, 0f, 0f, -0.999999f, 0f, -0.999999f, -3f, 0f,
				3f, -2147.48f, -2147.48f, -2147.48f, 3f, 0f, 3f, -3f, 0f, 0f,
				1f, 0f, 0f, 2f, 0f, 0f, -2f, 0f, 0f, 1f, 0f, 0f, 2f, 0f, 0f,
				-2f, 0f, 0f, 1f, 0f, 0f, 2f, 0f, 0f, -2f, 0f, 0f, 1f, 0f, 0f,
				-2147.48f, -2147.48f, -2147.48f, 3f, 0f, 0f, -2147.48f,
				-2147.48f, -2147.48f, -2147.48f, -2147.48f, -2147.48f, -1f, 0f,
				0f, -0.999999f, 0f, 0f, -2f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 2f,
				0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 1f, -2147.48f,
				-2147.48f, -2147.48f, 0f, 0f, 0f, -2147.48f, -2147.48f,
				-2147.48f, 0f, 0f, 0f, -2147.48f, -2147.48f, -2147.48f, 1f, 0f,
				0f, -2147.48f, -2147.48f, -2147.48f, 2f, 0f, 0f, -2f, 0f, 0f,
				0.999999f, 0f, 0f, -2147.48f, -2147.48f, -2147.48f, -2147.48f,
				-2147.48f, -2147.48f, -2f, 0f, 0f, 1f, 0f, 0f, 0f, 0f, 0f, 2f,
				0f, 0f, 2f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 1f, 0f, 0f, 0f, 0f,
				0f, -2147.48f, -2147.48f, -2147.48f, 0f, 0f, 2f, -2147.48f,
				-2147.48f, -2147.48f, 0f, 0f, 0f, -3f, 0f, 3f, 0f, 0f, 0f, 0f,
				0f, 0f, 3f, 0f, 3f, 3f, 0f, 0f, 0f, 0f, 0f, -1f, 0f, 0f, 0f,
				0f, 0f, 0f, 0f, 0f, 2f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f,
				0.999999f, 0f, 0f, 0f, 0f, 0f, 1f, 0f, 0f, 2f, 0f, 0f, 0f, 0f,
				0f, 0f, 0f, 0f, -1f, 0f, 0f, -2f, 0f, 0f, 0f, 0f, 0f, 0f, 0f,
				0f, 0f, 0f, 0f, -2f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f,
				0f, 1f, 0f, 0f, -2f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 1f, 0f, 0f,
				0f, 0f, 0f, 2f, 0f, 0f, 1f, -3f, 0f, 3f, 3f, 0f, 3f, -3f, 0f,
				0f, 3f, 0f, 0f, 0f, 0f, 2f, 0f, 0f, 1f, -2147.48f, -2147.48f,
				-2147.48f, -1f, 0f, 0f, -2f, 0f, 0f, 2f, 0f, 0f, -1f, 0f, 0f,
				-2f, 0f, 0f, -1f, 0f, 0f, -2f, 0f, 0f, 2f, 0f, 0f, -1f, 0f, 0f,
				2f, 0f, 0f, -2147.48f, -2147.48f, -2147.48f, -2147.48f,
				-2147.48f, -2147.48f, -2147.48f, -2147.48f, -2147.48f, 1f, 0f,
				0f, 1f, 0f, 0f, 1f, 0f, 0f, -2147.48f, -2147.48f, -2147.48f,
				-1f, 0f, 0f, -2f, 0f, 0f, 2f, 0f, 0f, -1f, 0f, 0f, -2f, 0f, 0f,
				-1f, 0f, 0f, -2f, 0f, 0f, 2f, 0f, 0f, -1f, 0f, 0f, -2147.48f,
				-2147.48f, -2147.48f, -2147.48f, -2147.48f, -2147.48f,
				-2147.48f, -2147.48f, -2147.48f, 1f, 0f, 0f, 1f, 0f, 0f, 2f,
				0f, 0f };

		ByteBuffer nbb = ByteBuffer.allocateDirect(valueNormal.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		mNormalBuffer[10] = nbb.asFloatBuffer();
		mNormalBuffer[10].put(valueNormal);
		mNormalBuffer[10].position(0);
	}

	public void setColor0() {
		float valueColor[] = { 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f };

		ByteBuffer cbb = ByteBuffer.allocateDirect(valueColor.length * 4);
		cbb.order(ByteOrder.nativeOrder());
		mColorBuffer[0] = cbb.asFloatBuffer();
		mColorBuffer[0].put(valueColor);
		mColorBuffer[0].position(0);
	}

	public void setColor1() {
		float valueColor[] = { 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f, 0.899999f, 0.899999f, 0.899999f, 1.0f,
				0.899999f, 0.899999f, 0.899999f, 1.0f, 0.899999f, 0.899999f,
				0.899999f, 1.0f };

		ByteBuffer cbb = ByteBuffer.allocateDirect(valueColor.length * 4);
		cbb.order(ByteOrder.nativeOrder());
		mColorBuffer[1] = cbb.asFloatBuffer();
		mColorBuffer[1].put(valueColor);
		mColorBuffer[1].position(0);
	}

	public void setColor2() {
		float valueColor[] = { 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f };

		ByteBuffer cbb = ByteBuffer.allocateDirect(valueColor.length * 4);
		cbb.order(ByteOrder.nativeOrder());
		mColorBuffer[2] = cbb.asFloatBuffer();
		mColorBuffer[2].put(valueColor);
		mColorBuffer[2].position(0);
	}

	public void setColor3() {
		float valueColor[] = { 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f };

		ByteBuffer cbb = ByteBuffer.allocateDirect(valueColor.length * 4);
		cbb.order(ByteOrder.nativeOrder());
		mColorBuffer[3] = cbb.asFloatBuffer();
		mColorBuffer[3].put(valueColor);
		mColorBuffer[3].position(0);
	}

	public void setColor4() {
		float valueColor[] = { 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f };

		ByteBuffer cbb = ByteBuffer.allocateDirect(valueColor.length * 4);
		cbb.order(ByteOrder.nativeOrder());
		mColorBuffer[4] = cbb.asFloatBuffer();
		mColorBuffer[4].put(valueColor);
		mColorBuffer[4].position(0);
	}

	public void setColor5() {
		float valueColor[] = { 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f };

		ByteBuffer cbb = ByteBuffer.allocateDirect(valueColor.length * 4);
		cbb.order(ByteOrder.nativeOrder());
		mColorBuffer[5] = cbb.asFloatBuffer();
		mColorBuffer[5].put(valueColor);
		mColorBuffer[5].position(0);
	}

	public void setColor6() {
		float valueColor[] = { 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f };

		ByteBuffer cbb = ByteBuffer.allocateDirect(valueColor.length * 4);
		cbb.order(ByteOrder.nativeOrder());
		mColorBuffer[6] = cbb.asFloatBuffer();
		mColorBuffer[6].put(valueColor);
		mColorBuffer[6].position(0);
	}

	public void setColor7() {
		float valueColor[] = { 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f };

		ByteBuffer cbb = ByteBuffer.allocateDirect(valueColor.length * 4);
		cbb.order(ByteOrder.nativeOrder());
		mColorBuffer[7] = cbb.asFloatBuffer();
		mColorBuffer[7].put(valueColor);
		mColorBuffer[7].position(0);
	}

	public void setColor8() {
		float valueColor[] = { 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f };

		ByteBuffer cbb = ByteBuffer.allocateDirect(valueColor.length * 4);
		cbb.order(ByteOrder.nativeOrder());
		mColorBuffer[8] = cbb.asFloatBuffer();
		mColorBuffer[8].put(valueColor);
		mColorBuffer[8].position(0);
	}

	public void setColor9() {
		float valueColor[] = { 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f };

		ByteBuffer cbb = ByteBuffer.allocateDirect(valueColor.length * 4);
		cbb.order(ByteOrder.nativeOrder());
		mColorBuffer[9] = cbb.asFloatBuffer();
		mColorBuffer[9].put(valueColor);
		mColorBuffer[9].position(0);
	}

	public void setColor10() {
		float valueColor[] = { 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f,
				0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f,
				0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f,
				1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f, 0.6f, 0.4f,
				0f, 1.0f, 0.6f, 0.4f, 0f, 1.0f };

		ByteBuffer cbb = ByteBuffer.allocateDirect(valueColor.length * 4);
		cbb.order(ByteOrder.nativeOrder());
		mColorBuffer[10] = cbb.asFloatBuffer();
		mColorBuffer[10].put(valueColor);
		mColorBuffer[10].position(0);
	}

	@Override
	public void draw(GL10 gl, int variable) {
		// TODO Auto-generated method stub
		
	}	
}
