package DangGuDANAWA.Object3D.Object;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;

import DangGuDANAWA.Object3D.Interface.Object3D;

public class Camera implements Object3D {
	private int size[];
	private int objectNumber;

	public Camera() {
		setValue();
		setVertex0();
		setFace0();
		setNormal0();
		setColor0();
		setVertex1();
		setFace1();
		setNormal1();
		setColor1();
		setVertex2();
		setFace2();
		setNormal2();
		setColor2();
		setVertex3();
		setFace3();
		setNormal3();
		setColor3();
		setVertex4();
		setFace4();
		setNormal4();
		setColor4();
		setVertex5();
		setFace5();
		setNormal5();
		setColor5();
		setVertex6();
		setFace6();
		setNormal6();
		setColor6();
		setVertex7();
		setFace7();
		setNormal7();
		setColor7();
		setVertex8();
		setFace8();
		setNormal8();
		setColor8();
		setVertex9();
		setFace9();
		setNormal9();
		setColor9();
		setVertex10();
		setFace10();
		setNormal10();
		setColor10();
		setVertex11();
		setFace11();
		setNormal11();
		setColor11();
		setVertex12();
		setFace12();
		setNormal12();
		setColor12();
		setVertex13();
		setFace13();
		setNormal13();
		setColor13();
		setVertex14();
		setFace14();
		setNormal14();
		setColor14();
		setVertex15();
		setFace15();
		setNormal15();
		setColor15();
	}

	public void draw(GL10 gl) {
		gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
		gl.glEnableClientState(GL10.GL_COLOR_ARRAY);
		gl.glEnableClientState(GL10.GL_NORMAL_ARRAY);
		for (int i = 0; i < objectNumber; i++) {
			gl.glVertexPointer(3, GL10.GL_FLOAT, 0, mVertexBuffer[i]);
			gl.glColorPointer(4, GL10.GL_FLOAT, 0, mColorBuffer[i]);
			gl.glNormalPointer(GL10.GL_FLOAT, 0, mNormalBuffer[i]);
			gl.glDrawElements(GL10.GL_TRIANGLES, size[i], GL10.GL_UNSIGNED_BYTE, mIndexBuffer[i]);
		}
		gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);
		gl.glDisableClientState(GL10.GL_COLOR_ARRAY);
		gl.glDisableClientState(GL10.GL_NORMAL_ARRAY);
	}

	private FloatBuffer[] mVertexBuffer;
	private FloatBuffer[] mColorBuffer;
	private FloatBuffer[] mNormalBuffer;
	private ByteBuffer[] mIndexBuffer;

	public void setValue() {
		objectNumber = 16;
		size = new int[objectNumber];
		mVertexBuffer = new FloatBuffer[objectNumber];
		mIndexBuffer = new ByteBuffer[objectNumber];
		mNormalBuffer = new FloatBuffer[objectNumber];
		mColorBuffer = new FloatBuffer[objectNumber];
	}

	public void setVertex0() {
		float valueVertex[] = { -0.766447f, 0.916519f, 31.9107f, -0.766447f, -0.504881f, 31.3746f, -0.766447f,
				-0.504881f, 31.9107f, -0.766447f, 0.745119f, 31.3746f, -0.766447f, -0.366381f, 35.0439f, 1.23355f,
				-0.317681f, 34.7315f, -0.766447f, -0.317681f, 34.7315f, 1.23355f, -0.366381f, 35.0439f, 1.23355f,
				-0.282881f, 34.4172f, -0.766447f, -0.282881f, 34.4172f, 1.23355f, -0.261881f, 34.1018f, -0.766447f,
				-0.261881f, 34.1018f, 1.23355f, 0.0791189f, 35.3716f, -0.766447f, 0.0619189f, 35.2963f, 1.23355f,
				0.0619189f, 35.2963f, -0.766447f, 0.0791189f, 35.3716f, 1.23355f, 0.0807189f, 35.4489f, -0.766447f,
				0.0807189f, 35.4489f, 1.23355f, 0.0666189f, 35.5249f, -0.766447f, 0.0666189f, 35.5249f, 1.23355f,
				0.0375189f, 35.5964f, -0.766447f, 0.0375189f, 35.5964f, 1.23355f, -0.00538112f, 35.6607f, -0.766447f,
				-0.00538112f, 35.6607f, -0.766447f, -0.289381f, 35.0378f, 1.23355f, -0.289381f, 35.0378f, -0.766447f,
				-0.212681f, 35.0475f, 1.23355f, -0.212681f, 35.0475f, -0.766447f, -0.139581f, 35.0725f, 1.23355f,
				-0.139581f, 35.0725f, -0.766447f, -0.0729811f, 35.1117f, 1.23355f, -0.0729811f, 35.1117f, -0.766447f,
				-0.261881f, 33.4696f, 1.23355f, -0.282881f, 33.1541f, -0.766447f, -0.282881f, 33.1541f, 1.23355f,
				-0.261881f, 33.4696f, 1.23355f, -0.180081f, 34.091f, 1.23355f, -0.103881f, 34.0594f, 1.23355f,
				-0.0383811f, 34.0092f, 1.23355f, -0.0157811f, 35.1636f, 1.23355f, 0.0118189f, 33.9437f, 1.23355f,
				0.0298189f, 35.226f, 1.23355f, 0.0434189f, 33.8675f, 1.23355f, 0.0542189f, 33.7857f, 1.23355f,
				2.11592f, 35.6607f, 1.23355f, 1.94512f, 35.3765f, 1.23355f, 1.78652f, 35.0853f, 1.23355f, 1.64022f,
				34.7877f, 1.23355f, 1.50652f, 34.4843f, 1.23355f, 1.38582f, 34.1755f, 1.23355f, 1.27812f, 33.8618f,
				1.23355f, 1.18382f, 33.5439f, 1.23355f, 1.10292f, 33.2224f, 1.23355f, 1.03562f, 32.8977f, 1.23355f,
				0.745119f, 31.3746f, 1.23355f, 0.982119f, 32.5704f, 1.23355f, 0.942419f, 32.2412f, 1.23355f, 0.916519f,
				31.9107f, 1.23355f, -0.428881f, 32.2175f, 1.23355f, -0.504881f, 31.3746f, 1.23355f, -0.504881f,
				31.9107f, 1.23355f, -0.366381f, 32.5275f, 1.23355f, -0.317681f, 32.8399f, 1.23355f, -0.180081f,
				33.4803f, 1.23355f, -0.103881f, 33.5119f, 1.23355f, -0.0383811f, 33.5622f, 1.23355f, 0.0118189f,
				33.6276f, 1.23355f, 0.0434189f, 33.7039f, -0.766447f, -0.317681f, 32.8399f, -0.766447f, -0.366381f,
				32.5275f, -0.766447f, -0.428881f, 32.2175f, -0.766447f, -0.0157811f, 35.1636f, -0.766447f, -0.0383811f,
				33.5622f, -0.766447f, 0.0118189f, 33.6276f, -0.766447f, 0.0434189f, 33.7039f, -0.766447f, 0.0298189f,
				35.226f, -0.766447f, 0.0542189f, 33.7857f, -0.766447f, 0.0434189f, 33.8675f, -0.766447f, 0.0118189f,
				33.9437f, -0.766447f, -0.0383811f, 34.0092f, -0.766447f, -0.103881f, 34.0594f, -0.766447f, -0.180081f,
				34.091f, -0.766447f, -0.180081f, 33.4803f, -0.766447f, -0.103881f, 33.5119f, -0.766447f, 2.11592f,
				35.6607f, -0.766447f, 1.94512f, 35.3765f, -0.766447f, 1.78652f, 35.0853f, -0.766447f, 1.64022f,
				34.7877f, -0.766447f, 1.50652f, 34.4843f, -0.766447f, 1.38582f, 34.1755f, -0.766447f, 1.27812f,
				33.8618f, -0.766447f, 1.18382f, 33.5439f, -0.766447f, 1.10292f, 33.2224f, -0.766447f, 1.03562f,
				32.8977f, -0.766447f, 0.982119f, 32.5704f, -0.766447f, 0.942419f, 32.2412f, -0.766447f, 0.916519f,
				31.9107f, -0.766447f, -0.504881f, 31.9107f, -0.766447f, -0.504881f, 31.3746f };
		ByteBuffer vbb = ByteBuffer.allocateDirect(valueVertex.length * 4);
		vbb.order(ByteOrder.nativeOrder());
		mVertexBuffer[0] = vbb.asFloatBuffer();
		mVertexBuffer[0].put(valueVertex);
		mVertexBuffer[0].position(0);
	}

	public void setVertex1() {
		float valueVertex[] = { -1.10231f, 1.47902f, 31.9815f, -1.10231f, -0.830983f, 31.8415f, -1.10231f, -0.830983f,
				31.9815f, -1.10231f, 1.47902f, 31.8415f, 2.04769f, -0.830983f, 31.9815f, 2.04769f, -0.830983f,
				31.8415f, 2.04769f, 1.47902f, 31.9815f, 2.04769f, 1.47902f, 31.8415f };
		ByteBuffer vbb = ByteBuffer.allocateDirect(valueVertex.length * 4);
		vbb.order(ByteOrder.nativeOrder());
		mVertexBuffer[1] = vbb.asFloatBuffer();
		mVertexBuffer[1].put(valueVertex);
		mVertexBuffer[1].position(0);
	}

	public void setVertex2() {
		float valueVertex[] = { -23.1605f, 16.6154f, 4.84155f, -22.0768f, 16.3338f, 5.30635f, -22.0768f, 16.6154f,
				4.84155f, 0.517993f, 0.173617f, 31.9815f, -10.2882f, 8.44782f, 18.3235f, -9.61151f, 7.95912f, 19.1302f,
				0.495093f, 0.660417f, 31.178f, 20.852f, 16.3338f, 5.30635f, 21.8728f, 16.6154f, 4.84155f, 20.9057f,
				16.6154f, 4.84155f, 10.5785f, 8.42392f, 18.3629f, 10.1746f, 8.11292f, 18.8763f, 21.2111f, 15.8052f,
				5.28515f, 21.3566f, 15.7212f, 4.84155f, -0.643807f, -22.3846f, 4.84155f, -0.336307f, -21.516f,
				5.28515f, -0.190807f, -21.6f, 4.84155f, 0.219593f, -10.7225f, 18.271f, 0.251593f, -10.1023f, 19.0172f,
				0.775493f, 0.0711169f, 31.2569f, 10.4766f, 7.54032f, 18.9278f, 10.9933f, 7.93822f, 18.271f, -0.471807f,
				-9.97658f, 18.8763f, -10.9174f, 7.61522f, 18.3235f, -0.495407f, -10.4361f, 18.3235f, -10.2882f,
				7.17832f, 19.0445f, -1.05481f, -21.6728f, 4.84155f, -1.04441f, -21.0943f, 5.50055f, 0.0422932f,
				0.0050169f, 30.8853f, -22.1048f, 15.3835f, 5.50055f, -22.629f, 15.6948f, 4.84155f };
		ByteBuffer vbb = ByteBuffer.allocateDirect(valueVertex.length * 4);
		vbb.order(ByteOrder.nativeOrder());
		mVertexBuffer[2] = vbb.asFloatBuffer();
		mVertexBuffer[2].put(valueVertex);
		mVertexBuffer[2].position(0);
	}

	public void setVertex3() {
		float valueVertex[] = { 1.02069f, 0.0867169f, 31.6175f, -3.24871f, 7.43072f, 29.8019f, 1.03169f, 0.0806169f,
				31.5657f, -3.25961f, 7.43682f, 29.8538f, -3.26761f, 7.30552f, 29.326f, -4.27461f, 9.27182f, 28.9204f,
				-4.37261f, 9.20282f, 28.8707f, -3.16961f, 7.37452f, 29.3757f, -3.28131f, 7.43552f, 29.9009f, 0.999093f,
				0.0854169f, 31.6646f, 0.957793f, -0.0056831f, 31.3852f, -3.28821f, 7.37242f, 29.6548f, -3.32261f,
				7.34432f, 29.6214f, 0.992193f, 0.0224169f, 31.4186f, -4.95281f, 8.97622f, 29.3342f, -3.84531f,
				7.11052f, 29.9154f, -3.84791f, 7.07882f, 29.7895f, -4.95031f, 9.00792f, 29.4601f, 1.01719f, 0.0474169f,
				31.4622f, -3.26321f, 7.39742f, 29.6984f, -3.48791f, 7.17662f, 29.3235f, -3.37621f, 7.23802f, 29.3082f,
				-3.59511f, 7.12552f, 29.3709f, -3.69061f, 7.08822f, 29.4472f, -3.08881f, 7.44032f, 29.4539f, -3.76781f,
				7.06732f, 29.5471f, -3.03081f, 7.49842f, 29.5554f, -3.40831f, 7.28772f, 29.5933f, -3.45311f, 7.26302f,
				29.5994f, -3.82141f, 7.06402f, 29.6638f, -3.49541f, 7.24292f, 29.6181f, -3.53291f, 7.22822f, 29.6481f,
				-3.56351f, 7.21992f, 29.6876f, -3.58511f, 7.21862f, 29.7347f, -3.59601f, 7.22472f, 29.7866f, -3.59501f,
				7.23812f, 29.8397f, -3.58161f, 7.25802f, 29.8901f, -3.55661f, 7.28302f, 29.9337f, -3.81401f, 7.15702f,
				30.0331f, -3.52211f, 7.31112f, 29.9671f, -3.48101f, 7.34002f, 29.9879f, -3.43641f, 7.36772f, 29.9952f,
				-3.36381f, 7.31542f, 29.6006f, -2.99941f, 7.54492f, 29.6731f, -2.99691f, 7.57662f, 29.799f, -3.24981f,
				7.41732f, 29.7488f, -3.02341f, 7.59142f, 29.9247f, -3.31181f, 7.42722f, 29.9404f, -3.07701f, 7.58812f,
				30.0414f, -3.34931f, 7.41252f, 29.9704f, -3.39161f, 7.39242f, 29.9891f, -3.75591f, 7.21512f, 30.1346f,
				-3.15421f, 7.56722f, 30.1413f, -3.67511f, 7.28092f, 30.2128f, -3.24971f, 7.52992f, 30.2176f, -3.57711f,
				7.34992f, 30.2625f, -3.35691f, 7.47882f, 30.265f, -3.46861f, 7.41742f, 30.2803f, -4.59281f, 9.07402f,
				28.8682f, -4.70011f, 9.02292f, 28.9156f, -4.54561f, 8.99292f, 28.8877f, 0.723793f, -0.0669831f,
				31.6974f, 0.698793f, -0.0919831f, 31.6538f, 0.685393f, -0.111883f, 31.6035f, -4.10191f, 9.47402f,
				29.3437f, -4.12831f, 9.48882f, 29.4693f, 1.03059f, 0.0673169f, 31.5125f, 0.827293f, -0.0869831f,
				31.3632f, 0.872093f, -0.0623831f, 31.357f, -4.13581f, 9.39582f, 29.1f, -4.10441f, 9.44232f, 29.2177f,
				-4.25921f, 9.46452f, 29.686f, -4.35461f, 9.42722f, 29.7623f, 0.784993f, -0.107083f, 31.3819f,
				-4.48111f, 9.13542f, 28.8529f, -4.78011f, 9.17832f, 29.7575f, -4.86091f, 9.11252f, 29.6793f, -4.57361f,
				9.31482f, 29.825f, -4.68211f, 9.24732f, 29.8072f, 0.716893f, -0.130083f, 31.4514f, 0.695293f,
				-0.131383f, 31.4985f, 0.684293f, -0.125283f, 31.5503f, -4.19381f, 9.33772f, 28.9986f, 0.758293f,
				-0.0389831f, 31.7308f, 0.799393f, -0.0099831f, 31.7517f, -4.92641f, 8.96142f, 29.2085f, -4.87271f,
				8.96462f, 29.0918f, -4.79551f, 8.98562f, 28.9919f, -4.91891f, 9.05442f, 29.5778f, -4.18201f, 9.48552f,
				29.5861f, -4.46191f, 9.37622f, 29.8097f, 0.916593f, -0.0346831f, 31.3643f, 0.931093f, 0.0625169f,
				31.7341f, 0.968493f, 0.0771169f, 31.7042f, 0.843893f, 0.0177169f, 31.759f, 0.888693f, 0.0423169f,
				31.7528f, 0.747493f, -0.121783f, 31.4118f };
		ByteBuffer vbb = ByteBuffer.allocateDirect(valueVertex.length * 4);
		vbb.order(ByteOrder.nativeOrder());
		mVertexBuffer[3] = vbb.asFloatBuffer();
		mVertexBuffer[3].put(valueVertex);
		mVertexBuffer[3].position(0);
	}

	public void setVertex4() {
		float valueVertex[] = { 0.621153f, -5.68988f, 40.6754f, 0.125153f, -5.93498f, 40.8641f, 0.204453f, -5.68988f,
				40.7303f, 1.50675f, -5.93498f, 37.9406f, 1.34285f, -5.68988f, 37.9819f, 1.00945f, -5.68988f, 37.726f,
				-1.40555f, -5.68988f, 39.1203f, -1.45575f, -5.93498f, 38.5813f, -1.35075f, -5.68988f, 38.7036f,
				-0.589547f, -5.93498f, 37.5597f, -0.600547f, -5.68988f, 37.726f, -0.934047f, -5.68988f, 37.9819f,
				-1.26055f, -5.93498f, 38.1683f, -1.18985f, -5.68988f, 38.3153f, 0.295853f, -5.93498f, 37.3682f,
				-0.212247f, -5.68988f, 37.5652f, -0.159447f, -5.93498f, 37.4057f, 1.76685f, -5.93498f, 38.3161f,
				1.75955f, -5.68988f, 38.7036f, 1.95835f, -5.93498f, 39.2015f, 1.81445f, -5.68988f, 39.1203f, 1.59875f,
				-5.68988f, 39.9253f, 1.68155f, -5.93498f, 40.064f, 1.38605f, -5.93498f, 40.4125f, 1.87675f, -5.93498f,
				39.651f, 1.75955f, -5.68988f, 39.537f, 1.15835f, -5.93498f, 37.6451f, 0.621153f, -5.68988f, 37.5652f,
				-1.53745f, -5.93498f, 39.0308f, -0.965147f, -5.93498f, 37.8198f, 1.01055f, -5.93498f, 40.6726f,
				0.580453f, -5.93498f, 40.8266f, 1.00945f, -5.68988f, 40.5146f, 1.34285f, -5.68988f, 40.2587f, 1.59875f,
				-5.68988f, 38.3153f, 1.92095f, -5.93498f, 38.7462f, 0.745353f, -5.93498f, 37.4499f, 0.204453f,
				-5.68988f, 37.5103f, -1.35075f, -5.68988f, 39.537f, -1.49995f, -5.93498f, 39.4861f, -1.18985f,
				-5.68988f, 39.9253f, -1.34595f, -5.93498f, 39.9162f, -0.934047f, -5.68988f, 40.2587f, -1.08585f,
				-5.93498f, 40.2918f, -0.600547f, -5.68988f, 40.5146f, -0.737447f, -5.93498f, 40.5872f, -0.212247f,
				-5.68988f, 40.6754f, -0.324347f, -5.93498f, 40.7824f, 0.621153f, -5.68988f, 37.5652f, -0.212247f,
				-5.68988f, 37.5652f, 0.204453f, -5.68988f, 37.5103f, 1.00945f, -5.68988f, 37.726f, -0.600547f,
				-5.68988f, 37.726f, 1.34285f, -5.68988f, 37.9819f, -0.934047f, -5.68988f, 37.9819f, 1.59875f,
				-5.68988f, 38.3153f, -1.18985f, -5.68988f, 38.3153f, 1.75955f, -5.68988f, 38.7036f, -1.35075f,
				-5.68988f, 38.7036f, 1.81445f, -5.68988f, 39.1203f, -1.40555f, -5.68988f, 39.1203f, 1.75955f,
				-5.68988f, 39.537f, -1.35075f, -5.68988f, 39.537f, 1.59875f, -5.68988f, 39.9253f, -1.18985f, -5.68988f,
				39.9253f, 1.34285f, -5.68988f, 40.2587f, -0.934047f, -5.68988f, 40.2587f, 1.00945f, -5.68988f,
				40.5146f, -0.600547f, -5.68988f, 40.5146f, 0.621153f, -5.68988f, 40.6754f, -0.212247f, -5.68988f,
				40.6754f, 0.204453f, -5.68988f, 40.7303f, 0.838953f, -1.93988f, 38.7603f, 1.76685f, -4.43988f,
				38.3161f, 1.50675f, -4.43988f, 37.9406f, 0.719753f, -1.93988f, 38.605f, 1.15835f, -4.43988f, 37.6451f,
				0.564453f, -1.93988f, 38.4858f, 0.745353f, -4.43988f, 37.4499f, 0.383553f, -1.93988f, 38.4109f,
				0.295853f, -4.43988f, 37.3682f, 0.189453f, -1.93988f, 38.3853f, -0.159447f, -4.43988f, 37.4057f,
				-0.00474692f, -1.93988f, 38.4109f, -0.589547f, -4.43988f, 37.5597f, -0.185547f, -1.93988f, 38.4858f,
				-0.965147f, -4.43988f, 37.8198f, -0.340947f, -1.93988f, 38.605f, -1.26055f, -4.43988f, 38.1683f,
				-0.460147f, -1.93988f, 38.7603f, -1.45575f, -4.43988f, 38.5813f, -0.535047f, -1.93988f, 38.9412f,
				-1.53745f, -4.43988f, 39.0308f, -0.560547f, -1.93988f, 39.1353f, -1.49995f, -4.43988f, 39.4861f,
				-0.535047f, -1.93988f, 39.3294f, -1.34595f, -4.43988f, 39.9162f, -0.460147f, -1.93988f, 39.5103f,
				-1.08585f, -4.43988f, 40.2918f, -0.340947f, -1.93988f, 39.6656f, -0.737447f, -4.43988f, 40.5872f,
				-0.185547f, -1.93988f, 39.7848f, 0.913853f, -1.93988f, 38.9412f, 1.92095f, -4.43988f, 38.7462f,
				-0.324347f, -4.43988f, 40.7824f, -0.00474692f, -1.93988f, 39.8597f, 0.125153f, -4.43988f, 40.8641f,
				0.189453f, -1.93988f, 39.8853f, 0.580453f, -4.43988f, 40.8266f, 0.383553f, -1.93988f, 39.8597f,
				1.01055f, -4.43988f, 40.6726f, 0.564453f, -1.93988f, 39.7848f, 1.38605f, -4.43988f, 40.4125f,
				0.719753f, -1.93988f, 39.6656f, 1.68155f, -4.43988f, 40.064f, 0.838953f, -1.93988f, 39.5103f, 1.87675f,
				-4.43988f, 39.651f, 0.913853f, -1.93988f, 39.3294f, 1.95835f, -4.43988f, 39.2015f, 0.939453f,
				-1.93988f, 39.1353f, -0.159447f, -5.93498f, 37.4057f, -0.589547f, -5.93498f, 37.5597f, 1.50675f,
				-5.93498f, 37.9406f, 1.15835f, -5.93498f, 37.6451f, 1.38605f, -5.93498f, 40.4125f, 1.01055f, -5.93498f,
				40.6726f, 0.295853f, -5.93498f, 37.3682f, 1.76685f, -5.93498f, 38.3161f, -0.965147f, -5.93498f,
				37.8198f, -1.34595f, -5.93498f, 39.9162f, -1.08585f, -5.93498f, 40.2918f, -1.26055f, -5.93498f,
				38.1683f, 0.745353f, -5.93498f, 37.4499f, 0.580453f, -5.93498f, 40.8266f, 0.125153f, -5.93498f,
				40.8641f, -1.45575f, -5.93498f, 38.5813f, -1.53745f, -5.93498f, 39.0308f, -0.737447f, -5.93498f,
				40.5872f, -0.324347f, -5.93498f, 40.7824f, 1.68155f, -5.93498f, 40.064f, -1.49995f, -5.93498f,
				39.4861f, 1.87675f, -5.93498f, 39.651f, 1.95835f, -5.93498f, 39.2015f, 1.92095f, -5.93498f, 38.7462f };
		ByteBuffer vbb = ByteBuffer.allocateDirect(valueVertex.length * 4);
		vbb.order(ByteOrder.nativeOrder());
		mVertexBuffer[4] = vbb.asFloatBuffer();
		mVertexBuffer[4].put(valueVertex);
		mVertexBuffer[4].position(0);
	}

	public void setVertex5() {
		float valueVertex[] = { 1.23355f, -0.593081f, 35.6607f, 1.23355f, 5.08182f, 41.6607f, 1.23355f, -0.593081f,
				41.6607f, 1.23355f, -0.504881f, 35.6607f, 1.23355f, -0.00538112f, 35.6607f, 1.23355f, 2.11592f,
				35.6607f, 1.23355f, 4.82502f, 35.6607f, 1.23355f, 5.33502f, 41.6273f, 1.23355f, 5.45622f, 41.5862f,
				1.23355f, -1.05118f, 41.6607f, 1.23355f, 6.02682f, 40.9356f, 1.23355f, 5.57692f, 35.9159f, 1.23355f,
				5.45622f, 40.9356f, 1.23355f, 5.44252f, 35.8261f, 1.23355f, 5.69832f, 36.0224f, 1.23355f, 5.80492f,
				36.1439f, 1.23355f, 5.89462f, 36.2782f, 1.23355f, 5.96612f, 36.4231f, 1.23355f, 6.01802f, 36.5761f,
				1.23355f, 6.04952f, 36.7346f, 1.23355f, 6.05172f, 40.81f, 1.23355f, 6.06012f, 36.8958f, 1.23355f,
				6.06012f, 40.6823f, 1.23355f, 4.98622f, 35.6712f, 1.23355f, 5.14472f, 35.7028f, 1.23355f, 5.20952f,
				41.6523f, 1.23355f, 5.29762f, 35.7547f, 1.23355f, -1.93048f, 36.6143f, 1.23355f, -1.93988f, 40.7719f,
				1.23355f, -1.93988f, 36.7575f, 1.23355f, -1.93228f, 40.8879f, 1.23355f, -1.90958f, 41.002f, 1.23355f,
				-1.90248f, 36.4736f, 1.23355f, -1.87228f, 41.112f, 1.23355f, -1.85638f, 36.3378f, 1.23355f, -1.82078f,
				41.2163f, 1.23355f, -1.79298f, 36.2091f, 1.23355f, -1.75628f, 41.313f, 1.23355f, -1.71318f, 36.0898f,
				1.23355f, -1.67958f, 41.4004f, 1.23355f, -1.61868f, 35.9819f, 1.23355f, -1.59218f, 41.477f, 1.23355f,
				-1.51078f, 35.8873f, 1.23355f, -1.49548f, 41.5416f, 1.23355f, -1.39148f, 35.8076f, 1.23355f, -1.39128f,
				41.593f, 1.23355f, -1.26278f, 35.7442f, 1.23355f, -1.28118f, 41.6304f, 1.23355f, -1.16718f, 41.6531f,
				1.23355f, -1.12698f, 35.698f, 1.23355f, -0.986181f, 35.67f, 1.23355f, -0.843081f, 35.6607f };
		ByteBuffer vbb = ByteBuffer.allocateDirect(valueVertex.length * 4);
		vbb.order(ByteOrder.nativeOrder());
		mVertexBuffer[5] = vbb.asFloatBuffer();
		mVertexBuffer[5].put(valueVertex);
		mVertexBuffer[5].position(0);
	}

	public void setVertex6() {
		float valueVertex[] = { -0.766447f, 4.82502f, 35.6607f, -0.766447f, 1.90622f, 39.3438f, -0.766447f, 2.19352f,
				40.8834f, -0.766447f, 4.15622f, 39.3438f, -0.766447f, 2.19352f, 41.1334f, -0.766447f, 4.19352f,
				40.8834f, -0.766447f, 4.15622f, 38.5938f, -0.766447f, -0.593081f, 41.6607f, -0.766447f, 0.108119f,
				40.5426f, -0.766447f, -0.593081f, 35.6607f, -0.766447f, 0.158119f, 40.6632f, -0.766447f, 0.237519f,
				40.7668f, -0.766447f, 0.341119f, 40.8462f, -0.766447f, 0.461719f, 40.8962f, -0.766447f, 5.08182f,
				41.6607f, -0.766447f, 0.0911189f, 40.4132f, -0.766447f, -0.504881f, 35.6607f, -0.766447f, -0.00538112f,
				35.6607f, -0.766447f, 0.591119f, 40.9132f, -0.766447f, 0.720519f, 40.8962f, -0.766447f, 0.841119f,
				40.8462f, -0.766447f, 0.944619f, 40.7668f, -0.766447f, 1.02412f, 40.6632f, -0.766447f, 1.07402f,
				40.5426f, -0.766447f, 1.09112f, 40.4132f, -0.766447f, 1.09112f, 38.8771f, -0.766447f, 4.19352f,
				41.1334f, -0.766447f, 0.158119f, 38.6271f, -0.766447f, 2.11592f, 35.6607f, -0.766447f, 0.108119f,
				38.7477f, -0.766447f, 0.0911189f, 38.8771f, -0.766447f, 0.237519f, 38.5236f, -0.766447f, 0.341119f,
				38.4441f, -0.766447f, 0.461719f, 38.3942f, -0.766447f, 0.591119f, 38.3771f, -0.766447f, 0.720519f,
				38.3942f, -0.766447f, 0.841119f, 38.4441f, -0.766447f, 0.944619f, 38.5236f, -0.766447f, 1.02412f,
				38.6271f, -0.766447f, 1.07402f, 38.7477f, -0.766447f, 1.90622f, 38.5938f, -0.766447f, 0.108119f,
				40.2838f, -0.766447f, 0.108119f, 39.0065f, -0.766447f, 0.158119f, 39.1271f, -0.766447f, 0.158119f,
				40.1632f, -0.766447f, 0.237519f, 40.0597f, -0.766447f, 0.237519f, 39.2307f, -0.766447f, 0.341119f,
				39.9802f, -0.766447f, 0.341119f, 39.3101f, -0.766447f, 0.461719f, 39.9303f, -0.766447f, 0.461719f,
				39.3601f, -0.766447f, 0.591119f, 39.9132f, -0.766447f, 0.591119f, 39.3771f, -0.766447f, 0.720519f,
				39.9303f, -0.766447f, 0.720519f, 39.3601f, -0.766447f, 0.841119f, 39.3101f, -0.766447f, 0.841119f,
				39.9802f, -0.766447f, 0.944619f, 40.0597f, -0.766447f, 0.944619f, 39.2307f, -0.766447f, 1.02412f,
				39.1271f, -0.766447f, 1.02412f, 40.1632f, -0.766447f, 1.07402f, 39.0065f, -0.766447f, 1.07402f,
				40.2838f, -0.766447f, -1.28118f, 41.6304f, -0.766447f, -1.33898f, 36.9937f, -0.766447f, -1.39128f,
				41.593f, -0.766447f, -1.33048f, 37.0584f, -0.766447f, -1.30558f, 37.1187f, -0.766447f, -1.26578f,
				37.1705f, -0.766447f, -1.16718f, 41.6531f, -0.766447f, -1.21398f, 37.2102f, -0.766447f, -1.15378f,
				37.2352f, -0.766447f, -1.05118f, 41.6607f, -0.766447f, -1.08898f, 37.2437f, -0.766447f, -1.02428f,
				37.2352f, -0.766447f, -0.963981f, 37.2102f, -0.766447f, -0.912281f, 37.1705f, -0.766447f, -0.872481f,
				37.1187f, -0.766447f, -0.847581f, 37.0584f, -0.766447f, -0.838981f, 36.9937f, -0.766447f, -1.93228f,
				40.8879f, -0.766447f, -1.93988f, 36.7575f, -0.766447f, -1.93988f, 40.7719f, -0.766447f, -1.93048f,
				36.6143f, -0.766447f, -1.90958f, 41.002f, -0.766447f, -1.90248f, 36.4736f, -0.766447f, -1.87228f,
				41.112f, -0.766447f, -1.85638f, 36.3378f, -0.766447f, -1.82078f, 41.2163f, -0.766447f, -1.79298f,
				36.2091f, -0.766447f, -1.75628f, 41.313f, -0.766447f, -1.71318f, 36.0898f, -0.766447f, -1.67958f,
				41.4004f, -0.766447f, -1.61868f, 35.9819f, -0.766447f, -1.59218f, 41.477f, -0.766447f, -1.51078f,
				35.8873f, -0.766447f, -1.49548f, 41.5416f, -0.766447f, -1.39148f, 35.8076f, -0.766447f, -1.26278f,
				35.7442f, -0.766447f, -1.33048f, 36.929f, -0.766447f, -1.30558f, 36.8687f, -0.766447f, -1.26578f,
				36.8169f, -0.766447f, -1.21398f, 36.7772f, -0.766447f, -1.12698f, 35.698f, -0.766447f, -1.15378f,
				36.7522f, -0.766447f, -1.08898f, 36.7437f, -0.766447f, -0.986181f, 35.67f, -0.766447f, -1.02428f,
				36.7522f, -0.766447f, -0.963981f, 36.7772f, -0.766447f, -0.843081f, 35.6607f, -0.766447f, -0.912281f,
				36.8169f, -0.766447f, -0.872481f, 36.8687f, -0.766447f, -0.847581f, 36.929f };
		ByteBuffer vbb = ByteBuffer.allocateDirect(valueVertex.length * 4);
		vbb.order(ByteOrder.nativeOrder());
		mVertexBuffer[6] = vbb.asFloatBuffer();
		mVertexBuffer[6].put(valueVertex);
		mVertexBuffer[6].position(0);
	}

	public void setVertex7() {
		float valueVertex[] = { -0.766447f, 4.19352f, 41.1334f, -0.766447f, 2.19352f, 40.8834f, -0.766447f, 2.19352f,
				41.1334f, -0.766447f, 4.19352f, 40.8834f, -0.516447f, 4.15622f, 39.3438f, -0.766447f, 4.15622f,
				38.5938f, -0.516447f, 4.15622f, 38.5938f, -0.766447f, 4.15622f, 39.3438f, -0.766447f, 1.90622f,
				39.3438f, -0.516447f, 1.90622f, 39.3438f, -0.516447f, 1.90622f, 38.5938f, -0.766447f, 1.90622f,
				38.5938f, -0.766447f, 5.08182f, 41.6607f, -0.766447f, 4.98622f, 35.6712f, -0.766447f, 4.82502f,
				35.6607f, -0.766447f, 5.14472f, 35.7028f, -0.766447f, 5.20952f, 41.6523f, -0.766447f, 5.29762f,
				35.7547f, -0.766447f, 5.33502f, 41.6273f, -0.766447f, 5.44252f, 35.8261f, -0.766447f, 5.45622f,
				41.5862f, -0.766447f, 5.57692f, 35.9159f, -0.766447f, 5.57092f, 41.5296f, -0.766447f, 5.67732f,
				41.4585f, -0.766447f, 5.69832f, 36.0224f, -0.766447f, 5.77362f, 41.3741f, -0.766447f, 5.80492f,
				36.1439f, -0.766447f, 5.85792f, 41.2779f, -0.766447f, 5.89462f, 36.2782f, -0.766447f, 5.92902f,
				41.1715f, -0.766447f, 5.96612f, 36.4231f, -0.766447f, 5.98562f, 41.0567f, -0.766447f, 6.01802f,
				36.5761f, -0.766447f, 6.02682f, 40.9356f, -0.766447f, 6.04952f, 36.7346f, -0.766447f, 6.05172f, 40.81f,
				-0.766447f, 6.06012f, 36.8958f, -0.766447f, 6.06012f, 40.6823f };
		ByteBuffer vbb = ByteBuffer.allocateDirect(valueVertex.length * 4);
		vbb.order(ByteOrder.nativeOrder());
		mVertexBuffer[7] = vbb.asFloatBuffer();
		mVertexBuffer[7].put(valueVertex);
		mVertexBuffer[7].position(0);
	}

	public void setVertex8() {
		float valueVertex[] = { -0.766447f, 0.841119f, 39.9802f, -1.01645f, 0.720519f, 39.9303f, -1.01645f, 0.841119f,
				39.9802f, -0.766447f, 0.720519f, 39.9303f, -0.766447f, 0.237519f, 40.7668f, -1.01645f, 0.341119f,
				40.8462f, -1.01645f, 0.237519f, 40.7668f, -0.766447f, 0.341119f, 40.8462f, -0.766447f, 0.158119f,
				40.6632f, -1.01645f, 0.108119f, 40.5426f, -0.766447f, 0.108119f, 40.5426f, -1.01645f, 0.158119f,
				40.6632f, -0.766447f, 0.108119f, 40.2838f, -1.01645f, 0.158119f, 40.1632f, -0.766447f, 0.158119f,
				40.1632f, -1.01645f, 0.108119f, 40.2838f, -1.01645f, 0.461719f, 40.8962f, -0.766447f, 0.461719f,
				40.8962f, -1.01645f, 1.02412f, 40.1632f, -0.766447f, 0.944619f, 40.0597f, -1.01645f, 0.944619f,
				40.0597f, -0.766447f, 1.02412f, 40.1632f, -1.01645f, 0.591119f, 40.9132f, -0.766447f, 0.591119f,
				40.9132f, -0.766447f, 0.720519f, 40.8962f, -1.01645f, 0.841119f, 40.8462f, -1.01645f, 0.720519f,
				40.8962f, -0.766447f, 0.841119f, 40.8462f, -1.01645f, 1.07402f, 40.5426f, -0.766447f, 1.09112f,
				40.4132f, -1.01645f, 1.09112f, 40.4132f, -0.766447f, 1.07402f, 40.5426f, -1.01645f, 0.944619f,
				40.7668f, -0.766447f, 1.02412f, 40.6632f, -1.01645f, 1.02412f, 40.6632f, -0.766447f, 0.944619f,
				40.7668f, -1.01645f, 0.0911189f, 40.4132f, -1.01645f, 0.237519f, 40.0597f, -1.01645f, 0.341119f,
				39.9802f, -1.01645f, 0.461719f, 39.9303f, -1.01645f, 0.591119f, 39.9132f, -1.01645f, 1.07402f,
				40.2838f, -0.766447f, 1.07402f, 40.2838f, -0.766447f, 0.591119f, 39.9132f, -0.766447f, 0.461719f,
				39.9303f, -0.766447f, 0.341119f, 39.9802f, -0.766447f, 0.237519f, 40.0597f, -0.766447f, 0.0911189f,
				40.4132f };
		ByteBuffer vbb = ByteBuffer.allocateDirect(valueVertex.length * 4);
		vbb.order(ByteOrder.nativeOrder());
		mVertexBuffer[8] = vbb.asFloatBuffer();
		mVertexBuffer[8].put(valueVertex);
		mVertexBuffer[8].position(0);
	}

	public void setVertex9() {
		float valueVertex[] = { -0.766447f, 0.108119f, 38.7477f, -1.01645f, 0.158119f, 38.6271f, -0.766447f, 0.158119f,
				38.6271f, -1.01645f, 0.108119f, 38.7477f, -1.01645f, 0.237519f, 38.5236f, -0.766447f, 0.237519f,
				38.5236f, -0.766447f, 0.341119f, 38.4441f, -1.01645f, 0.341119f, 38.4441f, -0.766447f, 0.461719f,
				38.3942f, -1.01645f, 0.461719f, 38.3942f, -0.766447f, 0.591119f, 38.3771f, -1.01645f, 0.591119f,
				38.3771f, -1.01645f, 0.108119f, 39.0065f, -1.01645f, 0.0911189f, 38.8771f, -1.01645f, 0.158119f,
				39.1271f, -1.01645f, 0.237519f, 39.2307f, -1.01645f, 0.341119f, 39.3101f, -1.01645f, 0.461719f,
				39.3601f, -1.01645f, 0.591119f, 39.3771f, -1.01645f, 0.720519f, 39.3601f, -1.01645f, 0.720519f,
				38.3942f, -1.01645f, 0.841119f, 39.3101f, -1.01645f, 0.841119f, 38.4441f, -1.01645f, 0.944619f,
				39.2307f, -1.01645f, 0.944619f, 38.5236f, -1.01645f, 1.02412f, 39.1271f, -1.01645f, 1.02412f, 38.6271f,
				-1.01645f, 1.07402f, 39.0065f, -1.01645f, 1.07402f, 38.7477f, -1.01645f, 1.09112f, 38.8771f,
				-0.766447f, 1.02412f, 38.6271f, -0.766447f, 1.07402f, 38.7477f, -0.766447f, 1.09112f, 38.8771f,
				-0.766447f, 1.07402f, 39.0065f, -0.766447f, 1.02412f, 39.1271f, -0.766447f, 0.944619f, 39.2307f,
				-0.766447f, 0.841119f, 39.3101f, -0.766447f, 0.720519f, 39.3601f, -0.766447f, 0.591119f, 39.3771f,
				-0.766447f, 0.461719f, 39.3601f, -0.766447f, 0.341119f, 39.3101f, -0.766447f, 0.720519f, 38.3942f,
				-0.766447f, 0.841119f, 38.4441f, -0.766447f, 0.944619f, 38.5236f, -0.766447f, 0.237519f, 39.2307f,
				-0.766447f, 0.158119f, 39.1271f, -0.766447f, 0.108119f, 39.0065f, -0.766447f, 0.0911189f, 38.8771f };
		ByteBuffer vbb = ByteBuffer.allocateDirect(valueVertex.length * 4);
		vbb.order(ByteOrder.nativeOrder());
		mVertexBuffer[9] = vbb.asFloatBuffer();
		mVertexBuffer[9].put(valueVertex);
		mVertexBuffer[9].position(0);
	}

	public void setVertex10() {
		float valueVertex[] = { -1.01645f, -0.847581f, 36.929f, -0.766447f, -0.872481f, 36.8687f, -1.01645f,
				-0.872481f, 36.8687f, -0.766447f, -0.847581f, 36.929f, -0.766447f, -0.912281f, 36.8169f, -1.01645f,
				-0.963981f, 36.7772f, -1.01645f, -0.912281f, 36.8169f, -0.766447f, -0.963981f, 36.7772f, -0.766447f,
				-1.21398f, 37.2102f, -1.01645f, -1.15378f, 37.2352f, -1.01645f, -1.21398f, 37.2102f, -0.766447f,
				-1.15378f, 37.2352f, -1.01645f, -0.872481f, 37.1187f, -0.766447f, -0.847581f, 37.0584f, -1.01645f,
				-0.847581f, 37.0584f, -0.766447f, -0.872481f, 37.1187f, -0.766447f, -1.21398f, 36.7772f, -1.01645f,
				-1.26578f, 36.8169f, -1.01645f, -1.21398f, 36.7772f, -0.766447f, -1.26578f, 36.8169f, -0.766447f,
				-1.33048f, 36.929f, -1.01645f, -1.30558f, 36.8687f, -0.766447f, -1.30558f, 36.8687f, -1.01645f,
				-1.33048f, 36.929f, -0.766447f, -0.963981f, 37.2102f, -1.01645f, -0.912281f, 37.1705f, -1.01645f,
				-0.963981f, 37.2102f, -0.766447f, -0.912281f, 37.1705f, -0.766447f, -1.33048f, 37.0584f, -1.01645f,
				-1.33898f, 36.9937f, -0.766447f, -1.33898f, 36.9937f, -1.01645f, -1.33048f, 37.0584f, -0.766447f,
				-1.30558f, 37.1187f, -1.01645f, -1.30558f, 37.1187f, -0.766447f, -1.26578f, 37.1705f, -1.01645f,
				-1.26578f, 37.1705f, -0.891447f, -1.00828f, 37.0745f, -1.01645f, -0.990081f, 37.0508f, -0.891447f,
				-0.990081f, 37.0508f, -1.01645f, -1.00828f, 37.0745f, -1.01645f, -0.978681f, 37.0233f, -0.891447f,
				-0.978681f, 37.0233f, -1.01645f, -1.16978f, 37.0745f, -0.891447f, -1.18798f, 37.0508f, -1.01645f,
				-1.18798f, 37.0508f, -0.891447f, -1.16978f, 37.0745f, -0.766447f, -1.02428f, 37.2352f, -1.01645f,
				-1.02428f, 37.2352f, -0.766447f, -0.838981f, 36.9937f, -1.01645f, -0.838981f, 36.9937f, -0.766447f,
				-1.15378f, 36.7522f, -1.01645f, -1.15378f, 36.7522f, -0.766447f, -1.08898f, 36.7437f, -1.01645f,
				-1.08898f, 36.7437f, -1.01645f, -1.03188f, 37.0926f, -0.891447f, -1.03188f, 37.0926f, -1.01645f,
				-1.27808f, 36.9937f, -1.01645f, -1.27168f, 37.0427f, -1.01645f, -1.25278f, 37.0883f, -1.01645f,
				-1.22278f, 37.1274f, -1.01645f, -1.18358f, 37.1575f, -1.01645f, -1.13798f, 37.1764f, -1.01645f,
				-1.08898f, 37.2437f, -1.01645f, -1.08898f, 37.1828f, -1.01645f, -1.04008f, 37.1764f, -1.01645f,
				-0.994481f, 37.1575f, -1.01645f, -0.955281f, 37.1274f, -1.01645f, -0.925281f, 37.0883f, -1.01645f,
				-0.906381f, 37.0427f, -1.01645f, -0.899981f, 36.9937f, -1.01645f, -1.27168f, 36.9448f, -1.01645f,
				-1.25278f, 36.8992f, -1.01645f, -1.22278f, 36.86f, -1.01645f, -1.18358f, 36.83f, -1.01645f, -1.13798f,
				36.8111f, -1.01645f, -1.08898f, 36.8046f, -1.01645f, -1.04008f, 36.8111f, -1.01645f, -1.02428f,
				36.7522f, -1.01645f, -0.994481f, 36.83f, -1.01645f, -0.955281f, 36.86f, -1.01645f, -0.925281f,
				36.8992f, -1.01645f, -0.906381f, 36.9448f, -0.766447f, -1.08898f, 37.2437f, -1.01645f, -1.20328f,
				36.9937f, -0.891447f, -1.19938f, 36.9642f, -1.01645f, -1.19938f, 36.9642f, -0.891447f, -1.20328f,
				36.9937f, -0.891447f, -0.974781f, 36.9937f, -1.01645f, -0.978681f, 36.9642f, -0.891447f, -0.978681f,
				36.9642f, -1.01645f, -0.974781f, 36.9937f, -0.891447f, -1.19938f, 37.0233f, -1.01645f, -1.19938f,
				37.0233f, -0.766447f, -1.02428f, 36.7522f, -0.891447f, -1.14618f, 36.8948f, -1.01645f, -1.11858f,
				36.8834f, -1.01645f, -1.14618f, 36.8948f, -0.891447f, -1.11858f, 36.8834f, -1.01645f, -1.14618f,
				37.0926f, -1.01645f, -1.11858f, 37.104f, -1.01645f, -1.08898f, 37.1079f, -1.01645f, -1.05948f, 37.104f,
				-1.01645f, -1.18798f, 36.9366f, -1.01645f, -1.16978f, 36.913f, -1.01645f, -1.08898f, 36.8795f,
				-1.01645f, -1.05948f, 36.8834f, -1.01645f, -1.03188f, 36.8948f, -1.01645f, -1.00828f, 36.913f,
				-1.01645f, -0.990081f, 36.9366f, -0.891447f, -1.16978f, 36.913f, -0.891447f, -1.18798f, 36.9366f,
				-0.891447f, -1.08898f, 36.8795f, -0.891447f, -1.05948f, 36.8834f, -0.891447f, -1.14618f, 37.0926f,
				-0.891447f, -1.11858f, 37.104f, -0.891447f, -1.08898f, 37.1079f, -0.891447f, -1.05948f, 37.104f,
				-0.891447f, -1.03188f, 36.8948f, -0.891447f, -1.00828f, 36.913f, -0.891447f, -0.990081f, 36.9366f };
		ByteBuffer vbb = ByteBuffer.allocateDirect(valueVertex.length * 4);
		vbb.order(ByteOrder.nativeOrder());
		mVertexBuffer[10] = vbb.asFloatBuffer();
		mVertexBuffer[10].put(valueVertex);
		mVertexBuffer[10].position(0);
	}

	public void setVertex11() {
		float valueVertex[] = { -0.766447f, -1.93988f, 36.7575f, -0.766447f, -1.93988f, 40.7719f, 1.23355f, -1.93988f,
				36.7575f, 0.719753f, -1.93988f, 38.605f, 0.838953f, -1.93988f, 38.7603f, 0.913853f, -1.93988f,
				38.9412f, 1.23355f, -1.93988f, 40.7719f, 0.564453f, -1.93988f, 38.4858f, 0.383553f, -1.93988f,
				38.4109f, 0.189453f, -1.93988f, 38.3853f, 0.939453f, -1.93988f, 39.1353f, 0.913853f, -1.93988f,
				39.3294f, 0.838953f, -1.93988f, 39.5103f, 0.719753f, -1.93988f, 39.6656f, 0.564453f, -1.93988f,
				39.7848f, 0.383553f, -1.93988f, 39.8597f, 0.189453f, -1.93988f, 39.8853f, -0.560547f, -1.93988f,
				39.1353f, -0.535047f, -1.93988f, 38.9412f, -0.460147f, -1.93988f, 38.7603f, -0.340947f, -1.93988f,
				38.605f, -0.185547f, -1.93988f, 38.4858f, -0.00474692f, -1.93988f, 38.4109f, -0.535047f, -1.93988f,
				39.3294f, -0.460147f, -1.93988f, 39.5103f, -0.340947f, -1.93988f, 39.6656f, -0.185547f, -1.93988f,
				39.7848f, -0.00474692f, -1.93988f, 39.8597f };
		ByteBuffer vbb = ByteBuffer.allocateDirect(valueVertex.length * 4);
		vbb.order(ByteOrder.nativeOrder());
		mVertexBuffer[11] = vbb.asFloatBuffer();
		mVertexBuffer[11].put(valueVertex);
		mVertexBuffer[11].position(0);
	}

	public void setVertex12() {
		float valueVertex[] = { 1.23355f, 5.08182f, 41.6607f, 1.23355f, -0.593081f, 41.6607f, -0.766447f, 5.08182f,
				41.6607f, -0.766447f, -0.593081f, 41.6607f, 1.23355f, 5.33502f, 41.6273f, -0.766447f, 5.45622f,
				41.5862f, -0.766447f, 5.33502f, 41.6273f, 1.23355f, 5.45622f, 41.5862f, 1.23355f, -1.05118f, 41.6607f,
				-0.766447f, -1.05118f, 41.6607f, 1.23355f, 6.52682f, 41.5862f, 1.23355f, 5.20952f, 41.6523f,
				-0.766447f, 5.20952f, 41.6523f, -0.766447f, 6.52682f, 41.5862f };
		ByteBuffer vbb = ByteBuffer.allocateDirect(valueVertex.length * 4);
		vbb.order(ByteOrder.nativeOrder());
		mVertexBuffer[12] = vbb.asFloatBuffer();
		mVertexBuffer[12].put(valueVertex);
		mVertexBuffer[12].position(0);
	}

	public void setVertex13() {
		float valueVertex[] = { -0.766447f, -0.593081f, 35.6607f, 1.23355f, -0.593081f, 35.6607f, 1.23355f, -0.593081f,
				41.6607f, -0.766447f, -0.593081f, 41.6607f };
		ByteBuffer vbb = ByteBuffer.allocateDirect(valueVertex.length * 4);
		vbb.order(ByteOrder.nativeOrder());
		mVertexBuffer[13] = vbb.asFloatBuffer();
		mVertexBuffer[13].put(valueVertex);
		mVertexBuffer[13].position(0);
	}

	public void setVertex14() {
		float valueVertex[] = { -0.766447f, 6.02682f, 40.9356f, 1.23355f, 6.05172f, 40.81f, -0.766447f, 6.05172f,
				40.81f, 1.23355f, 6.02682f, 40.9356f, 0.292453f, 6.02682f, 40.9356f, 1.23355f, 6.06012f, 40.6823f,
				-0.766447f, 6.06012f, 40.6823f, -0.766447f, 6.52682f, 41.5862f, -0.766447f, 5.57092f, 41.5296f,
				-0.766447f, 5.45622f, 41.5862f, -0.766447f, 5.67732f, 41.4585f, -0.766447f, 5.77362f, 41.3741f,
				-0.766447f, 5.85792f, 41.2779f, -0.766447f, 5.92902f, 41.1715f, -0.766447f, 5.98562f, 41.0567f,
				-0.766447f, 6.52682f, 40.9356f, 1.23355f, 5.45622f, 41.5862f, 1.23355f, 5.57092f, 41.5296f, 1.23355f,
				6.52682f, 41.5862f, 1.23355f, 5.67732f, 41.4585f, 1.23355f, 5.77362f, 41.3741f, 1.23355f, 5.85792f,
				41.2779f, 1.23355f, 5.92902f, 41.1715f, 1.23355f, 5.98562f, 41.0567f, 1.23355f, 6.02682f, 40.9356f,
				1.23355f, 6.52682f, 40.9356f, 1.23355f, 5.45622f, 40.9356f, 1.23355f, 5.67732f, 41.4585f, -0.766447f,
				5.77362f, 41.3741f, -0.766447f, 5.67732f, 41.4585f, 1.23355f, 5.77362f, 41.3741f, 1.23355f, 5.45622f,
				41.5862f, -0.766447f, 5.57092f, 41.5296f, -0.766447f, 5.45622f, 41.5862f, 1.23355f, 5.57092f, 41.5296f,
				-0.766447f, 5.85792f, 41.2779f, 1.23355f, 5.92902f, 41.1715f, -0.766447f, 5.92902f, 41.1715f, 1.23355f,
				5.85792f, 41.2779f, -0.766447f, 5.98562f, 41.0567f, 0.292453f, 6.02682f, 40.9356f, -0.766447f,
				6.02682f, 40.9356f, 1.23355f, 6.02682f, 40.9356f, 1.23355f, 5.98562f, 41.0567f, 0.371853f, 6.02682f,
				40.946f, 0.213053f, 6.02682f, 40.946f, 0.445853f, 6.02682f, 40.9767f, 0.139053f, 6.02682f, 40.9767f,
				0.509453f, 6.02682f, 41.0254f, 0.0754531f, 6.02682f, 41.0254f, 0.558253f, 6.02682f, 41.089f,
				0.0266531f, 6.02682f, 41.089f, -0.00394692f, 6.02682f, 41.163f, 0.588853f, 6.02682f, 41.163f,
				0.599353f, 6.02682f, 41.2424f, -0.0144469f, 6.02682f, 41.2424f, 0.588853f, 6.02682f, 41.3219f,
				-0.00394692f, 6.02682f, 41.3219f, 0.558253f, 6.02682f, 41.3959f, 0.0266531f, 6.02682f, 41.3959f,
				0.509453f, 6.02682f, 41.4594f, 0.0754531f, 6.02682f, 41.4594f, 0.445853f, 6.02682f, 41.5082f,
				0.139053f, 6.02682f, 41.5082f, 0.371853f, 6.02682f, 41.5388f, 0.213053f, 6.02682f, 41.5388f, 0.292453f,
				6.02682f, 41.5493f, 1.23355f, 6.52682f, 40.9356f, 0.292453f, 6.52682f, 40.9356f, 1.23355f, -1.87228f,
				41.112f, -0.766447f, -1.90958f, 41.002f, 1.23355f, -1.90958f, 41.002f, -0.766447f, -1.87228f, 41.112f,
				1.23355f, -1.93228f, 40.8879f, -0.766447f, -1.93988f, 40.7719f, 1.23355f, -1.93988f, 40.7719f,
				-0.766447f, -1.93228f, 40.8879f, 1.23355f, -1.28118f, 41.6304f, -0.766447f, -1.16718f, 41.6531f,
				-0.766447f, -1.28118f, 41.6304f, 1.23355f, -1.16718f, 41.6531f, 1.23355f, -1.75628f, 41.313f,
				-0.766447f, -1.82078f, 41.2163f, 1.23355f, -1.82078f, 41.2163f, -0.766447f, -1.75628f, 41.313f,
				1.23355f, -1.39128f, 41.593f, -0.766447f, -1.39128f, 41.593f, 1.23355f, -1.59218f, 41.477f, -0.766447f,
				-1.49548f, 41.5416f, -0.766447f, -1.59218f, 41.477f, 1.23355f, -1.49548f, 41.5416f, -0.766447f,
				-1.05118f, 41.6607f, 1.23355f, -1.05118f, 41.6607f, 1.23355f, -1.67958f, 41.4004f, -0.766447f,
				-1.67958f, 41.4004f };
		ByteBuffer vbb = ByteBuffer.allocateDirect(valueVertex.length * 4);
		vbb.order(ByteOrder.nativeOrder());
		mVertexBuffer[14] = vbb.asFloatBuffer();
		mVertexBuffer[14].put(valueVertex);
		mVertexBuffer[14].position(0);
	}

	public void setVertex15() {
		float valueVertex[] = { 1.23355f, -1.12698f, 35.698f, -0.766447f, -1.26278f, 35.7442f, -0.766447f, -1.12698f,
				35.698f, 1.23355f, -1.26278f, 35.7442f, 1.23355f, -0.843081f, 35.6607f, -0.766447f, -0.986181f, 35.67f,
				-0.766447f, -0.843081f, 35.6607f, 1.23355f, -0.986181f, 35.67f, -0.766447f, -1.39148f, 35.8076f,
				1.23355f, -1.39148f, 35.8076f, 1.23355f, -1.85638f, 36.3378f, -0.766447f, -1.79298f, 36.2091f,
				1.23355f, -1.79298f, 36.2091f, -0.766447f, -1.85638f, 36.3378f, 1.23355f, -1.90248f, 36.4736f,
				-0.766447f, -1.90248f, 36.4736f, -0.766447f, -1.51078f, 35.8873f, 1.23355f, -1.51078f, 35.8873f,
				1.23355f, -1.93048f, 36.6143f, -0.766447f, -1.93048f, 36.6143f, 1.23355f, -1.93988f, 36.7575f,
				-0.766447f, -1.93988f, 36.7575f, -0.766447f, -1.71318f, 36.0898f, 1.23355f, -1.71318f, 36.0898f,
				-0.766447f, -1.61868f, 35.9819f, 1.23355f, -1.61868f, 35.9819f };
		ByteBuffer vbb = ByteBuffer.allocateDirect(valueVertex.length * 4);
		vbb.order(ByteOrder.nativeOrder());
		mVertexBuffer[15] = vbb.asFloatBuffer();
		mVertexBuffer[15].put(valueVertex);
		mVertexBuffer[15].position(0);
	}

	public void setFace0() {
		byte valueFace[] = { (byte) 0, (byte) 1, (byte) 2, (byte) 1, (byte) 0, (byte) 3, (byte) 4, (byte) 5, (byte) 6,
				(byte) 5, (byte) 4, (byte) 7, (byte) 6, (byte) 8, (byte) 9, (byte) 8, (byte) 6, (byte) 5, (byte) 9,
				(byte) 10, (byte) 11, (byte) 10, (byte) 9, (byte) 8, (byte) 12, (byte) 13, (byte) 14, (byte) 13,
				(byte) 12, (byte) 15, (byte) 16, (byte) 15, (byte) 12, (byte) 15, (byte) 16, (byte) 17, (byte) 18,
				(byte) 17, (byte) 16, (byte) 17, (byte) 18, (byte) 19, (byte) 20, (byte) 19, (byte) 18, (byte) 19,
				(byte) 20, (byte) 21, (byte) 22, (byte) 21, (byte) 20, (byte) 21, (byte) 22, (byte) 23, (byte) 7,
				(byte) 24, (byte) 4, (byte) 24, (byte) 7, (byte) 25, (byte) 25, (byte) 26, (byte) 24, (byte) 26,
				(byte) 25, (byte) 27, (byte) 27, (byte) 28, (byte) 26, (byte) 28, (byte) 27, (byte) 29, (byte) 29,
				(byte) 30, (byte) 28, (byte) 30, (byte) 29, (byte) 31, (byte) 32, (byte) 33, (byte) 34, (byte) 33,
				(byte) 32, (byte) 35, (byte) 25, (byte) 5, (byte) 7, (byte) 5, (byte) 25, (byte) 8, (byte) 8,
				(byte) 25, (byte) 27, (byte) 8, (byte) 27, (byte) 10, (byte) 10, (byte) 27, (byte) 36, (byte) 36,
				(byte) 27, (byte) 29, (byte) 36, (byte) 29, (byte) 37, (byte) 37, (byte) 29, (byte) 31, (byte) 37,
				(byte) 31, (byte) 38, (byte) 38, (byte) 31, (byte) 39, (byte) 38, (byte) 39, (byte) 40, (byte) 40,
				(byte) 39, (byte) 41, (byte) 40, (byte) 41, (byte) 42, (byte) 42, (byte) 41, (byte) 14, (byte) 42,
				(byte) 14, (byte) 43, (byte) 44, (byte) 20, (byte) 22, (byte) 20, (byte) 44, (byte) 18, (byte) 18,
				(byte) 44, (byte) 16, (byte) 16, (byte) 44, (byte) 45, (byte) 16, (byte) 45, (byte) 46, (byte) 16,
				(byte) 46, (byte) 47, (byte) 16, (byte) 47, (byte) 48, (byte) 16, (byte) 48, (byte) 49, (byte) 16,
				(byte) 49, (byte) 50, (byte) 16, (byte) 50, (byte) 51, (byte) 16, (byte) 51, (byte) 52, (byte) 16,
				(byte) 52, (byte) 53, (byte) 16, (byte) 53, (byte) 54, (byte) 54, (byte) 53, (byte) 55, (byte) 54,
				(byte) 55, (byte) 56, (byte) 54, (byte) 56, (byte) 57, (byte) 58, (byte) 59, (byte) 60, (byte) 59,
				(byte) 58, (byte) 54, (byte) 54, (byte) 58, (byte) 61, (byte) 54, (byte) 61, (byte) 62, (byte) 54,
				(byte) 62, (byte) 33, (byte) 54, (byte) 33, (byte) 35, (byte) 54, (byte) 35, (byte) 63, (byte) 54,
				(byte) 63, (byte) 64, (byte) 54, (byte) 64, (byte) 65, (byte) 54, (byte) 65, (byte) 66, (byte) 54,
				(byte) 66, (byte) 67, (byte) 54, (byte) 67, (byte) 43, (byte) 54, (byte) 43, (byte) 14, (byte) 54,
				(byte) 14, (byte) 12, (byte) 54, (byte) 12, (byte) 16, (byte) 68, (byte) 61, (byte) 69, (byte) 61,
				(byte) 68, (byte) 62, (byte) 34, (byte) 62, (byte) 68, (byte) 62, (byte) 34, (byte) 33, (byte) 69,
				(byte) 58, (byte) 70, (byte) 58, (byte) 69, (byte) 61, (byte) 31, (byte) 71, (byte) 30, (byte) 71,
				(byte) 31, (byte) 39, (byte) 66, (byte) 72, (byte) 65, (byte) 72, (byte) 66, (byte) 73, (byte) 67,
				(byte) 73, (byte) 66, (byte) 73, (byte) 67, (byte) 74, (byte) 41, (byte) 71, (byte) 39, (byte) 71,
				(byte) 41, (byte) 75, (byte) 43, (byte) 74, (byte) 67, (byte) 74, (byte) 43, (byte) 76, (byte) 42,
				(byte) 76, (byte) 43, (byte) 76, (byte) 42, (byte) 77, (byte) 40, (byte) 77, (byte) 42, (byte) 77,
				(byte) 40, (byte) 78, (byte) 38, (byte) 78, (byte) 40, (byte) 78, (byte) 38, (byte) 79, (byte) 38,
				(byte) 80, (byte) 79, (byte) 80, (byte) 38, (byte) 37, (byte) 37, (byte) 81, (byte) 80, (byte) 81,
				(byte) 37, (byte) 36, (byte) 36, (byte) 11, (byte) 81, (byte) 11, (byte) 36, (byte) 10, (byte) 35,
				(byte) 82, (byte) 32, (byte) 82, (byte) 35, (byte) 63, (byte) 63, (byte) 83, (byte) 82, (byte) 83,
				(byte) 63, (byte) 64, (byte) 64, (byte) 72, (byte) 83, (byte) 72, (byte) 64, (byte) 65, (byte) 24,
				(byte) 6, (byte) 4, (byte) 6, (byte) 24, (byte) 9, (byte) 9, (byte) 24, (byte) 26, (byte) 9, (byte) 26,
				(byte) 11, (byte) 11, (byte) 26, (byte) 81, (byte) 81, (byte) 26, (byte) 28, (byte) 81, (byte) 28,
				(byte) 80, (byte) 80, (byte) 28, (byte) 30, (byte) 80, (byte) 30, (byte) 79, (byte) 79, (byte) 30,
				(byte) 71, (byte) 79, (byte) 71, (byte) 78, (byte) 78, (byte) 71, (byte) 75, (byte) 78, (byte) 75,
				(byte) 77, (byte) 77, (byte) 75, (byte) 13, (byte) 77, (byte) 13, (byte) 76, (byte) 84, (byte) 21,
				(byte) 23, (byte) 21, (byte) 84, (byte) 19, (byte) 19, (byte) 84, (byte) 17, (byte) 17, (byte) 84,
				(byte) 85, (byte) 17, (byte) 85, (byte) 86, (byte) 17, (byte) 86, (byte) 87, (byte) 17, (byte) 87,
				(byte) 88, (byte) 17, (byte) 88, (byte) 89, (byte) 17, (byte) 89, (byte) 90, (byte) 17, (byte) 90,
				(byte) 91, (byte) 17, (byte) 91, (byte) 92, (byte) 17, (byte) 92, (byte) 93, (byte) 17, (byte) 93,
				(byte) 94, (byte) 17, (byte) 94, (byte) 95, (byte) 17, (byte) 95, (byte) 96, (byte) 70, (byte) 96,
				(byte) 97, (byte) 96, (byte) 70, (byte) 69, (byte) 96, (byte) 69, (byte) 68, (byte) 96, (byte) 68,
				(byte) 34, (byte) 96, (byte) 34, (byte) 32, (byte) 96, (byte) 32, (byte) 82, (byte) 96, (byte) 82,
				(byte) 83, (byte) 96, (byte) 83, (byte) 72, (byte) 96, (byte) 72, (byte) 73, (byte) 96, (byte) 73,
				(byte) 74, (byte) 96, (byte) 74, (byte) 76, (byte) 96, (byte) 76, (byte) 13, (byte) 96, (byte) 13,
				(byte) 15, (byte) 96, (byte) 15, (byte) 17, (byte) 14, (byte) 75, (byte) 41, (byte) 75, (byte) 14,
				(byte) 13, (byte) 97, (byte) 59, (byte) 98, (byte) 59, (byte) 97, (byte) 60, (byte) 70, (byte) 60,
				(byte) 97, (byte) 60, (byte) 70, (byte) 58 };
		size[0] = valueFace.length;

		mIndexBuffer[0] = ByteBuffer.allocateDirect(valueFace.length);
		mIndexBuffer[0].put(valueFace);
		mIndexBuffer[0].position(0);
	}

	public void setFace1() {
		byte valueFace[] = { (byte) 0, (byte) 1, (byte) 2, (byte) 1, (byte) 0, (byte) 3, (byte) 4, (byte) 1, (byte) 5,
				(byte) 1, (byte) 4, (byte) 2, (byte) 4, (byte) 0, (byte) 2, (byte) 0, (byte) 4, (byte) 6, (byte) 7,
				(byte) 1, (byte) 3, (byte) 1, (byte) 7, (byte) 5, (byte) 0, (byte) 7, (byte) 3, (byte) 7, (byte) 0,
				(byte) 6, (byte) 7, (byte) 4, (byte) 5, (byte) 4, (byte) 7, (byte) 6 };
		size[1] = valueFace.length;

		mIndexBuffer[1] = ByteBuffer.allocateDirect(valueFace.length);
		mIndexBuffer[1].put(valueFace);
		mIndexBuffer[1].position(0);
	}

	public void setFace2() {
		byte valueFace[] = { (byte) 0, (byte) 1, (byte) 2, (byte) 1, (byte) 0, (byte) 3, (byte) 1, (byte) 3, (byte) 4,
				(byte) 4, (byte) 3, (byte) 5, (byte) 5, (byte) 3, (byte) 6, (byte) 7, (byte) 8, (byte) 9, (byte) 8,
				(byte) 7, (byte) 3, (byte) 3, (byte) 7, (byte) 10, (byte) 3, (byte) 10, (byte) 11, (byte) 3, (byte) 11,
				(byte) 6, (byte) 8, (byte) 12, (byte) 13, (byte) 14, (byte) 15, (byte) 3, (byte) 15, (byte) 14,
				(byte) 16, (byte) 3, (byte) 15, (byte) 17, (byte) 3, (byte) 17, (byte) 18, (byte) 3, (byte) 18,
				(byte) 19, (byte) 3, (byte) 19, (byte) 20, (byte) 3, (byte) 20, (byte) 8, (byte) 8, (byte) 20,
				(byte) 21, (byte) 8, (byte) 21, (byte) 12, (byte) 22, (byte) 23, (byte) 24, (byte) 23, (byte) 22,
				(byte) 25, (byte) 3, (byte) 26, (byte) 14, (byte) 26, (byte) 3, (byte) 27, (byte) 27, (byte) 3,
				(byte) 24, (byte) 24, (byte) 3, (byte) 22, (byte) 22, (byte) 3, (byte) 28, (byte) 28, (byte) 3,
				(byte) 25, (byte) 25, (byte) 3, (byte) 0, (byte) 25, (byte) 0, (byte) 23, (byte) 23, (byte) 0,
				(byte) 29, (byte) 29, (byte) 0, (byte) 30, (byte) 21, (byte) 18, (byte) 17, (byte) 18, (byte) 21,
				(byte) 20, (byte) 5, (byte) 10, (byte) 4, (byte) 10, (byte) 5, (byte) 11 };
		size[2] = valueFace.length;

		mIndexBuffer[2] = ByteBuffer.allocateDirect(valueFace.length);
		mIndexBuffer[2].put(valueFace);
		mIndexBuffer[2].position(0);
	}

	public void setFace3() {
		byte valueFace[] = { (byte) 0, (byte) 1, (byte) 2, (byte) 1, (byte) 0, (byte) 3, (byte) 4, (byte) 5, (byte) 6,
				(byte) 5, (byte) 4, (byte) 7, (byte) 8, (byte) 0, (byte) 9, (byte) 0, (byte) 8, (byte) 3, (byte) 10,
				(byte) 11, (byte) 12, (byte) 11, (byte) 10, (byte) 13, (byte) 14, (byte) 15, (byte) 16, (byte) 15,
				(byte) 14, (byte) 17, (byte) 18, (byte) 11, (byte) 13, (byte) 11, (byte) 18, (byte) 19, (byte) 20,
				(byte) 4, (byte) 21, (byte) 4, (byte) 20, (byte) 22, (byte) 4, (byte) 22, (byte) 7, (byte) 7,
				(byte) 22, (byte) 23, (byte) 7, (byte) 23, (byte) 24, (byte) 24, (byte) 23, (byte) 25, (byte) 24,
				(byte) 25, (byte) 26, (byte) 26, (byte) 25, (byte) 27, (byte) 27, (byte) 25, (byte) 28, (byte) 28,
				(byte) 25, (byte) 29, (byte) 28, (byte) 29, (byte) 30, (byte) 30, (byte) 29, (byte) 31, (byte) 31,
				(byte) 29, (byte) 32, (byte) 32, (byte) 29, (byte) 16, (byte) 32, (byte) 16, (byte) 33, (byte) 33,
				(byte) 16, (byte) 34, (byte) 34, (byte) 16, (byte) 35, (byte) 35, (byte) 16, (byte) 15, (byte) 35,
				(byte) 15, (byte) 36, (byte) 36, (byte) 15, (byte) 37, (byte) 37, (byte) 15, (byte) 38, (byte) 37,
				(byte) 38, (byte) 39, (byte) 39, (byte) 38, (byte) 40, (byte) 40, (byte) 38, (byte) 41, (byte) 26,
				(byte) 42, (byte) 43, (byte) 42, (byte) 26, (byte) 27, (byte) 43, (byte) 42, (byte) 12, (byte) 43,
				(byte) 12, (byte) 11, (byte) 43, (byte) 11, (byte) 19, (byte) 43, (byte) 19, (byte) 44, (byte) 44,
				(byte) 19, (byte) 45, (byte) 44, (byte) 45, (byte) 1, (byte) 44, (byte) 1, (byte) 46, (byte) 46,
				(byte) 1, (byte) 3, (byte) 46, (byte) 3, (byte) 8, (byte) 46, (byte) 8, (byte) 47, (byte) 46,
				(byte) 47, (byte) 48, (byte) 48, (byte) 47, (byte) 49, (byte) 48, (byte) 49, (byte) 50, (byte) 48,
				(byte) 50, (byte) 41, (byte) 48, (byte) 41, (byte) 38, (byte) 48, (byte) 38, (byte) 51, (byte) 48,
				(byte) 51, (byte) 52, (byte) 52, (byte) 51, (byte) 53, (byte) 52, (byte) 53, (byte) 54, (byte) 54,
				(byte) 53, (byte) 55, (byte) 54, (byte) 55, (byte) 56, (byte) 56, (byte) 55, (byte) 57, (byte) 22,
				(byte) 58, (byte) 59, (byte) 58, (byte) 22, (byte) 60, (byte) 60, (byte) 22, (byte) 20, (byte) 36,
				(byte) 61, (byte) 62, (byte) 61, (byte) 36, (byte) 37, (byte) 35, (byte) 62, (byte) 63, (byte) 62,
				(byte) 35, (byte) 36, (byte) 46, (byte) 64, (byte) 44, (byte) 64, (byte) 46, (byte) 65, (byte) 2,
				(byte) 45, (byte) 66, (byte) 45, (byte) 2, (byte) 1, (byte) 67, (byte) 27, (byte) 28, (byte) 27,
				(byte) 67, (byte) 68, (byte) 43, (byte) 69, (byte) 26, (byte) 69, (byte) 43, (byte) 70, (byte) 71,
				(byte) 54, (byte) 72, (byte) 54, (byte) 71, (byte) 52, (byte) 73, (byte) 28, (byte) 30, (byte) 28,
				(byte) 73, (byte) 67, (byte) 21, (byte) 6, (byte) 74, (byte) 6, (byte) 21, (byte) 4, (byte) 75,
				(byte) 51, (byte) 76, (byte) 51, (byte) 75, (byte) 53, (byte) 77, (byte) 55, (byte) 78, (byte) 55,
				(byte) 77, (byte) 57, (byte) 79, (byte) 33, (byte) 80, (byte) 33, (byte) 79, (byte) 32, (byte) 33,
				(byte) 81, (byte) 80, (byte) 81, (byte) 33, (byte) 34, (byte) 26, (byte) 82, (byte) 24, (byte) 82,
				(byte) 26, (byte) 69, (byte) 40, (byte) 83, (byte) 39, (byte) 83, (byte) 40, (byte) 84, (byte) 39,
				(byte) 61, (byte) 37, (byte) 61, (byte) 39, (byte) 83, (byte) 85, (byte) 16, (byte) 29, (byte) 16,
				(byte) 85, (byte) 14, (byte) 60, (byte) 74, (byte) 58, (byte) 74, (byte) 60, (byte) 20, (byte) 74,
				(byte) 20, (byte) 21, (byte) 78, (byte) 53, (byte) 75, (byte) 53, (byte) 78, (byte) 55, (byte) 23,
				(byte) 86, (byte) 25, (byte) 86, (byte) 23, (byte) 87, (byte) 34, (byte) 63, (byte) 81, (byte) 63,
				(byte) 34, (byte) 35, (byte) 6, (byte) 58, (byte) 74, (byte) 58, (byte) 6, (byte) 59, (byte) 59,
				(byte) 6, (byte) 5, (byte) 59, (byte) 5, (byte) 87, (byte) 87, (byte) 5, (byte) 82, (byte) 87,
				(byte) 82, (byte) 86, (byte) 86, (byte) 82, (byte) 69, (byte) 86, (byte) 69, (byte) 85, (byte) 85,
				(byte) 69, (byte) 70, (byte) 85, (byte) 70, (byte) 14, (byte) 14, (byte) 70, (byte) 64, (byte) 14,
				(byte) 64, (byte) 17, (byte) 17, (byte) 64, (byte) 65, (byte) 17, (byte) 65, (byte) 88, (byte) 88,
				(byte) 65, (byte) 89, (byte) 88, (byte) 89, (byte) 76, (byte) 76, (byte) 89, (byte) 71, (byte) 76,
				(byte) 71, (byte) 75, (byte) 75, (byte) 71, (byte) 72, (byte) 75, (byte) 72, (byte) 78, (byte) 78,
				(byte) 72, (byte) 90, (byte) 78, (byte) 90, (byte) 77, (byte) 90, (byte) 57, (byte) 77, (byte) 57,
				(byte) 90, (byte) 56, (byte) 25, (byte) 85, (byte) 29, (byte) 85, (byte) 25, (byte) 86, (byte) 68,
				(byte) 42, (byte) 27, (byte) 42, (byte) 68, (byte) 91, (byte) 91, (byte) 12, (byte) 42, (byte) 12,
				(byte) 91, (byte) 10, (byte) 47, (byte) 92, (byte) 49, (byte) 92, (byte) 47, (byte) 93, (byte) 50,
				(byte) 94, (byte) 41, (byte) 94, (byte) 50, (byte) 95, (byte) 17, (byte) 38, (byte) 15, (byte) 38,
				(byte) 17, (byte) 88, (byte) 88, (byte) 51, (byte) 38, (byte) 51, (byte) 88, (byte) 76, (byte) 49,
				(byte) 95, (byte) 50, (byte) 95, (byte) 49, (byte) 92, (byte) 41, (byte) 84, (byte) 40, (byte) 84,
				(byte) 41, (byte) 94, (byte) 44, (byte) 70, (byte) 43, (byte) 70, (byte) 44, (byte) 64, (byte) 23,
				(byte) 59, (byte) 87, (byte) 59, (byte) 23, (byte) 22, (byte) 7, (byte) 82, (byte) 5, (byte) 82,
				(byte) 7, (byte) 24, (byte) 72, (byte) 56, (byte) 90, (byte) 56, (byte) 72, (byte) 54, (byte) 71,
				(byte) 48, (byte) 52, (byte) 48, (byte) 71, (byte) 89, (byte) 67, (byte) 91, (byte) 68, (byte) 91,
				(byte) 67, (byte) 73, (byte) 91, (byte) 73, (byte) 10, (byte) 10, (byte) 73, (byte) 96, (byte) 10,
				(byte) 96, (byte) 13, (byte) 13, (byte) 96, (byte) 79, (byte) 13, (byte) 79, (byte) 18, (byte) 18,
				(byte) 79, (byte) 80, (byte) 18, (byte) 80, (byte) 66, (byte) 66, (byte) 80, (byte) 81, (byte) 66,
				(byte) 81, (byte) 2, (byte) 2, (byte) 81, (byte) 63, (byte) 2, (byte) 63, (byte) 0, (byte) 0,
				(byte) 63, (byte) 62, (byte) 0, (byte) 62, (byte) 9, (byte) 9, (byte) 62, (byte) 61, (byte) 9,
				(byte) 61, (byte) 93, (byte) 93, (byte) 61, (byte) 83, (byte) 93, (byte) 83, (byte) 92, (byte) 92,
				(byte) 83, (byte) 84, (byte) 92, (byte) 84, (byte) 95, (byte) 95, (byte) 84, (byte) 94, (byte) 96,
				(byte) 32, (byte) 79, (byte) 32, (byte) 96, (byte) 31, (byte) 47, (byte) 9, (byte) 93, (byte) 9,
				(byte) 47, (byte) 8, (byte) 89, (byte) 46, (byte) 48, (byte) 46, (byte) 89, (byte) 65, (byte) 66,
				(byte) 19, (byte) 18, (byte) 19, (byte) 66, (byte) 45, (byte) 96, (byte) 30, (byte) 31, (byte) 30,
				(byte) 96, (byte) 73 };
		size[3] = valueFace.length;

		mIndexBuffer[3] = ByteBuffer.allocateDirect(valueFace.length);
		mIndexBuffer[3].put(valueFace);
		mIndexBuffer[3].position(0);
	}

	public void setFace4() {
		byte valueFace[] = { (byte) 0, (byte) 1, (byte) 2, (byte) 3, (byte) 4, (byte) 5, (byte) 6, (byte) 7, (byte) 8,
				(byte) 9, (byte) 10, (byte) 11, (byte) 8, (byte) 12, (byte) 13, (byte) 8, (byte) 7, (byte) 12,
				(byte) 14, (byte) 15, (byte) 16, (byte) 4, (byte) 3, (byte) 17, (byte) 18, (byte) 19, (byte) 20,
				(byte) 21, (byte) 22, (byte) 23, (byte) 20, (byte) 24, (byte) 25, (byte) 26, (byte) 5, (byte) 27,
				(byte) 6, (byte) 28, (byte) 7, (byte) 16, (byte) 10, (byte) 9, (byte) 25, (byte) 24, (byte) 22,
				(byte) 3, (byte) 5, (byte) 26, (byte) 25, (byte) 22, (byte) 21, (byte) 13, (byte) 29, (byte) 11,
				(byte) 30, (byte) 31, (byte) 32, (byte) 33, (byte) 30, (byte) 32, (byte) 13, (byte) 12, (byte) 29,
				(byte) 34, (byte) 17, (byte) 35, (byte) 26, (byte) 27, (byte) 36, (byte) 36, (byte) 27, (byte) 37,
				(byte) 0, (byte) 31, (byte) 1, (byte) 14, (byte) 37, (byte) 15, (byte) 21, (byte) 23, (byte) 33,
				(byte) 32, (byte) 31, (byte) 0, (byte) 16, (byte) 15, (byte) 10, (byte) 38, (byte) 28, (byte) 6,
				(byte) 38, (byte) 39, (byte) 28, (byte) 40, (byte) 39, (byte) 38, (byte) 40, (byte) 41, (byte) 39,
				(byte) 42, (byte) 41, (byte) 40, (byte) 42, (byte) 43, (byte) 41, (byte) 44, (byte) 43, (byte) 42,
				(byte) 44, (byte) 45, (byte) 43, (byte) 46, (byte) 45, (byte) 44, (byte) 46, (byte) 47, (byte) 45,
				(byte) 2, (byte) 47, (byte) 46, (byte) 2, (byte) 1, (byte) 47, (byte) 9, (byte) 11, (byte) 29,
				(byte) 18, (byte) 35, (byte) 19, (byte) 36, (byte) 37, (byte) 14, (byte) 20, (byte) 19, (byte) 24,
				(byte) 4, (byte) 17, (byte) 34, (byte) 23, (byte) 30, (byte) 33, (byte) 34, (byte) 35, (byte) 18,
				(byte) 48, (byte) 49, (byte) 50, (byte) 49, (byte) 48, (byte) 51, (byte) 49, (byte) 51, (byte) 52,
				(byte) 52, (byte) 51, (byte) 53, (byte) 52, (byte) 53, (byte) 54, (byte) 54, (byte) 53, (byte) 55,
				(byte) 54, (byte) 55, (byte) 56, (byte) 56, (byte) 55, (byte) 57, (byte) 56, (byte) 57, (byte) 58,
				(byte) 58, (byte) 57, (byte) 59, (byte) 58, (byte) 59, (byte) 60, (byte) 60, (byte) 59, (byte) 61,
				(byte) 60, (byte) 61, (byte) 62, (byte) 62, (byte) 61, (byte) 63, (byte) 62, (byte) 63, (byte) 64,
				(byte) 64, (byte) 63, (byte) 65, (byte) 64, (byte) 65, (byte) 66, (byte) 66, (byte) 65, (byte) 67,
				(byte) 66, (byte) 67, (byte) 68, (byte) 68, (byte) 67, (byte) 69, (byte) 68, (byte) 69, (byte) 70,
				(byte) 70, (byte) 69, (byte) 71, (byte) 72, (byte) 73, (byte) 74, (byte) 72, (byte) 74, (byte) 75,
				(byte) 74, (byte) 76, (byte) 75, (byte) 76, (byte) 77, (byte) 75, (byte) 76, (byte) 78, (byte) 77,
				(byte) 78, (byte) 79, (byte) 77, (byte) 78, (byte) 80, (byte) 79, (byte) 79, (byte) 80, (byte) 81,
				(byte) 80, (byte) 82, (byte) 81, (byte) 81, (byte) 82, (byte) 83, (byte) 83, (byte) 82, (byte) 84,
				(byte) 83, (byte) 84, (byte) 85, (byte) 85, (byte) 84, (byte) 86, (byte) 85, (byte) 86, (byte) 87,
				(byte) 87, (byte) 86, (byte) 88, (byte) 87, (byte) 88, (byte) 89, (byte) 89, (byte) 88, (byte) 90,
				(byte) 89, (byte) 90, (byte) 91, (byte) 91, (byte) 90, (byte) 92, (byte) 91, (byte) 92, (byte) 93,
				(byte) 93, (byte) 92, (byte) 94, (byte) 93, (byte) 94, (byte) 95, (byte) 95, (byte) 94, (byte) 96,
				(byte) 95, (byte) 96, (byte) 97, (byte) 97, (byte) 96, (byte) 98, (byte) 97, (byte) 98, (byte) 99,
				(byte) 99, (byte) 98, (byte) 100, (byte) 101, (byte) 99, (byte) 100, (byte) 102, (byte) 103, (byte) 73,
				(byte) 101, (byte) 100, (byte) 104, (byte) 105, (byte) 101, (byte) 104, (byte) 106, (byte) 105,
				(byte) 104, (byte) 107, (byte) 105, (byte) 106, (byte) 108, (byte) 107, (byte) 106, (byte) 108,
				(byte) 109, (byte) 107, (byte) 110, (byte) 109, (byte) 108, (byte) 110, (byte) 111, (byte) 109,
				(byte) 112, (byte) 111, (byte) 110, (byte) 112, (byte) 113, (byte) 111, (byte) 113, (byte) 112,
				(byte) 114, (byte) 113, (byte) 114, (byte) 115, (byte) 115, (byte) 114, (byte) 116, (byte) 115,
				(byte) 116, (byte) 117, (byte) 117, (byte) 116, (byte) 118, (byte) 117, (byte) 118, (byte) 119,
				(byte) 119, (byte) 118, (byte) 103, (byte) 119, (byte) 103, (byte) 102, (byte) 102, (byte) 73,
				(byte) 72, (byte) 84, (byte) 120, (byte) 121, (byte) 120, (byte) 84, (byte) 82, (byte) 76, (byte) 122,
				(byte) 123, (byte) 122, (byte) 76, (byte) 74, (byte) 124, (byte) 110, (byte) 125, (byte) 110,
				(byte) 124, (byte) 112, (byte) 82, (byte) 126, (byte) 120, (byte) 126, (byte) 82, (byte) 80, (byte) 74,
				(byte) 127, (byte) 122, (byte) 127, (byte) 74, (byte) 73, (byte) 84, (byte) 128, (byte) 86, (byte) 128,
				(byte) 84, (byte) 121, (byte) 98, (byte) 129, (byte) 130, (byte) 129, (byte) 98, (byte) 96, (byte) 88,
				(byte) 128, (byte) 131, (byte) 128, (byte) 88, (byte) 86, (byte) 80, (byte) 132, (byte) 126,
				(byte) 132, (byte) 80, (byte) 78, (byte) 133, (byte) 106, (byte) 134, (byte) 106, (byte) 133,
				(byte) 108, (byte) 92, (byte) 135, (byte) 136, (byte) 135, (byte) 92, (byte) 90, (byte) 137,
				(byte) 104, (byte) 100, (byte) 104, (byte) 137, (byte) 138, (byte) 78, (byte) 123, (byte) 132,
				(byte) 123, (byte) 78, (byte) 76, (byte) 114, (byte) 124, (byte) 139, (byte) 124, (byte) 114,
				(byte) 112, (byte) 137, (byte) 98, (byte) 130, (byte) 98, (byte) 137, (byte) 100, (byte) 94,
				(byte) 136, (byte) 140, (byte) 136, (byte) 94, (byte) 92, (byte) 96, (byte) 140, (byte) 129,
				(byte) 140, (byte) 96, (byte) 94, (byte) 90, (byte) 131, (byte) 135, (byte) 131, (byte) 90, (byte) 88,
				(byte) 125, (byte) 108, (byte) 133, (byte) 108, (byte) 125, (byte) 110, (byte) 116, (byte) 139,
				(byte) 141, (byte) 139, (byte) 116, (byte) 114, (byte) 134, (byte) 104, (byte) 138, (byte) 104,
				(byte) 134, (byte) 106, (byte) 118, (byte) 141, (byte) 142, (byte) 141, (byte) 118, (byte) 116,
				(byte) 103, (byte) 142, (byte) 143, (byte) 142, (byte) 103, (byte) 118, (byte) 73, (byte) 143,
				(byte) 127, (byte) 143, (byte) 73, (byte) 103 };
		size[4] = valueFace.length;

		mIndexBuffer[4] = ByteBuffer.allocateDirect(valueFace.length);
		mIndexBuffer[4].put(valueFace);
		mIndexBuffer[4].position(0);
	}

	public void setFace5() {
		byte valueFace[] = { (byte) 0, (byte) 1, (byte) 2, (byte) 1, (byte) 0, (byte) 3, (byte) 1, (byte) 3, (byte) 4,
				(byte) 1, (byte) 4, (byte) 5, (byte) 1, (byte) 5, (byte) 6, (byte) 11, (byte) 12, (byte) 13, (byte) 12,
				(byte) 11, (byte) 10, (byte) 10, (byte) 11, (byte) 14, (byte) 10, (byte) 14, (byte) 15, (byte) 10,
				(byte) 15, (byte) 16, (byte) 10, (byte) 16, (byte) 17, (byte) 10, (byte) 17, (byte) 18, (byte) 10,
				(byte) 18, (byte) 19, (byte) 10, (byte) 19, (byte) 20, (byte) 20, (byte) 19, (byte) 21, (byte) 20,
				(byte) 21, (byte) 22, (byte) 23, (byte) 1, (byte) 6, (byte) 1, (byte) 23, (byte) 24, (byte) 1,
				(byte) 24, (byte) 25, (byte) 25, (byte) 24, (byte) 26, (byte) 25, (byte) 26, (byte) 7, (byte) 7,
				(byte) 26, (byte) 13, (byte) 7, (byte) 13, (byte) 8, (byte) 8, (byte) 13, (byte) 12, (byte) 27,
				(byte) 28, (byte) 29, (byte) 28, (byte) 27, (byte) 30, (byte) 30, (byte) 27, (byte) 31, (byte) 31,
				(byte) 27, (byte) 32, (byte) 31, (byte) 32, (byte) 33, (byte) 33, (byte) 32, (byte) 34, (byte) 33,
				(byte) 34, (byte) 35, (byte) 35, (byte) 34, (byte) 36, (byte) 35, (byte) 36, (byte) 37, (byte) 37,
				(byte) 36, (byte) 38, (byte) 37, (byte) 38, (byte) 39, (byte) 39, (byte) 38, (byte) 40, (byte) 39,
				(byte) 40, (byte) 41, (byte) 41, (byte) 40, (byte) 42, (byte) 41, (byte) 42, (byte) 43, (byte) 43,
				(byte) 42, (byte) 44, (byte) 43, (byte) 44, (byte) 45, (byte) 45, (byte) 44, (byte) 46, (byte) 45,
				(byte) 46, (byte) 47, (byte) 47, (byte) 46, (byte) 48, (byte) 48, (byte) 46, (byte) 49, (byte) 48,
				(byte) 49, (byte) 9, (byte) 9, (byte) 49, (byte) 50, (byte) 9, (byte) 50, (byte) 2, (byte) 2,
				(byte) 50, (byte) 51, (byte) 2, (byte) 51, (byte) 0 };
		size[5] = valueFace.length;

		mIndexBuffer[5] = ByteBuffer.allocateDirect(valueFace.length);
		mIndexBuffer[5].put(valueFace);
		mIndexBuffer[5].position(0);
	}

	public void setFace6() {
		byte valueFace[] = { (byte) 1, (byte) 2, (byte) 3, (byte) 2, (byte) 1, (byte) 4, (byte) 3, (byte) 2, (byte) 5,
				(byte) 3, (byte) 5, (byte) 6, (byte) 7, (byte) 8, (byte) 9, (byte) 8, (byte) 7, (byte) 10, (byte) 10,
				(byte) 7, (byte) 11, (byte) 11, (byte) 7, (byte) 12, (byte) 12, (byte) 7, (byte) 13, (byte) 13,
				(byte) 7, (byte) 14, (byte) 9, (byte) 8, (byte) 15, (byte) 9, (byte) 15, (byte) 16, (byte) 16,
				(byte) 15, (byte) 17, (byte) 13, (byte) 14, (byte) 18, (byte) 18, (byte) 14, (byte) 19, (byte) 19,
				(byte) 14, (byte) 4, (byte) 19, (byte) 4, (byte) 20, (byte) 20, (byte) 4, (byte) 21, (byte) 21,
				(byte) 4, (byte) 22, (byte) 22, (byte) 4, (byte) 23, (byte) 23, (byte) 4, (byte) 24, (byte) 24,
				(byte) 4, (byte) 25, (byte) 25, (byte) 4, (byte) 1, (byte) 4, (byte) 14, (byte) 26, (byte) 26,
				(byte) 14, (byte) 5, (byte) 5, (byte) 14, (byte) 0, (byte) 17, (byte) 27, (byte) 28, (byte) 27,
				(byte) 17, (byte) 29, (byte) 29, (byte) 17, (byte) 30, (byte) 30, (byte) 17, (byte) 15, (byte) 28,
				(byte) 27, (byte) 31, (byte) 28, (byte) 31, (byte) 32, (byte) 28, (byte) 32, (byte) 33, (byte) 28,
				(byte) 33, (byte) 34, (byte) 28, (byte) 34, (byte) 35, (byte) 28, (byte) 35, (byte) 36, (byte) 28,
				(byte) 36, (byte) 37, (byte) 28, (byte) 37, (byte) 38, (byte) 28, (byte) 38, (byte) 39, (byte) 28,
				(byte) 39, (byte) 25, (byte) 28, (byte) 25, (byte) 40, (byte) 40, (byte) 25, (byte) 1, (byte) 28,
				(byte) 40, (byte) 6, (byte) 28, (byte) 6, (byte) 0, (byte) 0, (byte) 6, (byte) 5, (byte) 41, (byte) 30,
				(byte) 15, (byte) 30, (byte) 41, (byte) 42, (byte) 42, (byte) 41, (byte) 43, (byte) 43, (byte) 41,
				(byte) 44, (byte) 43, (byte) 44, (byte) 45, (byte) 43, (byte) 45, (byte) 46, (byte) 46, (byte) 45,
				(byte) 47, (byte) 46, (byte) 47, (byte) 48, (byte) 48, (byte) 47, (byte) 49, (byte) 48, (byte) 49,
				(byte) 50, (byte) 50, (byte) 49, (byte) 51, (byte) 50, (byte) 51, (byte) 52, (byte) 52, (byte) 51,
				(byte) 53, (byte) 52, (byte) 53, (byte) 54, (byte) 54, (byte) 53, (byte) 55, (byte) 55, (byte) 53,
				(byte) 56, (byte) 55, (byte) 56, (byte) 57, (byte) 55, (byte) 57, (byte) 58, (byte) 58, (byte) 57,
				(byte) 59, (byte) 59, (byte) 57, (byte) 60, (byte) 59, (byte) 60, (byte) 61, (byte) 61, (byte) 60,
				(byte) 62, (byte) 61, (byte) 62, (byte) 24, (byte) 61, (byte) 24, (byte) 25, (byte) 63, (byte) 64,
				(byte) 65, (byte) 64, (byte) 63, (byte) 66, (byte) 66, (byte) 63, (byte) 67, (byte) 67, (byte) 63,
				(byte) 68, (byte) 68, (byte) 63, (byte) 69, (byte) 68, (byte) 69, (byte) 70, (byte) 70, (byte) 69,
				(byte) 71, (byte) 71, (byte) 69, (byte) 72, (byte) 71, (byte) 72, (byte) 73, (byte) 73, (byte) 72,
				(byte) 74, (byte) 74, (byte) 72, (byte) 7, (byte) 74, (byte) 7, (byte) 75, (byte) 75, (byte) 7,
				(byte) 76, (byte) 76, (byte) 7, (byte) 77, (byte) 77, (byte) 7, (byte) 78, (byte) 78, (byte) 7,
				(byte) 79, (byte) 80, (byte) 81, (byte) 82, (byte) 81, (byte) 80, (byte) 83, (byte) 83, (byte) 80,
				(byte) 84, (byte) 83, (byte) 84, (byte) 85, (byte) 85, (byte) 84, (byte) 86, (byte) 85, (byte) 86,
				(byte) 87, (byte) 87, (byte) 86, (byte) 88, (byte) 87, (byte) 88, (byte) 89, (byte) 89, (byte) 88,
				(byte) 90, (byte) 89, (byte) 90, (byte) 91, (byte) 91, (byte) 90, (byte) 92, (byte) 91, (byte) 92,
				(byte) 93, (byte) 93, (byte) 92, (byte) 94, (byte) 93, (byte) 94, (byte) 95, (byte) 95, (byte) 94,
				(byte) 96, (byte) 95, (byte) 96, (byte) 97, (byte) 97, (byte) 96, (byte) 65, (byte) 97, (byte) 65,
				(byte) 64, (byte) 97, (byte) 64, (byte) 98, (byte) 98, (byte) 64, (byte) 99, (byte) 98, (byte) 99,
				(byte) 100, (byte) 98, (byte) 100, (byte) 101, (byte) 98, (byte) 101, (byte) 102, (byte) 98,
				(byte) 102, (byte) 103, (byte) 103, (byte) 102, (byte) 104, (byte) 103, (byte) 104, (byte) 105,
				(byte) 103, (byte) 105, (byte) 106, (byte) 106, (byte) 105, (byte) 107, (byte) 106, (byte) 107,
				(byte) 108, (byte) 106, (byte) 108, (byte) 109, (byte) 109, (byte) 108, (byte) 110, (byte) 109,
				(byte) 110, (byte) 111, (byte) 109, (byte) 111, (byte) 112, (byte) 109, (byte) 112, (byte) 79,
				(byte) 109, (byte) 79, (byte) 9, (byte) 9, (byte) 79, (byte) 7 };
		size[6] = valueFace.length;

		mIndexBuffer[6] = ByteBuffer.allocateDirect(valueFace.length);
		mIndexBuffer[6].put(valueFace);
		mIndexBuffer[6].position(0);
	}

	public void setFace7() {
		byte valueFace[] = { (byte) 0, (byte) 1, (byte) 2, (byte) 1, (byte) 0, (byte) 3, (byte) 4, (byte) 5, (byte) 6,
				(byte) 5, (byte) 4, (byte) 7, (byte) 4, (byte) 8, (byte) 7, (byte) 8, (byte) 4, (byte) 9, (byte) 4,
				(byte) 10, (byte) 9, (byte) 10, (byte) 4, (byte) 6, (byte) 8, (byte) 10, (byte) 11, (byte) 10,
				(byte) 8, (byte) 9, (byte) 10, (byte) 5, (byte) 11, (byte) 5, (byte) 10, (byte) 6, (byte) 12,
				(byte) 13, (byte) 14, (byte) 13, (byte) 12, (byte) 15, (byte) 15, (byte) 12, (byte) 16, (byte) 15,
				(byte) 16, (byte) 17, (byte) 17, (byte) 16, (byte) 18, (byte) 17, (byte) 18, (byte) 19, (byte) 19,
				(byte) 18, (byte) 20, (byte) 19, (byte) 20, (byte) 21, (byte) 21, (byte) 20, (byte) 22, (byte) 21,
				(byte) 22, (byte) 23, (byte) 21, (byte) 23, (byte) 24, (byte) 24, (byte) 23, (byte) 25, (byte) 24,
				(byte) 25, (byte) 26, (byte) 26, (byte) 25, (byte) 27, (byte) 26, (byte) 27, (byte) 28, (byte) 28,
				(byte) 27, (byte) 29, (byte) 28, (byte) 29, (byte) 30, (byte) 30, (byte) 29, (byte) 31, (byte) 30,
				(byte) 31, (byte) 32, (byte) 32, (byte) 31, (byte) 33, (byte) 32, (byte) 33, (byte) 34, (byte) 34,
				(byte) 33, (byte) 35, (byte) 34, (byte) 35, (byte) 36, (byte) 36, (byte) 35, (byte) 37 };
		size[7] = valueFace.length;

		mIndexBuffer[7] = ByteBuffer.allocateDirect(valueFace.length);
		mIndexBuffer[7].put(valueFace);
		mIndexBuffer[7].position(0);
	}

	public void setFace8() {
		byte valueFace[] = { (byte) 0, (byte) 1, (byte) 2, (byte) 1, (byte) 0, (byte) 3, (byte) 4, (byte) 5, (byte) 6,
				(byte) 5, (byte) 4, (byte) 7, (byte) 8, (byte) 9, (byte) 10, (byte) 9, (byte) 8, (byte) 11, (byte) 12,
				(byte) 13, (byte) 14, (byte) 13, (byte) 12, (byte) 15, (byte) 7, (byte) 16, (byte) 5, (byte) 16,
				(byte) 7, (byte) 17, (byte) 18, (byte) 19, (byte) 20, (byte) 19, (byte) 18, (byte) 21, (byte) 17,
				(byte) 22, (byte) 16, (byte) 22, (byte) 17, (byte) 23, (byte) 24, (byte) 25, (byte) 26, (byte) 25,
				(byte) 24, (byte) 27, (byte) 28, (byte) 29, (byte) 30, (byte) 29, (byte) 28, (byte) 31, (byte) 23,
				(byte) 26, (byte) 22, (byte) 26, (byte) 23, (byte) 24, (byte) 32, (byte) 33, (byte) 34, (byte) 33,
				(byte) 32, (byte) 35, (byte) 19, (byte) 2, (byte) 20, (byte) 2, (byte) 19, (byte) 0, (byte) 27,
				(byte) 32, (byte) 25, (byte) 32, (byte) 27, (byte) 35, (byte) 34, (byte) 31, (byte) 28, (byte) 31,
				(byte) 34, (byte) 33, (byte) 9, (byte) 15, (byte) 36, (byte) 15, (byte) 9, (byte) 11, (byte) 15,
				(byte) 11, (byte) 13, (byte) 13, (byte) 11, (byte) 6, (byte) 13, (byte) 6, (byte) 37, (byte) 37,
				(byte) 6, (byte) 5, (byte) 37, (byte) 5, (byte) 38, (byte) 38, (byte) 5, (byte) 16, (byte) 38,
				(byte) 16, (byte) 39, (byte) 39, (byte) 16, (byte) 22, (byte) 39, (byte) 22, (byte) 40, (byte) 40,
				(byte) 22, (byte) 26, (byte) 40, (byte) 26, (byte) 1, (byte) 1, (byte) 26, (byte) 25, (byte) 1,
				(byte) 25, (byte) 2, (byte) 2, (byte) 25, (byte) 32, (byte) 2, (byte) 32, (byte) 20, (byte) 20,
				(byte) 32, (byte) 34, (byte) 20, (byte) 34, (byte) 18, (byte) 18, (byte) 34, (byte) 28, (byte) 18,
				(byte) 28, (byte) 41, (byte) 41, (byte) 28, (byte) 30, (byte) 41, (byte) 21, (byte) 18, (byte) 21,
				(byte) 41, (byte) 42, (byte) 30, (byte) 42, (byte) 41, (byte) 42, (byte) 30, (byte) 29, (byte) 43,
				(byte) 39, (byte) 40, (byte) 39, (byte) 43, (byte) 44, (byte) 45, (byte) 37, (byte) 38, (byte) 37,
				(byte) 45, (byte) 46, (byte) 14, (byte) 37, (byte) 46, (byte) 37, (byte) 14, (byte) 13, (byte) 47,
				(byte) 15, (byte) 12, (byte) 15, (byte) 47, (byte) 36, (byte) 4, (byte) 11, (byte) 8, (byte) 11,
				(byte) 4, (byte) 6, (byte) 10, (byte) 36, (byte) 47, (byte) 36, (byte) 10, (byte) 9, (byte) 44,
				(byte) 38, (byte) 39, (byte) 38, (byte) 44, (byte) 45, (byte) 3, (byte) 40, (byte) 1, (byte) 40,
				(byte) 3, (byte) 43 };
		size[8] = valueFace.length;

		mIndexBuffer[8] = ByteBuffer.allocateDirect(valueFace.length);
		mIndexBuffer[8].put(valueFace);
		mIndexBuffer[8].position(0);
	}

	public void setFace9() {
		byte valueFace[] = { (byte) 0, (byte) 1, (byte) 2, (byte) 1, (byte) 0, (byte) 3, (byte) 2, (byte) 4, (byte) 5,
				(byte) 4, (byte) 2, (byte) 1, (byte) 6, (byte) 4, (byte) 7, (byte) 4, (byte) 6, (byte) 5, (byte) 8,
				(byte) 7, (byte) 9, (byte) 7, (byte) 8, (byte) 6, (byte) 10, (byte) 9, (byte) 11, (byte) 9, (byte) 10,
				(byte) 8, (byte) 12, (byte) 3, (byte) 13, (byte) 3, (byte) 12, (byte) 14, (byte) 3, (byte) 14,
				(byte) 1, (byte) 1, (byte) 14, (byte) 15, (byte) 1, (byte) 15, (byte) 4, (byte) 4, (byte) 15,
				(byte) 16, (byte) 4, (byte) 16, (byte) 7, (byte) 7, (byte) 16, (byte) 17, (byte) 7, (byte) 17,
				(byte) 9, (byte) 9, (byte) 17, (byte) 18, (byte) 9, (byte) 18, (byte) 11, (byte) 11, (byte) 18,
				(byte) 19, (byte) 11, (byte) 19, (byte) 20, (byte) 20, (byte) 19, (byte) 21, (byte) 20, (byte) 21,
				(byte) 22, (byte) 22, (byte) 21, (byte) 23, (byte) 22, (byte) 23, (byte) 24, (byte) 24, (byte) 23,
				(byte) 25, (byte) 24, (byte) 25, (byte) 26, (byte) 26, (byte) 25, (byte) 27, (byte) 26, (byte) 27,
				(byte) 28, (byte) 28, (byte) 27, (byte) 29, (byte) 28, (byte) 30, (byte) 26, (byte) 30, (byte) 28,
				(byte) 31, (byte) 29, (byte) 31, (byte) 28, (byte) 31, (byte) 29, (byte) 32, (byte) 27, (byte) 32,
				(byte) 29, (byte) 32, (byte) 27, (byte) 33, (byte) 25, (byte) 33, (byte) 27, (byte) 33, (byte) 25,
				(byte) 34, (byte) 23, (byte) 34, (byte) 25, (byte) 34, (byte) 23, (byte) 35, (byte) 36, (byte) 23,
				(byte) 21, (byte) 23, (byte) 36, (byte) 35, (byte) 37, (byte) 21, (byte) 19, (byte) 21, (byte) 37,
				(byte) 36, (byte) 38, (byte) 19, (byte) 18, (byte) 19, (byte) 38, (byte) 37, (byte) 39, (byte) 18,
				(byte) 17, (byte) 18, (byte) 39, (byte) 38, (byte) 40, (byte) 17, (byte) 16, (byte) 17, (byte) 40,
				(byte) 39, (byte) 41, (byte) 11, (byte) 20, (byte) 11, (byte) 41, (byte) 10, (byte) 42, (byte) 20,
				(byte) 22, (byte) 20, (byte) 42, (byte) 41, (byte) 43, (byte) 22, (byte) 24, (byte) 22, (byte) 43,
				(byte) 42, (byte) 26, (byte) 43, (byte) 24, (byte) 43, (byte) 26, (byte) 30, (byte) 44, (byte) 16,
				(byte) 15, (byte) 16, (byte) 44, (byte) 40, (byte) 44, (byte) 14, (byte) 45, (byte) 14, (byte) 44,
				(byte) 15, (byte) 45, (byte) 12, (byte) 46, (byte) 12, (byte) 45, (byte) 14, (byte) 46, (byte) 13,
				(byte) 47, (byte) 13, (byte) 46, (byte) 12, (byte) 47, (byte) 3, (byte) 0, (byte) 3, (byte) 47,
				(byte) 13 };
		size[9] = valueFace.length;

		mIndexBuffer[9] = ByteBuffer.allocateDirect(valueFace.length);
		mIndexBuffer[9].put(valueFace);
		mIndexBuffer[9].position(0);
	}

	public void setFace10() {
		byte valueFace[] = { (byte) 0, (byte) 1, (byte) 2, (byte) 1, (byte) 0, (byte) 3, (byte) 4, (byte) 5, (byte) 6,
				(byte) 5, (byte) 4, (byte) 7, (byte) 8, (byte) 9, (byte) 10, (byte) 9, (byte) 8, (byte) 11, (byte) 12,
				(byte) 13, (byte) 14, (byte) 13, (byte) 12, (byte) 15, (byte) 16, (byte) 17, (byte) 18, (byte) 17,
				(byte) 16, (byte) 19, (byte) 20, (byte) 21, (byte) 22, (byte) 21, (byte) 20, (byte) 23, (byte) 24,
				(byte) 25, (byte) 26, (byte) 25, (byte) 24, (byte) 27, (byte) 28, (byte) 29, (byte) 30, (byte) 29,
				(byte) 28, (byte) 31, (byte) 32, (byte) 31, (byte) 28, (byte) 31, (byte) 32, (byte) 33, (byte) 34,
				(byte) 33, (byte) 32, (byte) 33, (byte) 34, (byte) 35, (byte) 34, (byte) 10, (byte) 35, (byte) 10,
				(byte) 34, (byte) 8, (byte) 36, (byte) 37, (byte) 38, (byte) 37, (byte) 36, (byte) 39, (byte) 38,
				(byte) 40, (byte) 41, (byte) 40, (byte) 38, (byte) 37, (byte) 22, (byte) 17, (byte) 19, (byte) 17,
				(byte) 22, (byte) 21, (byte) 42, (byte) 43, (byte) 44, (byte) 43, (byte) 42, (byte) 45, (byte) 46,
				(byte) 26, (byte) 47, (byte) 26, (byte) 46, (byte) 24, (byte) 30, (byte) 23, (byte) 20, (byte) 23,
				(byte) 30, (byte) 29, (byte) 14, (byte) 48, (byte) 49, (byte) 48, (byte) 14, (byte) 13, (byte) 50,
				(byte) 18, (byte) 51, (byte) 18, (byte) 50, (byte) 16, (byte) 52, (byte) 51, (byte) 53, (byte) 51,
				(byte) 52, (byte) 50, (byte) 25, (byte) 15, (byte) 12, (byte) 15, (byte) 25, (byte) 27, (byte) 36,
				(byte) 54, (byte) 39, (byte) 54, (byte) 36, (byte) 55, (byte) 31, (byte) 23, (byte) 29, (byte) 23,
				(byte) 31, (byte) 33, (byte) 23, (byte) 33, (byte) 21, (byte) 21, (byte) 33, (byte) 35, (byte) 21,
				(byte) 35, (byte) 56, (byte) 56, (byte) 35, (byte) 57, (byte) 57, (byte) 35, (byte) 58, (byte) 58,
				(byte) 35, (byte) 10, (byte) 58, (byte) 10, (byte) 59, (byte) 59, (byte) 10, (byte) 60, (byte) 60,
				(byte) 10, (byte) 9, (byte) 60, (byte) 9, (byte) 61, (byte) 61, (byte) 9, (byte) 62, (byte) 61,
				(byte) 62, (byte) 63, (byte) 63, (byte) 62, (byte) 47, (byte) 63, (byte) 47, (byte) 64, (byte) 64,
				(byte) 47, (byte) 65, (byte) 65, (byte) 47, (byte) 26, (byte) 65, (byte) 26, (byte) 66, (byte) 66,
				(byte) 26, (byte) 25, (byte) 66, (byte) 25, (byte) 67, (byte) 67, (byte) 25, (byte) 68, (byte) 68,
				(byte) 25, (byte) 12, (byte) 68, (byte) 12, (byte) 69, (byte) 56, (byte) 17, (byte) 21, (byte) 17,
				(byte) 56, (byte) 70, (byte) 17, (byte) 70, (byte) 71, (byte) 17, (byte) 71, (byte) 18, (byte) 18,
				(byte) 71, (byte) 72, (byte) 18, (byte) 72, (byte) 73, (byte) 18, (byte) 73, (byte) 51, (byte) 51,
				(byte) 73, (byte) 74, (byte) 51, (byte) 74, (byte) 53, (byte) 53, (byte) 74, (byte) 75, (byte) 53,
				(byte) 75, (byte) 76, (byte) 53, (byte) 76, (byte) 77, (byte) 77, (byte) 76, (byte) 78, (byte) 77,
				(byte) 78, (byte) 5, (byte) 5, (byte) 78, (byte) 79, (byte) 5, (byte) 79, (byte) 6, (byte) 6,
				(byte) 79, (byte) 80, (byte) 6, (byte) 80, (byte) 81, (byte) 6, (byte) 81, (byte) 2, (byte) 2,
				(byte) 81, (byte) 69, (byte) 2, (byte) 69, (byte) 12, (byte) 2, (byte) 12, (byte) 14, (byte) 2,
				(byte) 14, (byte) 0, (byte) 0, (byte) 14, (byte) 49, (byte) 11, (byte) 62, (byte) 9, (byte) 62,
				(byte) 11, (byte) 82, (byte) 83, (byte) 84, (byte) 85, (byte) 84, (byte) 83, (byte) 86, (byte) 87,
				(byte) 88, (byte) 89, (byte) 88, (byte) 87, (byte) 90, (byte) 44, (byte) 91, (byte) 92, (byte) 91,
				(byte) 44, (byte) 43, (byte) 41, (byte) 90, (byte) 87, (byte) 90, (byte) 41, (byte) 40, (byte) 49,
				(byte) 3, (byte) 0, (byte) 3, (byte) 49, (byte) 48, (byte) 7, (byte) 77, (byte) 5, (byte) 77, (byte) 7,
				(byte) 93, (byte) 93, (byte) 53, (byte) 77, (byte) 53, (byte) 93, (byte) 52, (byte) 92, (byte) 86,
				(byte) 83, (byte) 86, (byte) 92, (byte) 91, (byte) 82, (byte) 47, (byte) 62, (byte) 47, (byte) 82,
				(byte) 46, (byte) 2, (byte) 4, (byte) 6, (byte) 4, (byte) 2, (byte) 1, (byte) 94, (byte) 95, (byte) 96,
				(byte) 95, (byte) 94, (byte) 97, (byte) 57, (byte) 70, (byte) 56, (byte) 70, (byte) 57, (byte) 58,
				(byte) 70, (byte) 58, (byte) 71, (byte) 71, (byte) 58, (byte) 59, (byte) 71, (byte) 59, (byte) 72,
				(byte) 72, (byte) 59, (byte) 60, (byte) 72, (byte) 60, (byte) 83, (byte) 83, (byte) 60, (byte) 92,
				(byte) 92, (byte) 60, (byte) 44, (byte) 44, (byte) 60, (byte) 42, (byte) 42, (byte) 60, (byte) 61,
				(byte) 42, (byte) 61, (byte) 98, (byte) 98, (byte) 61, (byte) 99, (byte) 99, (byte) 61, (byte) 63,
				(byte) 99, (byte) 63, (byte) 100, (byte) 100, (byte) 63, (byte) 64, (byte) 100, (byte) 64, (byte) 101,
				(byte) 101, (byte) 64, (byte) 54, (byte) 54, (byte) 64, (byte) 65, (byte) 54, (byte) 65, (byte) 39,
				(byte) 39, (byte) 65, (byte) 37, (byte) 37, (byte) 65, (byte) 66, (byte) 37, (byte) 66, (byte) 40,
				(byte) 40, (byte) 66, (byte) 90, (byte) 90, (byte) 66, (byte) 79, (byte) 79, (byte) 66, (byte) 80,
				(byte) 80, (byte) 66, (byte) 67, (byte) 80, (byte) 67, (byte) 68, (byte) 80, (byte) 68, (byte) 81,
				(byte) 81, (byte) 68, (byte) 69, (byte) 83, (byte) 73, (byte) 72, (byte) 73, (byte) 83, (byte) 85,
				(byte) 73, (byte) 85, (byte) 102, (byte) 73, (byte) 102, (byte) 103, (byte) 73, (byte) 103, (byte) 74,
				(byte) 74, (byte) 103, (byte) 96, (byte) 74, (byte) 96, (byte) 95, (byte) 74, (byte) 95, (byte) 75,
				(byte) 75, (byte) 95, (byte) 104, (byte) 75, (byte) 104, (byte) 105, (byte) 75, (byte) 105, (byte) 76,
				(byte) 76, (byte) 105, (byte) 106, (byte) 76, (byte) 106, (byte) 78, (byte) 78, (byte) 106, (byte) 107,
				(byte) 78, (byte) 107, (byte) 108, (byte) 78, (byte) 108, (byte) 79, (byte) 79, (byte) 108, (byte) 88,
				(byte) 79, (byte) 88, (byte) 90, (byte) 102, (byte) 109, (byte) 103, (byte) 109, (byte) 102,
				(byte) 110, (byte) 111, (byte) 105, (byte) 104, (byte) 105, (byte) 111, (byte) 112, (byte) 97,
				(byte) 104, (byte) 95, (byte) 104, (byte) 97, (byte) 111, (byte) 91, (byte) 84, (byte) 86, (byte) 84,
				(byte) 91, (byte) 43, (byte) 84, (byte) 43, (byte) 110, (byte) 110, (byte) 43, (byte) 45, (byte) 110,
				(byte) 45, (byte) 109, (byte) 109, (byte) 45, (byte) 113, (byte) 109, (byte) 113, (byte) 94, (byte) 94,
				(byte) 113, (byte) 97, (byte) 97, (byte) 113, (byte) 114, (byte) 97, (byte) 114, (byte) 115, (byte) 97,
				(byte) 115, (byte) 111, (byte) 111, (byte) 115, (byte) 112, (byte) 112, (byte) 115, (byte) 116,
				(byte) 112, (byte) 116, (byte) 55, (byte) 112, (byte) 55, (byte) 117, (byte) 117, (byte) 55, (byte) 36,
				(byte) 117, (byte) 36, (byte) 118, (byte) 118, (byte) 36, (byte) 38, (byte) 118, (byte) 38, (byte) 119,
				(byte) 119, (byte) 38, (byte) 41, (byte) 119, (byte) 41, (byte) 89, (byte) 89, (byte) 41, (byte) 87,
				(byte) 115, (byte) 99, (byte) 100, (byte) 99, (byte) 115, (byte) 114, (byte) 116, (byte) 100,
				(byte) 101, (byte) 100, (byte) 116, (byte) 115, (byte) 112, (byte) 106, (byte) 105, (byte) 106,
				(byte) 112, (byte) 117, (byte) 119, (byte) 107, (byte) 118, (byte) 107, (byte) 119, (byte) 108,
				(byte) 117, (byte) 107, (byte) 106, (byte) 107, (byte) 117, (byte) 118, (byte) 109, (byte) 96,
				(byte) 103, (byte) 96, (byte) 109, (byte) 94, (byte) 89, (byte) 108, (byte) 119, (byte) 108, (byte) 89,
				(byte) 88, (byte) 85, (byte) 110, (byte) 102, (byte) 110, (byte) 85, (byte) 84, (byte) 113, (byte) 42,
				(byte) 98, (byte) 42, (byte) 113, (byte) 45, (byte) 114, (byte) 98, (byte) 99, (byte) 98, (byte) 114,
				(byte) 113, (byte) 55, (byte) 101, (byte) 54, (byte) 101, (byte) 55, (byte) 116 };
		size[10] = valueFace.length;

		mIndexBuffer[10] = ByteBuffer.allocateDirect(valueFace.length);
		mIndexBuffer[10].put(valueFace);
		mIndexBuffer[10].position(0);
	}

	public void setFace11() {
		byte valueFace[] = { (byte) 2, (byte) 3, (byte) 0, (byte) 3, (byte) 2, (byte) 4, (byte) 4, (byte) 2, (byte) 5,
				(byte) 5, (byte) 2, (byte) 6, (byte) 0, (byte) 3, (byte) 7, (byte) 0, (byte) 7, (byte) 8, (byte) 0,
				(byte) 8, (byte) 9, (byte) 5, (byte) 6, (byte) 10, (byte) 10, (byte) 6, (byte) 11, (byte) 11, (byte) 6,
				(byte) 12, (byte) 12, (byte) 6, (byte) 13, (byte) 13, (byte) 6, (byte) 14, (byte) 14, (byte) 6,
				(byte) 15, (byte) 15, (byte) 6, (byte) 16, (byte) 0, (byte) 17, (byte) 1, (byte) 17, (byte) 0,
				(byte) 18, (byte) 18, (byte) 0, (byte) 19, (byte) 19, (byte) 0, (byte) 20, (byte) 20, (byte) 0,
				(byte) 21, (byte) 21, (byte) 0, (byte) 22, (byte) 22, (byte) 0, (byte) 9, (byte) 1, (byte) 17,
				(byte) 23, (byte) 1, (byte) 23, (byte) 24, (byte) 1, (byte) 24, (byte) 25, (byte) 1, (byte) 25,
				(byte) 26, (byte) 1, (byte) 26, (byte) 27, (byte) 1, (byte) 27, (byte) 16, (byte) 1, (byte) 16,
				(byte) 6 };
		size[11] = valueFace.length;

		mIndexBuffer[11] = ByteBuffer.allocateDirect(valueFace.length);
		mIndexBuffer[11].put(valueFace);
		mIndexBuffer[11].position(0);
	}

	public void setFace12() {
		byte valueFace[] = { (byte) 1, (byte) 2, (byte) 3, (byte) 2, (byte) 1, (byte) 0, (byte) 4, (byte) 5, (byte) 6,
				(byte) 5, (byte) 4, (byte) 7, (byte) 8, (byte) 3, (byte) 9, (byte) 3, (byte) 8, (byte) 1, (byte) 11,
				(byte) 6, (byte) 12, (byte) 6, (byte) 11, (byte) 4, (byte) 0, (byte) 12, (byte) 2, (byte) 12, (byte) 0,
				(byte) 11, (byte) 7, (byte) 13, (byte) 5, (byte) 13, (byte) 7, (byte) 10 };
		size[12] = valueFace.length;

		mIndexBuffer[12] = ByteBuffer.allocateDirect(valueFace.length);
		mIndexBuffer[12].put(valueFace);
		mIndexBuffer[12].position(0);
	}

	public void setFace13() {
		byte valueFace[] = { (byte) 2, (byte) 0, (byte) 1, (byte) 0, (byte) 2, (byte) 3 };
		size[13] = valueFace.length;

		mIndexBuffer[13] = ByteBuffer.allocateDirect(valueFace.length);
		mIndexBuffer[13].put(valueFace);
		mIndexBuffer[13].position(0);
	}

	public void setFace14() {
		byte valueFace[] = { (byte) 0, (byte) 1, (byte) 2, (byte) 1, (byte) 0, (byte) 3, (byte) 3, (byte) 0, (byte) 4,
				(byte) 2, (byte) 5, (byte) 6, (byte) 5, (byte) 2, (byte) 1, (byte) 7, (byte) 8, (byte) 9, (byte) 8,
				(byte) 7, (byte) 10, (byte) 10, (byte) 7, (byte) 11, (byte) 11, (byte) 7, (byte) 12, (byte) 12,
				(byte) 7, (byte) 13, (byte) 13, (byte) 7, (byte) 14, (byte) 14, (byte) 7, (byte) 0, (byte) 0, (byte) 7,
				(byte) 15, (byte) 17, (byte) 18, (byte) 16, (byte) 18, (byte) 17, (byte) 19, (byte) 18, (byte) 19,
				(byte) 20, (byte) 18, (byte) 20, (byte) 21, (byte) 18, (byte) 21, (byte) 22, (byte) 18, (byte) 22,
				(byte) 23, (byte) 18, (byte) 23, (byte) 24, (byte) 18, (byte) 24, (byte) 25, (byte) 24, (byte) 16,
				(byte) 26, (byte) 16, (byte) 24, (byte) 17, (byte) 17, (byte) 24, (byte) 19, (byte) 19, (byte) 24,
				(byte) 20, (byte) 20, (byte) 24, (byte) 21, (byte) 21, (byte) 24, (byte) 22, (byte) 22, (byte) 24,
				(byte) 23, (byte) 27, (byte) 28, (byte) 29, (byte) 28, (byte) 27, (byte) 30, (byte) 31, (byte) 32,
				(byte) 33, (byte) 32, (byte) 31, (byte) 34, (byte) 35, (byte) 36, (byte) 37, (byte) 36, (byte) 35,
				(byte) 38, (byte) 34, (byte) 29, (byte) 32, (byte) 29, (byte) 34, (byte) 27, (byte) 39, (byte) 40,
				(byte) 41, (byte) 40, (byte) 39, (byte) 42, (byte) 42, (byte) 39, (byte) 43, (byte) 37, (byte) 43,
				(byte) 39, (byte) 43, (byte) 37, (byte) 36, (byte) 28, (byte) 38, (byte) 35, (byte) 38, (byte) 28,
				(byte) 30, (byte) 44, (byte) 45, (byte) 40, (byte) 45, (byte) 44, (byte) 46, (byte) 45, (byte) 46,
				(byte) 47, (byte) 47, (byte) 46, (byte) 48, (byte) 47, (byte) 48, (byte) 49, (byte) 49, (byte) 48,
				(byte) 50, (byte) 49, (byte) 50, (byte) 51, (byte) 51, (byte) 50, (byte) 52, (byte) 52, (byte) 50,
				(byte) 53, (byte) 52, (byte) 53, (byte) 54, (byte) 52, (byte) 54, (byte) 55, (byte) 55, (byte) 54,
				(byte) 56, (byte) 55, (byte) 56, (byte) 57, (byte) 57, (byte) 56, (byte) 58, (byte) 57, (byte) 58,
				(byte) 59, (byte) 59, (byte) 58, (byte) 60, (byte) 59, (byte) 60, (byte) 61, (byte) 61, (byte) 60,
				(byte) 62, (byte) 61, (byte) 62, (byte) 63, (byte) 63, (byte) 62, (byte) 64, (byte) 63, (byte) 64,
				(byte) 65, (byte) 65, (byte) 64, (byte) 66, (byte) 67, (byte) 40, (byte) 68, (byte) 40, (byte) 67,
				(byte) 42, (byte) 69, (byte) 70, (byte) 71, (byte) 70, (byte) 69, (byte) 72, (byte) 73, (byte) 74,
				(byte) 75, (byte) 74, (byte) 73, (byte) 76, (byte) 77, (byte) 78, (byte) 79, (byte) 78, (byte) 77,
				(byte) 80, (byte) 71, (byte) 76, (byte) 73, (byte) 76, (byte) 71, (byte) 70, (byte) 81, (byte) 82,
				(byte) 83, (byte) 82, (byte) 81, (byte) 84, (byte) 85, (byte) 79, (byte) 86, (byte) 79, (byte) 85,
				(byte) 77, (byte) 87, (byte) 88, (byte) 89, (byte) 88, (byte) 87, (byte) 90, (byte) 80, (byte) 91,
				(byte) 78, (byte) 91, (byte) 80, (byte) 92, (byte) 83, (byte) 72, (byte) 69, (byte) 72, (byte) 83,
				(byte) 82, (byte) 93, (byte) 84, (byte) 81, (byte) 84, (byte) 93, (byte) 94, (byte) 90, (byte) 86,
				(byte) 88, (byte) 86, (byte) 90, (byte) 85, (byte) 93, (byte) 89, (byte) 94, (byte) 89, (byte) 93,
				(byte) 87 };
		size[14] = valueFace.length;

		mIndexBuffer[14] = ByteBuffer.allocateDirect(valueFace.length);
		mIndexBuffer[14].put(valueFace);
		mIndexBuffer[14].position(0);
	}

	public void setFace15() {
		byte valueFace[] = { (byte) 0, (byte) 1, (byte) 2, (byte) 1, (byte) 0, (byte) 3, (byte) 4, (byte) 5, (byte) 6,
				(byte) 5, (byte) 4, (byte) 7, (byte) 3, (byte) 8, (byte) 1, (byte) 8, (byte) 3, (byte) 9, (byte) 7,
				(byte) 2, (byte) 5, (byte) 2, (byte) 7, (byte) 0, (byte) 10, (byte) 11, (byte) 12, (byte) 11,
				(byte) 10, (byte) 13, (byte) 14, (byte) 13, (byte) 10, (byte) 13, (byte) 14, (byte) 15, (byte) 9,
				(byte) 16, (byte) 8, (byte) 16, (byte) 9, (byte) 17, (byte) 18, (byte) 15, (byte) 14, (byte) 15,
				(byte) 18, (byte) 19, (byte) 20, (byte) 19, (byte) 18, (byte) 19, (byte) 20, (byte) 21, (byte) 12,
				(byte) 22, (byte) 23, (byte) 22, (byte) 12, (byte) 11, (byte) 17, (byte) 24, (byte) 16, (byte) 24,
				(byte) 17, (byte) 25, (byte) 23, (byte) 24, (byte) 25, (byte) 24, (byte) 23, (byte) 22 };
		size[15] = valueFace.length;

		mIndexBuffer[15] = ByteBuffer.allocateDirect(valueFace.length);
		mIndexBuffer[15].put(valueFace);
		mIndexBuffer[15].position(0);
	}

	public void setNormal0() {
		float valueNormal[] = { -2f, 0f, 0f, -2f, 0f, 0f, -1f, 0f, 0f, -1f, 0f, 0f, -0.999999f, 2.0551f, 1.30493f, -2f,
				2.97006f, 0.418107f, -2f, 2.97592f, 0.374128f, -0.999999f, 1.14601f, 2.14778f, -3f, 2.98564f,
				0.286534f, -3f, 2.98951f, 0.242919f, -2f, 1.86469f, -0.858526f, -2f, 0.736018f, -1.91636f, -2f,
				-2.94957f, 0.466051f, -4f, -2.85944f, 0.860713f, -4f, -2.79421f, 1.05339f, -2f, -2.97446f, 0.264067f,
				-12f, -2.98279f, -0.141023f, -14f, -2.96623f, -0.344131f, -2f, -2.89267f, -0.741781f, -2f, -2.83568f,
				-0.936324f, -2f, -2.6843f, -1.30893f, -2f, -2.58991f, -1.48699f, -1f, -1.66368f, -1.11004f, -1f,
				-0.831838f, -0.555018f, -3f, 0.032461f, 2.98585f, -3f, -0.171984f, 2.98107f, -4f, -0.574524f, 2.9304f,
				-4f, -0.772616f, 2.88451f, -3f, -1.15438f, 2.75421f, -3f, -1.33806f, 2.66981f, -3f, -1.68647f,
				2.46417f, -3f, -1.85121f, 2.34293f, -2f, 1.86588f, 0.858725f, -2f, 2.98951f, -0.242912f, -2f, 2.98564f,
				-0.286583f, -2f, 0.738382f, 1.91669f, -3f, -0.644848f, -2.90651f, -3f, -1.37444f, -2.64115f, -3f,
				-2.804f, -2.80402f, -3f, -1.47936f, 1.3306f, -3f, -2.64115f, -1.37443f, -3f, -2.52441f, 1.59543f, -3f,
				-2.90651f, -0.64485f, -3f, -2.97419f, 0.130901f, -4f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f,
				-2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -3f, 0f, 0f, -18f, 0f, 0f, -2f, 0f,
				0f, -2f, 0f, 0f, -0.999999f, 0f, 0f, -3f, 2.93121f, -0.635722f, -2f, 2f, 0f, -1f, 2.94132f, -0.480902f,
				-2f, 2.95641f, -0.505693f, -2f, 2.97591f, -0.374199f, -2f, -0.895776f, 2.83902f, -2f, -1.60118f,
				2.50996f, -2f, -1.40232f, 1.40201f, -2f, -2.5104f, 1.60042f, -2f, -2.8392f, 0.896156f, -2f, 2.97005f,
				-0.418143f, -2f, 2.94862f, -0.549299f, -2f, 2.9216f, -0.678538f, -3f, -2.95872f, 2.6612f, -2f,
				-2.80465f, 2.80402f, -2f, -2.64105f, 1.37416f, -2f, -2.90669f, 0.644421f, -3f, -2.62669f, 1.42075f,
				-3f, -2.97419f, -0.130883f, -3f, -2.83883f, -0.897032f, -3f, -2.51115f, -1.59965f, -3f, -1.402f,
				-1.40201f, -3f, -1.59965f, -2.51115f, -3f, -0.897036f, -2.83883f, -2f, -0.642445f, 2.90684f, -2f,
				-1.37514f, 2.64058f, -4f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f,
				0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -15f, 0f, 0f, -1f, 2.97066f,
				-0.240451f, 0f, 1f, 0f };

		ByteBuffer nbb = ByteBuffer.allocateDirect(valueNormal.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		mNormalBuffer[0] = nbb.asFloatBuffer();
		mNormalBuffer[0].put(valueNormal);
		mNormalBuffer[0].position(0);
	}

	public void setNormal1() {
		float valueNormal[] = { -2f, 2f, 2f, -2f, -2f, -2f, -1f, -1f, 1f, -1f, 1f, -1f, 2f, -2f, 2f, 1f, -1f, -1f, 1f,
				1f, 1f, 2f, 2f, -2f };

		ByteBuffer nbb = ByteBuffer.allocateDirect(valueNormal.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		mNormalBuffer[1] = nbb.asFloatBuffer();
		mNormalBuffer[1].put(valueNormal);
		mNormalBuffer[1].position(0);
	}

	public void setNormal2() {
		float valueNormal[] = { -3.15606f, -0.109816f, 2.68715f, 2.5e-005f, 2.56587f, 1.55445f, 0f, 0.855276f,
				0.518172f, -0.662297f, 0.845081f, 9.15853f, -0.000211f, 2.5658f, 1.55456f, -0.000253f, 3.4211f,
				2.0727f, 1e-006f, 1.71055f, 1.03634f, -0.000114f, 2.5659f, 1.5544f, 3.23913f, -0.162511f, 2.4503f, 0f,
				0.855276f, 0.518172f, 0.000711f, 3.42096f, 2.07293f, 0.000841f, 2.56562f, 1.55486f, 1.61984f,
				-0.935225f, 0.70814f, 0.809911f, -0.467543f, 0.354183f, 0.830995f, -1.39065f, 1.1205f, 2.42983f,
				-1.40278f, 1.06213f, 0.809881f, -0.467596f, 0.354183f, 2.42857f, -1.40426f, 1.06307f, 3.23861f,
				-1.87182f, 1.41691f, 1.61991f, -0.935247f, 0.707962f, 3.23923f, -1.87316f, 1.41373f, 3.23924f,
				-1.87324f, 1.41361f, -3.15496f, -1.82292f, 1.6502f, -3.15608f, -1.82038f, 1.65087f, -2.36612f,
				-1.36735f, 1.23767f, -3.15607f, -1.8203f, 1.65097f, -1.57732f, -0.911625f, 0.825222f, -1.57738f,
				-0.91156f, 0.825175f, -1.57789f, -0.910994f, 0.824844f, -1.57791f, -0.911013f, 0.824771f, -0.788953f,
				-0.455494f, 0.412403f };

		ByteBuffer nbb = ByteBuffer.allocateDirect(valueNormal.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		mNormalBuffer[2] = nbb.asFloatBuffer();
		mNormalBuffer[2].put(valueNormal);
		mNormalBuffer[2].position(0);
	}

	public void setNormal3() {
		float valueNormal[] = { -4.69619f, 0.432407f, -1.57624f, -4.0394f, 1.02349f, -0.706902f, -4.06328f, 1.07052f,
				-0.45286f, -2.59457f, 0.639301f, -0.889353f, -2.56559f, 2.57074f, 2.16436f, 0.003682f, -2.77901f,
				3.18542f, 0.600404f, -2.36862f, 3.44732f, -3.13136f, 2.16331f, 1.83963f, -3.13978f, 0.120406f,
				-1.72859f, -3.49637f, 0.992087f, -2.15564f, -3.13283f, 2.1621f, 1.83791f, -3.70266f, 0.766734f,
				2.33097f, -2.46041f, 1.45218f, 2.17275f, -2.83738f, 2.07525f, 0.758991f, 4.06401f, -1.07036f,
				0.452033f, 0.605273f, 4.72836f, -1.46461f, 0.098753f, 5.74588f, -0.919864f, 4.02075f, -1.27251f,
				-0.285625f, -3.8101f, 1.55781f, 0.963365f, -3.89819f, 1.45419f, 0.745346f, -0.745462f, 2.51633f,
				2.4456f, -0.934864f, 1.28736f, 2.70858f, -0.339989f, 4.04101f, 2.88865f, 0.66825f, 4.44439f, 2.12438f,
				-2.83691f, 2.07562f, 0.759495f, -0.310378f, 5.80349f, 0.31295f, -4.30312f, 2.40274f, 0.755832f,
				-1.69434f, 3.11231f, 2.30687f, -1.0108f, 3.47958f, 2.17839f, -0.854385f, 5.28342f, -0.534221f,
				0.138089f, 2.93647f, 2.0519f, 0.087204f, 2.64552f, 0.962954f, 0.539882f, 4.08503f, 0.938099f, 2.2339f,
				3.7988f, 0.55921f, 1.60084f, 3.16059f, -0.563973f, 1.06467f, 3.80453f, -1.5044f, 1.34613f, 2.67317f,
				-1.97715f, -0.11996f, 3.00079f, -1.97887f, -0.535275f, 6.1621f, -2.57172f, 0.667525f, 2.06757f,
				-2.85397f, 0.101766f, 1.6607f, -3.1764f, -1.03617f, 2.09849f, -3.51527f, -2.35593f, 2.70943f, 2.23357f,
				-5.00635f, 2.96572f, -0.116378f, -4.55617f, 1.91628f, -0.657117f, -3.56157f, 0.34865f, 0.246366f,
				-5.68217f, 2.12489f, -1.98035f, -3.62559f, 0.63244f, -3.34078f, -5.46811f, 4.37691f, -2.96471f,
				-1.89622f, 0.540745f, -2.99481f, -1.22668f, 0.86886f, -3.25226f, 1.2387f, 3.46369f, -3.34712f,
				-2.55181f, 1.58498f, -1.97687f, -0.004166f, 2.77891f, -3.1846f, -2.60342f, 1.29335f, -3.06705f,
				-0.600826f, 2.36801f, -3.44891f, -1.45471f, 0.750812f, -3.19083f, -0.277376f, 0.272406f, -3.11675f,
				1.44918f, -0.753263f, 3.19055f, 2.60255f, -1.29392f, 3.06701f, 0.467809f, 1.17506f, 3.75827f, 1.23823f,
				3.46365f, -3.34618f, 0.942298f, 3.62313f, -1.96336f, 1.09834f, 3.88196f, -1.26338f, -1.08335f,
				-4.05338f, 0.512657f, -0.130911f, -3.59138f, 0.126315f, -4.02094f, 1.27237f, 0.285593f, -0.744874f,
				2.5152f, 2.43921f, -0.933829f, 1.28718f, 2.70541f, -0.94206f, -3.62282f, 1.96389f, -1.09783f, -3.8821f,
				1.26162f, -0.66826f, -4.44489f, -2.12596f, 0.566823f, -3.68991f, -1.97739f, -0.567673f, 3.68976f,
				1.97877f, 0.281247f, -0.037078f, 4.0861f, 3.13114f, -2.16352f, -1.8399f, 2.83697f, -2.07578f,
				-0.760319f, 0.935082f, -1.28687f, -2.70711f, 2.56535f, -2.56968f, -2.15942f, 0.676262f, 4.11024f,
				0.712147f, 0.130816f, 3.59118f, -0.127142f, 1.08318f, 4.0536f, -0.511272f, -1.2386f, -3.46347f,
				3.34787f, -0.003807f, 2.77925f, -3.18395f, -0.600137f, 2.3674f, -3.45289f, 4.69676f, -0.432489f,
				1.57445f, 3.49639f, -0.991644f, 2.15749f, 2.55171f, -1.58529f, 1.97629f, 3.81079f, -1.55716f,
				-0.962131f, -0.675605f, -4.11041f, -0.71455f, 0.745498f, -2.51527f, -2.44108f, -2.56422f, 2.57015f,
				2.15854f, -2.60284f, 1.29298f, -3.07018f, -2.55207f, 1.58551f, -1.97434f, -0.277451f, 0.271961f,
				-3.1183f, -1.45523f, 0.749893f, -3.19349f, 0.666272f, 4.44377f, 2.12633f };

		ByteBuffer nbb = ByteBuffer.allocateDirect(valueNormal.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		mNormalBuffer[3] = nbb.asFloatBuffer();
		mNormalBuffer[3].put(valueNormal);
		mNormalBuffer[3].position(0);
	}

	public void setNormal4() {
		float valueNormal[] = { -0.528562f, -1.41348f, -2.56554f, -0.033546f, -1.47299f, -2.58684f, 0.153981f,
				-1.39962f, -2.62209f, -1.76983f, -1.55996f, 1.81711f, -1.92358f, -1.49468f, 1.71142f, -1.41624f,
				-1.4909f, 2.15259f, 2.62776f, -1.38813f, 0.153517f, 2.51109f, -1.46589f, 0.637125f, 2.49307f, -1.3991f,
				0.82636f, 1.31286f, -1.50863f, 2.20531f, 1.16773f, -1.44471f, 2.32543f, 1.73553f, -1.42899f, 1.95021f,
				2.25453f, -1.47864f, 1.2618f, 2.18815f, -1.41334f, 1.43921f, 0.034212f, -1.53648f, 2.5501f, 0.524641f,
				-1.45969f, 2.54043f, 0.695071f, -1.52327f, 2.46186f, -2.17929f, -1.56074f, 1.29716f, -2.52377f,
				-1.49106f, 0.52027f, -2.54137f, -1.55178f, 0.033222f, -2.57697f, -1.48311f, -0.15085f, -2.16725f,
				-1.45917f, -1.42679f, -2.22857f, -1.5302f, -1.24838f, -1.83522f, -1.51642f, -1.7884f, -2.46875f,
				-1.54246f, -0.627214f, -2.45564f, -1.47265f, -0.814805f, -1.24029f, -1.55536f, 2.21568f, -0.811924f,
				-1.4836f, 2.44977f, 2.59587f, -1.45617f, -0.034286f, 1.84529f, -1.49339f, 1.79627f, -1.31425f,
				-1.50159f, -2.20965f, -0.699664f, -1.4868f, -2.4827f, -1.17081f, -1.42878f, -2.33404f, -1.72953f,
				-1.44448f, -1.94514f, -2.30098f, -1.49476f, 1.15518f, -2.44224f, -1.55849f, 0.688785f, -0.625723f,
				-1.54756f, 2.4657f, -0.150507f, -1.47299f, 2.58226f, 2.58217f, -1.37981f, -0.532704f, 2.50231f,
				-1.44903f, -0.706133f, 2.35831f, -1.37581f, -1.18362f, 2.23569f, -1.4466f, -1.33008f, 1.97171f,
				-1.37608f, -1.75345f, 1.81489f, -1.44771f, -1.86299f, 1.44953f, -1.3802f, -2.20233f, 1.26956f,
				-1.45265f, -2.26694f, 0.829052f, -1.38819f, -2.4986f, 0.638804f, -1.46137f, -2.51362f, 0f, -2f, 0f, 0f,
				-3f, 0f, 0f, -1f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f,
				-3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f,
				-3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -2f, 0f, 0f, -1f, 0f, 2.34978f,
				1.13704f, -1.44443f, 5.19344f, 1.13228f, -2.43795f, 4.38537f, 1.13339f, -3.69859f, 1.89593f, 1.13745f,
				-2.0032f, 3.27933f, 1.1327f, -4.70733f, 1.31296f, 1.13605f, -2.42615f, 1.94913f, 1.13024f, -5.39685f,
				0.640712f, 1.13291f, -2.6846f, 0.486229f, 1.12611f, -5.71898f, -0.076198f, 1.12821f, -2.76074f,
				-1.01156f, 1.12063f, -5.65211f, -0.788958f, 1.12232f, -2.64926f, -3.00994f, 1.11419f, -6.02229f,
				-1.44894f, 1.1156f, -2.35721f, -3.13607f, 1.10716f, -3.57103f, -2.01171f, 1.10845f, -1.90377f,
				-4.71873f, 1.09999f, -3.2859f, -2.43835f, 1.10143f, -1.31946f, -5.41067f, 1.09332f, -1.95395f,
				-2.69927f, 1.09511f, -0.643702f, -5.73419f, 1.08758f, -0.486939f, -2.77603f, 1.0898f, 0.076662f,
				-5.66669f, 1.08302f, 1.01381f, -2.66315f, 1.08583f, 0.792426f, -5.2123f, 1.08007f, 2.44614f, -2.36783f,
				1.08361f, 1.45546f, -5.04833f, 1.07896f, 4.4752f, -1.91032f, 1.08326f, 2.01905f, -2.64369f, 1.07972f,
				3.96237f, -1.32256f, 1.08472f, 2.44413f, 2.64444f, 1.1349f, -0.78741f, 5.64859f, 1.12944f, -1.01051f,
				-2.13429f, 1.08226f, 6.39858f, -0.645116f, 1.08794f, 2.70181f, -0.226669f, 1.08647f, 5.74731f,
				0.076491f, 1.09273f, 2.77478f, 1.26846f, 1.09205f, 5.60808f, 0.791292f, 1.09873f, 2.65833f, 2.67542f,
				1.09857f, 5.08636f, 1.45096f, 1.10549f, 2.36059f, 3.13648f, 1.10559f, 3.57164f, 2.01045f, 1.11255f,
				1.9028f, 4.71416f, 1.11262f, 3.28369f, 2.43194f, 1.11948f, 1.31629f, 5.40103f, 1.11926f, 1.95038f,
				2.68738f, 1.12577f, 0.64138f, 5.71959f, 1.12494f, 0.486274f, 2.75962f, 1.13101f, -0.075819f,
				-0.756285f, 0f, -2.87956f, -0.906412f, 0f, -1.76359f, 2.11572f, 0f, -2.09467f, 1.50147f, 0f, -2.57083f,
				2.66428f, 0f, 2.93755f, 1.24361f, 0f, 2.70499f, 0.014645f, 0f, -2.97713f, 2.5855f, 0f, -1.47612f,
				-2.66429f, 0f, -2.93744f, -2.58571f, 0f, 1.47573f, -1.46883f, 0f, 1.33205f, -2.57103f, 0f, -1.50123f,
				0.78497f, 0f, -2.87186f, 0.501261f, 0f, 2.93472f, -0.27557f, 0f, 2.96439f, -2.87186f, 0f, -0.78497f,
				-2.97713f, 0f, -0.014656f, -2.14787f, 0f, 3.33376f, -0.606052f, 0f, 1.88803f, 2.57092f, 0f, 1.50136f,
				-2.87956f, 0f, 0.756283f, 2.87194f, 0f, 0.784547f, 2.97721f, 0f, 0.014879f, 2.87944f, 0f, -0.756454f };

		ByteBuffer nbb = ByteBuffer.allocateDirect(valueNormal.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		mNormalBuffer[4] = nbb.asFloatBuffer();
		mNormalBuffer[4].put(valueNormal);
		mNormalBuffer[4].position(0);
	}

	public void setNormal5() {
		float valueNormal[] = { 3f, 0f, 0f, 8f, 0f, 0f, 4f, 0f, 0f, 2f, 0f, 0f, 2f, 0f, 0f, 2f, 0f, 0f, 2f, 0f, 0f, 3f,
				0f, 0f, 2f, 0f, 0f, 3f, 0f, 0f, 8f, 0f, 0f, 3f, 0f, 0f, 3f, 0f, 0f, 4f, 0f, 0f, 2f, 0f, 0f, 2f, 0f, 0f,
				2f, 0f, 0f, 2f, 0f, 0f, 2f, 0f, 0f, 3f, 0f, 0f, 3f, 0f, 0f, 2f, 0f, 0f, 1f, 0f, 0f, 2f, 0f, 0f, 3f, 0f,
				0f, 3f, 0f, 0f, 3f, 0f, 0f, 4f, 0f, 0f, 2f, 0f, 0f, 1f, 0f, 0f, 2f, 0f, 0f, 3f, 0f, 0f, 3f, 0f, 0f, 3f,
				0f, 0f, 3f, 0f, 0f, 3f, 0f, 0f, 3f, 0f, 0f, 3f, 0f, 0f, 3f, 0f, 0f, 3f, 0f, 0f, 3f, 0f, 0f, 3f, 0f, 0f,
				3f, 0f, 0f, 3f, 0f, 0f, 3f, 0f, 0f, 3f, 0f, 0f, 4f, 0f, 0f, 2f, 0f, 0f, 3f, 0f, 0f, 3f, 0f, 0f, 3f, 0f,
				0f, 2f, 0f, 0f };

		ByteBuffer nbb = ByteBuffer.allocateDirect(valueNormal.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		mNormalBuffer[5] = nbb.asFloatBuffer();
		mNormalBuffer[5].put(valueNormal);
		mNormalBuffer[5].position(0);
	}

	public void setNormal6() {
		float valueNormal[] = { -3f, 0f, 0f, -4f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -10f, 0f, 0f, -5f, 0f, 0f, -4f, 0f,
				0f, -13f, 0f, 0f, -3f, 0f, 0f, -5f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -3f, 0f, 0f, -7f,
				0f, 0f, -5f, 0f, 0f, -2f, 0f, 0f, -5f, 0f, 0f, -2f, 0f, 0f, -3f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f,
				0f, 0f, -2f, 0f, 0f, -4f, 0f, 0f, -6f, 0f, 0f, -2f, 0f, 0f, -3f, 0f, 0f, -14f, 0f, 0f, -2f, 0f, 0f,
				-4f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f,
				-2f, 0f, 0f, -2f, 0f, 0f, -3f, 0f, 0f, -4f, 0f, 0f, -2f, 0f, 0f, -4f, 0f, 0f, -2f, 0f, 0f, -3f, 0f, 0f,
				-3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -4f, 0f, 0f,
				-2f, 0f, 0f, -4f, 0f, 0f, -2f, 0f, 0f, -4f, 0f, 0f, -2f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -4f, 0f, 0f,
				-2f, 0f, 0f, -5f, 0f, 0f, -5f, 0f, 0f, -3f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -3f, 0f, 0f, -4f, 0f, 0f,
				-2f, 0f, 0f, -3f, 0f, 0f, -4f, 0f, 0f, -2f, 0f, 0f, -3f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f,
				-2f, 0f, 0f, -4f, 0f, 0f, -3f, 0f, 0f, -2f, 0f, 0f, -0.999999f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f,
				0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f,
				0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -4f, 0f, 0f, -6f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f,
				0f, 0f, -3f, 0f, 0f, -4f, 0f, 0f, -2f, 0f, 0f, -3f, 0f, 0f, -4f, 0f, 0f, -2f, 0f, 0f, -3f, 0f, 0f, -6f,
				0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f };

		ByteBuffer nbb = ByteBuffer.allocateDirect(valueNormal.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		mNormalBuffer[6] = nbb.asFloatBuffer();
		mNormalBuffer[6].put(valueNormal);
		mNormalBuffer[6].position(0);
	}

	public void setNormal7() {
		float valueNormal[] = { -2f, 0f, 0f, -2f, 0f, 0f, -1f, 0f, 0f, -1f, 0f, 0f, -2f, -2f, -2f, 0f, -2f, 2f, -1f,
				-1f, 1f, 0f, -1f, -1f, 0f, 2f, -2f, -1f, 1f, -1f, -2f, 2f, 2f, 0f, 1f, 1f, -3f, 0f, 0f, -2f, 0f, 0f,
				-1f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -4f, 0f, 0f,
				-2f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f,
				-3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -2f, 0f, 0f, -1f, 0f, 0f };

		ByteBuffer nbb = ByteBuffer.allocateDirect(valueNormal.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		mNormalBuffer[7] = nbb.asFloatBuffer();
		mNormalBuffer[7].put(valueNormal);
		mNormalBuffer[7].position(0);
	}

	public void setNormal8() {
		float valueNormal[] = { 0f, 1.37382f, -2.64109f, -3f, 0.895649f, -2.83944f, -3f, 1.60066f, -2.51011f, 0f,
				0.64431f, -2.90679f, 0f, -2.804f, 2.80402f, -3f, -1.59958f, 2.51117f, -3f, -1.402f, 1.40201f, 0f,
				-1.37425f, 2.64122f, 0f, -2.64122f, 1.37426f, -2f, -2.83899f, 0.896215f, 0f, -2.90672f, 0.643494f, -3f,
				-2.51116f, 1.59959f, 0f, -2.83899f, -0.896232f, -3f, -2.64093f, -1.37465f, 0f, -2.5106f, -1.60033f,
				-3f, -2.90671f, -0.643497f, -3f, -0.896228f, 2.83899f, 0f, -0.643522f, 2.90671f, -3f, 2.51013f,
				-1.60064f, 0f, 2.80444f, -2.80439f, -3f, 1.40222f, -1.4022f, 0f, 2.6411f, -1.37382f, -3f, -0.130272f,
				2.97443f, 0f, 0.130272f, 2.97443f, 0f, 0.896228f, 2.83899f, -3f, 1.37462f, 2.64094f, -3f, 0.643522f,
				2.90671f, 0f, 1.60031f, 2.51061f, -3f, 2.90679f, 0.644346f, 0f, 2.97414f, 0.131014f, -1f, 2.97414f,
				-0.131003f, 0f, 2.83944f, 0.895661f, -3f, 2.804f, 2.80442f, 0f, 2.51069f, 1.5999f, -3f, 2.64139f,
				1.37344f, 0f, 1.402f, 1.40221f, -1f, -2.97444f, 0.130261f, -3f, -2.80444f, -2.804f, -3f, -1.37345f,
				-2.64138f, -3f, -0.64431f, -2.90679f, -3f, 0.13099f, -2.97415f, -2f, 2.83943f, -0.895677f, 0f,
				2.90679f, -0.644349f, 0f, -0.13099f, -2.97415f, 0f, -0.895649f, -2.83944f, 0f, -1.59992f, -2.51068f,
				0f, -1.40222f, -1.402f, 0f, -2.97444f, -0.13025f };

		ByteBuffer nbb = ByteBuffer.allocateDirect(valueNormal.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		mNormalBuffer[8] = nbb.asFloatBuffer();
		mNormalBuffer[8].put(valueNormal);
		mNormalBuffer[8].position(0);
	}

	public void setNormal9() {
		float valueNormal[] = { 0f, -2.83899f, -0.896215f, -3f, -2.64094f, -1.37463f, 0f, -2.5106f, -1.60032f, -3f,
				-2.90672f, -0.643494f, -3f, -2.8044f, -2.80402f, 0f, -1.4022f, -1.40201f, 0f, -1.59988f, -2.51071f,
				-3f, -1.37344f, -2.64139f, 0f, -0.895678f, -2.83943f, -3f, -0.644367f, -2.90679f, 0f, -0.131019f,
				-2.97414f, -3f, 0.131019f, -2.97414f, -2f, -2.83899f, 0.896232f, -1f, -2.97444f, 0.13025f, -3f,
				-2.51116f, 1.5996f, -3f, -1.40202f, 1.402f, -3f, -1.59961f, 2.51115f, -3f, -0.896199f, 2.839f, -3f,
				-0.130243f, 2.97445f, -3f, 0.643465f, 2.90672f, -3f, 0.895678f, -2.83943f, -3f, 1.37464f, 2.64092f,
				-3f, 1.60062f, -2.51014f, -3f, 2.80404f, 2.80439f, -3f, 1.4022f, -1.40221f, -3f, 2.64138f, 1.37346f,
				-3f, 2.51013f, -1.60063f, -3f, 2.90679f, 0.644349f, -2f, 2.83944f, -0.895661f, -1f, 2.97414f,
				-0.131014f, 0f, 2.64111f, -1.3738f, 0f, 2.90679f, -0.644346f, 0f, 2.97414f, 0.131003f, 0f, 2.83943f,
				0.895677f, 0f, 2.51069f, 1.59991f, 0f, 1.40202f, 1.4022f, 0f, 1.60035f, 2.51058f, 0f, 0.896199f,
				2.839f, 0f, 0.130243f, 2.97445f, 0f, -0.643465f, 2.90672f, 0f, -1.37427f, 2.64121f, 0f, 0.644367f,
				-2.90679f, 0f, 1.37381f, -2.64111f, 0f, 2.8044f, -2.80442f, 0f, -2.80404f, 2.804f, 0f, -2.64121f,
				1.37428f, 0f, -2.90671f, 0.643497f, 0f, -2.97444f, -0.130261f };

		ByteBuffer nbb = ByteBuffer.allocateDirect(valueNormal.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		mNormalBuffer[9] = nbb.asFloatBuffer();
		mNormalBuffer[9].put(valueNormal);
		mNormalBuffer[9].position(0);
	}

	public void setNormal10() {
		float valueNormal[] = { -2f, 2.83989f, -0.895088f, 0f, 2.64157f, -1.37259f, -5f, 2.51023f, -1.6002f, 0f,
				2.90686f, -0.645195f, 0f, 2.80401f, -2.80482f, -3f, 1.60103f, -2.51005f, -4f, 1.402f, -1.40241f, 0f,
				1.37495f, -2.64068f, 0f, -1.37533f, 2.64076f, -3f, -0.897037f, 2.83859f, -4f, -1.60017f, 2.5109f, 0f,
				-0.643587f, 2.90656f, -4f, 2.64155f, 1.37263f, 0f, 2.83987f, 0.895121f, -3f, 2.90686f, 0.645201f, 0f,
				2.51022f, 1.60022f, 0f, -1.60009f, -2.51096f, -4f, -2.80252f, -2.80595f, -4f, -1.37529f, -2.64079f, 0f,
				-1.40126f, -1.40298f, 0f, -2.84009f, -0.89358f, -4f, -2.64157f, -1.37259f, 0f, -2.51023f, -1.6002f,
				-3f, -2.90726f, -0.642182f, 0f, 1.6011f, 2.50999f, -4f, 2.80408f, 2.80476f, -3f, 1.37498f, 2.64065f,
				0f, 1.40204f, 1.40238f, 0f, -2.90725f, 0.642187f, -1f, -2.97444f, 0.130246f, 0f, -2.97444f, -0.130268f,
				-2f, -2.84007f, 0.893614f, 0f, -2.64155f, 1.37263f, -3f, -2.51022f, 1.60022f, 0f, -2.8026f, 2.8059f,
				-5f, -1.4013f, 1.40295f, -3f, -2.80327f, -2.8052f, -3f, -2.51003f, -1.60105f, -3f, -2.64067f,
				-1.37494f, -2f, -1.40164f, -1.4026f, -2f, -2.83898f, -0.896504f, -3f, -2.90664f, -0.64418f, -3f,
				2.80327f, -2.8052f, -3f, 2.51003f, -1.60105f, -2f, 2.64067f, -1.37494f, -3f, 1.40164f, -1.4026f, 0f,
				0.89615f, 2.83902f, -4f, 0.64344f, 2.90673f, 0f, 2.97384f, 0.131752f, -1f, 2.97384f, -0.131775f, 0f,
				-0.897095f, -2.83858f, -3f, -0.643702f, -2.90654f, 0f, -0.129905f, -2.97447f, -4f, 0.130498f,
				-2.97445f, -3f, -1.59884f, -2.51133f, -3f, -1.37215f, -2.64202f, -5f, 0f, 0f, -4f, 0f, 0f, -6f, 0f, 0f,
				-5f, 0f, 0f, -9f, 0f, 0f, -7f, 0f, 0f, -3f, -0.129848f, 2.9745f, -6f, 0f, 0f, -6f, 0f, 0f, -7f, 0f, 0f,
				-9f, 0f, 0f, -4f, 0f, 0f, -6f, 0f, 0f, -4f, 0f, 0f, -5f, 0f, 0f, -6f, 0f, 0f, -6f, 0f, 0f, -8f, 0f, 0f,
				-7f, 0f, 0f, -6f, 0f, 0f, -6f, 0f, 0f, -3f, 0.896208f, -2.83901f, -7f, 0f, 0f, -8f, 0f, 0f, -6f, 0f,
				0f, -5f, 0f, 0f, 0f, 0.130441f, 2.97447f, -4f, 2.97418f, 0.131513f, -3f, 2.90701f, 0.643897f, -2f,
				2.83989f, 0.8946f, -1f, 2.97424f, -0.130168f, -1f, -2.97418f, 0.131515f, -2f, -2.90701f, 0.643901f,
				-2f, -2.83989f, 0.894602f, -3f, -2.97424f, -0.13017f, -2f, 2.83898f, -0.896502f, -2f, 2.90664f,
				-0.644176f, 0f, 0.643555f, -2.90672f, -2f, 1.3741f, 2.64044f, -3f, 0.894004f, 2.84f, -2f, 1.60308f,
				2.50803f, -4f, 0.642875f, 2.90716f, -2f, 1.37215f, -2.64202f, -3f, 0.642984f, -2.90711f, -3f,
				-0.131452f, -2.9742f, -2f, -0.894661f, -2.83985f, -2f, 2.50804f, 1.60309f, -3f, 1.40258f, 1.40253f,
				-2f, 0.130147f, 2.97425f, -3f, -0.643747f, 2.90704f, -3f, -1.37411f, 2.64044f, -2f, -2.80515f,
				2.80507f, -3f, -2.64041f, 1.37419f, -3f, 2.80515f, 2.80507f, -3f, 2.64041f, 1.37419f, -2f, -0.131452f,
				2.9742f, -4f, -0.894442f, 2.83994f, -4f, 1.59884f, -2.51133f, -2f, 0.894223f, -2.83991f, -4f,
				0.130147f, -2.97425f, -2f, -0.643856f, -2.907f, -3f, -1.60308f, 2.50803f, -3f, -1.40258f, 1.40253f,
				-3f, -2.50804f, 1.60309f };

		ByteBuffer nbb = ByteBuffer.allocateDirect(valueNormal.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		mNormalBuffer[10] = nbb.asFloatBuffer();
		mNormalBuffer[10].put(valueNormal);
		mNormalBuffer[10].position(0);
	}

	public void setNormal11() {
		float valueNormal[] = { 0f, -11f, 0f, 0f, -8f, 0f, 0f, -4f, 0f, 0f, -3f, 0f, 0f, -2f, 0f, 0f, -3f, 0f, 0f, -9f,
				0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f,
				0f, 0f, -2f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f,
				0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f };

		ByteBuffer nbb = ByteBuffer.allocateDirect(valueNormal.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		mNormalBuffer[11] = nbb.asFloatBuffer();
		mNormalBuffer[11].put(valueNormal);
		mNormalBuffer[11].position(0);
	}

	public void setNormal12() {
		float valueNormal[] = { 0f, 0.131273f, 2.99569f, 0f, 0f, 3f, 0f, 0.065636f, 2.99784f, 0f, 0f, 3f, 0f,
				0.837633f, 2.87479f, 0f, 0.642285f, 2.89406f, 0f, 0.711838f, 2.9085f, 0f, 0.321142f, 2.94703f, 0f, 0f,
				2f, 0f, 0f, 0.999999f, 0f, 0f, 1f, 0f, 0.456332f, 2.95931f, 0f, 0.326621f, 2.97642f, 0f, 0f, 2f };

		ByteBuffer nbb = ByteBuffer.allocateDirect(valueNormal.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		mNormalBuffer[12] = nbb.asFloatBuffer();
		mNormalBuffer[12].put(valueNormal);
		mNormalBuffer[12].position(0);
	}

	public void setNormal13() {
		float valueNormal[] = { 0f, -2f, 0f, 0f, -1f, 0f, 0f, -2f, 0f, 0f, -1f, 0f };

		ByteBuffer nbb = ByteBuffer.allocateDirect(valueNormal.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		mNormalBuffer[13] = nbb.asFloatBuffer();
		mNormalBuffer[13].put(valueNormal);
		mNormalBuffer[13].position(0);
	}

	public void setNormal14() {
		float valueNormal[] = { -2147.48f, -2147.48f, -2147.48f, 0f, 2.95966f, 0.454557f, 0f, 2.9766f, 0.325736f,
				-2147.48f, -2147.48f, -2147.48f, -2147.48f, -2147.48f, -2147.48f, 0f, 1.99569f, 0.131277f, 0f,
				0.997843f, 0.065638f, -8f, 0f, 0f, -2f, 0f, 0f, -1f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f, -2f, 0f, 0f,
				-2f, 0f, 0f, -2f, 0f, 0f, -1f, 0f, 0f, 3f, 0f, 0f, 4f, 0f, 0f, 8f, 0f, 0f, 4f, 0f, 0f, 4f, 0f, 0f, 4f,
				0f, 0f, 4f, 0f, 0f, 3f, 0f, 0f, 9f, 0f, 0f, 1f, 0f, 0f, 1f, 0f, 0f, 0f, 1.87382f, 2.33554f, 0f,
				2.8224f, 2.82221f, 0f, 1.7703f, 2.41495f, 0f, 1.4112f, 1.41111f, 0f, 0.885062f, 1.79351f, 0f, 1.44066f,
				2.62496f, 0f, 0.442531f, 0.896753f, 0f, 1.55372f, 2.55966f, 0f, 2.41498f, 1.77027f, 0f, 2.55981f,
				1.5534f, 0f, 2.62528f, 1.43999f, 0f, 2.33562f, 1.87373f, 0f, 3.73704f, 1.40847f, 0f, 0.893416f,
				-1.35582f, 0f, 0.946708f, 0.322091f, 0f, 1.89342f, -0.355816f, 0f, 2.74055f, 1.20648f, 0f, -2f, 0f, 0f,
				-3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -4f, 0f, 0f, -2f, 0f, 0f, -4f, 0f, 0f,
				-2f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f,
				-3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -3f, 0f, 0f, -2f, 0f, 0f, -1f, 0f, 0f, 0f, -2f, 0f, 0f, -1f, 0f,
				-2.79072f, 1.08499f, 0f, -2.87485f, 0.837387f, 0f, -2.90859f, 0.711386f, 0f, -2.74034f, 1.20659f, 0f,
				-2.9765f, 0.32588f, 0f, -1.99572f, 0.130752f, 0f, -0.99786f, 0.065376f, 0f, -2.95942f, 0.455633f, 0f,
				-0.712233f, 2.90835f, 0f, -0.455966f, 2.95935f, 0f, -0.838569f, 2.87447f, 0f, -0.326034f, 2.97647f, 0f,
				-2.41544f, 1.76941f, 0f, -2.56048f, 1.55254f, 0f, -2.62522f, 1.44037f, 0f, -2.33514f, 1.87412f, 0f,
				-1.08565f, 2.79055f, 0f, -1.2064f, 2.74052f, 0f, -1.77009f, 2.41509f, 0f, -1.55335f, 2.55988f, 0f,
				-1.87374f, 2.33559f, 0f, -1.44025f, 2.62518f, 0f, -0.130734f, 1.99572f, 0f, -0.065367f, 0.997861f, 0f,
				-2.82148f, 2.82327f, 0f, -1.41074f, 1.41164f };

		ByteBuffer nbb = ByteBuffer.allocateDirect(valueNormal.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		mNormalBuffer[14] = nbb.asFloatBuffer();
		mNormalBuffer[14].put(valueNormal);
		mNormalBuffer[14].position(0);
	}

	public void setNormal15() {
		float valueNormal[] = { 0f, -0.839196f, -2.87422f, 0f, -1.08606f, -2.79049f, 0f, -0.712163f, -2.9083f, 0f,
				-1.2059f, -2.74083f, 0f, -0.129708f, -1.99579f, 0f, -0.324752f, -2.97658f, 0f, -0.064854f, -0.997894f,
				0f, -0.454941f, -2.95948f, 0f, -1.43933f, -2.62563f, 0f, -1.55292f, -2.56008f, 0f, -2.74104f,
				-1.20527f, 0f, -2.62531f, -1.4398f, 0f, -2.55945f, -1.55387f, 0f, -2.79091f, -1.08482f, 0f, -2.87462f,
				-0.838084f, 0f, -2.90846f, -0.711805f, 0f, -1.77026f, -2.41495f, 0f, -1.874f, -2.33537f, 0f, -2.95939f,
				-0.455853f, 0f, -2.97647f, -0.326179f, 0f, -1.99571f, -0.131003f, 0f, -0.997852f, -0.065501f, 0f,
				-2.41466f, -1.77082f, 0f, -2.33573f, -1.87369f, 0f, -2.82303f, -2.82156f, 0f, -1.41152f, -1.41078f };

		ByteBuffer nbb = ByteBuffer.allocateDirect(valueNormal.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		mNormalBuffer[15] = nbb.asFloatBuffer();
		mNormalBuffer[15].put(valueNormal);
		mNormalBuffer[15].position(0);
	}

	public void setColor0() {
		float valueColor[] = { 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f };

		ByteBuffer cbb = ByteBuffer.allocateDirect(valueColor.length * 4);
		cbb.order(ByteOrder.nativeOrder());
		mColorBuffer[0] = cbb.asFloatBuffer();
		mColorBuffer[0].put(valueColor);
		mColorBuffer[0].position(0);
	}

	public void setColor1() {
		float valueColor[] = { 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f,
				1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f };

		ByteBuffer cbb = ByteBuffer.allocateDirect(valueColor.length * 4);
		cbb.order(ByteOrder.nativeOrder());
		mColorBuffer[1] = cbb.asFloatBuffer();
		mColorBuffer[1].put(valueColor);
		mColorBuffer[1].position(0);
	}

	public void setColor2() {
		float valueColor[] = { 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f,
				1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f,
				1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f,
				1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f,
				1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f,
				1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f };

		ByteBuffer cbb = ByteBuffer.allocateDirect(valueColor.length * 4);
		cbb.order(ByteOrder.nativeOrder());
		mColorBuffer[2] = cbb.asFloatBuffer();
		mColorBuffer[2].put(valueColor);
		mColorBuffer[2].position(0);
	}

	public void setColor3() {
		float valueColor[] = { 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f };

		ByteBuffer cbb = ByteBuffer.allocateDirect(valueColor.length * 4);
		cbb.order(ByteOrder.nativeOrder());
		mColorBuffer[3] = cbb.asFloatBuffer();
		mColorBuffer[3].put(valueColor);
		mColorBuffer[3].position(0);
	}

	public void setColor4() {
		float valueColor[] = { 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f };

		ByteBuffer cbb = ByteBuffer.allocateDirect(valueColor.length * 4);
		cbb.order(ByteOrder.nativeOrder());
		mColorBuffer[4] = cbb.asFloatBuffer();
		mColorBuffer[4].put(valueColor);
		mColorBuffer[4].position(0);
	}

	public void setColor5() {
		float valueColor[] = { 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f,
				0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f,
				1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f,
				0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f,
				1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f,
				0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f,
				1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f,
				0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f,
				1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f,
				0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f,
				1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f,
				0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f,
				1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f,
				0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f,
				1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f,
				0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f,
				1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f,
				0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f,
				1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f,
				0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f,
				1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f };

		ByteBuffer cbb = ByteBuffer.allocateDirect(valueColor.length * 4);
		cbb.order(ByteOrder.nativeOrder());
		mColorBuffer[5] = cbb.asFloatBuffer();
		mColorBuffer[5].put(valueColor);
		mColorBuffer[5].position(0);
	}

	public void setColor6() {
		float valueColor[] = { 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f };

		ByteBuffer cbb = ByteBuffer.allocateDirect(valueColor.length * 4);
		cbb.order(ByteOrder.nativeOrder());
		mColorBuffer[6] = cbb.asFloatBuffer();
		mColorBuffer[6].put(valueColor);
		mColorBuffer[6].position(0);
	}

	public void setColor7() {
		float valueColor[] = { 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f,
				1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f,
				1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f,
				1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f,
				1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f,
				1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f,
				1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f };

		ByteBuffer cbb = ByteBuffer.allocateDirect(valueColor.length * 4);
		cbb.order(ByteOrder.nativeOrder());
		mColorBuffer[7] = cbb.asFloatBuffer();
		mColorBuffer[7].put(valueColor);
		mColorBuffer[7].position(0);
	}

	public void setColor8() {
		float valueColor[] = { 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f,
				1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f,
				1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f,
				1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f,
				1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f,
				1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f,
				1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f,
				1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f,
				1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f };

		ByteBuffer cbb = ByteBuffer.allocateDirect(valueColor.length * 4);
		cbb.order(ByteOrder.nativeOrder());
		mColorBuffer[8] = cbb.asFloatBuffer();
		mColorBuffer[8].put(valueColor);
		mColorBuffer[8].position(0);
	}

	public void setColor9() {
		float valueColor[] = { 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f,
				1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f,
				1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f,
				1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f,
				1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f,
				1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f,
				1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f,
				1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f,
				1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f };

		ByteBuffer cbb = ByteBuffer.allocateDirect(valueColor.length * 4);
		cbb.order(ByteOrder.nativeOrder());
		mColorBuffer[9] = cbb.asFloatBuffer();
		mColorBuffer[9].put(valueColor);
		mColorBuffer[9].position(0);
	}

	public void setColor10() {
		float valueColor[] = { 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f,
				1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f,
				1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f,
				1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f,
				1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f,
				1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f,
				1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f,
				1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f,
				1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f,
				1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f,
				1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f,
				1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f,
				1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f,
				1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f,
				1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f,
				1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f,
				1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f,
				1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f,
				1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f,
				1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f,
				1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f,
				1.0f };

		ByteBuffer cbb = ByteBuffer.allocateDirect(valueColor.length * 4);
		cbb.order(ByteOrder.nativeOrder());
		mColorBuffer[10] = cbb.asFloatBuffer();
		mColorBuffer[10].put(valueColor);
		mColorBuffer[10].position(0);
	}

	public void setColor11() {
		float valueColor[] = { 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f };

		ByteBuffer cbb = ByteBuffer.allocateDirect(valueColor.length * 4);
		cbb.order(ByteOrder.nativeOrder());
		mColorBuffer[11] = cbb.asFloatBuffer();
		mColorBuffer[11].put(valueColor);
		mColorBuffer[11].position(0);
	}

	public void setColor12() {
		float valueColor[] = { 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f,
				0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f,
				1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f,
				0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f,
				1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f, 0.501999f,
				0.501999f, 0.501999f, 1.0f, 0.501999f, 0.501999f, 0.501999f, 1.0f };

		ByteBuffer cbb = ByteBuffer.allocateDirect(valueColor.length * 4);
		cbb.order(ByteOrder.nativeOrder());
		mColorBuffer[12] = cbb.asFloatBuffer();
		mColorBuffer[12].put(valueColor);
		mColorBuffer[12].position(0);
	}

	public void setColor13() {
		float valueColor[] = { 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f, 1f, 1f, 1f, 1.0f };

		ByteBuffer cbb = ByteBuffer.allocateDirect(valueColor.length * 4);
		cbb.order(ByteOrder.nativeOrder());
		mColorBuffer[13] = cbb.asFloatBuffer();
		mColorBuffer[13].put(valueColor);
		mColorBuffer[13].position(0);
	}

	public void setColor14() {
		float valueColor[] = { 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f,
				0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f, 1.0f, 0.411799f, 0.411799f, 0.411799f,
				1.0f };

		ByteBuffer cbb = ByteBuffer.allocateDirect(valueColor.length * 4);
		cbb.order(ByteOrder.nativeOrder());
		mColorBuffer[14] = cbb.asFloatBuffer();
		mColorBuffer[14].put(valueColor);
		mColorBuffer[14].position(0);
	}

	public void setColor15() {
		float valueColor[] = { 0.862699f, 0.862699f, 0.862699f, 1.0f, 0.862699f, 0.862699f, 0.862699f, 1.0f, 0.862699f,
				0.862699f, 0.862699f, 1.0f, 0.862699f, 0.862699f, 0.862699f, 1.0f, 0.862699f, 0.862699f, 0.862699f,
				1.0f, 0.862699f, 0.862699f, 0.862699f, 1.0f, 0.862699f, 0.862699f, 0.862699f, 1.0f, 0.862699f,
				0.862699f, 0.862699f, 1.0f, 0.862699f, 0.862699f, 0.862699f, 1.0f, 0.862699f, 0.862699f, 0.862699f,
				1.0f, 0.862699f, 0.862699f, 0.862699f, 1.0f, 0.862699f, 0.862699f, 0.862699f, 1.0f, 0.862699f,
				0.862699f, 0.862699f, 1.0f, 0.862699f, 0.862699f, 0.862699f, 1.0f, 0.862699f, 0.862699f, 0.862699f,
				1.0f, 0.862699f, 0.862699f, 0.862699f, 1.0f, 0.862699f, 0.862699f, 0.862699f, 1.0f, 0.862699f,
				0.862699f, 0.862699f, 1.0f, 0.862699f, 0.862699f, 0.862699f, 1.0f, 0.862699f, 0.862699f, 0.862699f,
				1.0f, 0.862699f, 0.862699f, 0.862699f, 1.0f, 0.862699f, 0.862699f, 0.862699f, 1.0f, 0.862699f,
				0.862699f, 0.862699f, 1.0f, 0.862699f, 0.862699f, 0.862699f, 1.0f, 0.862699f, 0.862699f, 0.862699f,
				1.0f, 0.862699f, 0.862699f, 0.862699f, 1.0f };

		ByteBuffer cbb = ByteBuffer.allocateDirect(valueColor.length * 4);
		cbb.order(ByteOrder.nativeOrder());
		mColorBuffer[15] = cbb.asFloatBuffer();
		mColorBuffer[15].put(valueColor);
		mColorBuffer[15].position(0);
	}

	@Override
	public void draw(GL10 gl, int variable) {
		// TODO Auto-generated method stub
		
	}
}
